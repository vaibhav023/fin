"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/asn1js";
exports.ids = ["vendor-chunks/asn1js"];
exports.modules = {

/***/ "(rsc)/./node_modules/asn1js/build/index.js":
/*!********************************************!*\
  !*** ./node_modules/asn1js/build/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*!\n * Copyright (c) 2014, GMO GlobalSign\n * Copyright (c) 2015-2022, Peculiar Ventures\n * All rights reserved.\n * \n * Author 2014-2019, Yury Strozhevsky\n * \n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * \n * * Redistributions of source code must retain the above copyright notice, this\n *   list of conditions and the following disclaimer.\n * \n * * Redistributions in binary form must reproduce the above copyright notice, this\n *   list of conditions and the following disclaimer in the documentation and/or\n *   other materials provided with the distribution.\n * \n * * Neither the name of the copyright holder nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n * \n */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar pvtsutils = __webpack_require__(/*! pvtsutils */ \"(rsc)/./node_modules/pvtsutils/build/index.js\");\nvar pvutils = __webpack_require__(/*! pvutils */ \"(rsc)/./node_modules/pvutils/build/utils.js\");\nfunction _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = Object.create(null);\n    if (e) {\n        Object.keys(e).forEach(function(k) {\n            if (k !== \"default\") {\n                var d = Object.getOwnPropertyDescriptor(e, k);\n                Object.defineProperty(n, k, d.get ? d : {\n                    enumerable: true,\n                    get: function() {\n                        return e[k];\n                    }\n                });\n            }\n        });\n    }\n    n[\"default\"] = e;\n    return Object.freeze(n);\n}\nvar pvtsutils__namespace = /*#__PURE__*/ _interopNamespace(pvtsutils);\nvar pvutils__namespace = /*#__PURE__*/ _interopNamespace(pvutils);\nfunction assertBigInt() {\n    if (typeof BigInt === \"undefined\") {\n        throw new Error(\"BigInt is not defined. Your environment doesn't implement BigInt.\");\n    }\n}\nfunction concat(buffers) {\n    let outputLength = 0;\n    let prevLength = 0;\n    for(let i = 0; i < buffers.length; i++){\n        const buffer = buffers[i];\n        outputLength += buffer.byteLength;\n    }\n    const retView = new Uint8Array(outputLength);\n    for(let i = 0; i < buffers.length; i++){\n        const buffer = buffers[i];\n        retView.set(new Uint8Array(buffer), prevLength);\n        prevLength += buffer.byteLength;\n    }\n    return retView.buffer;\n}\nfunction checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength) {\n    if (!(inputBuffer instanceof Uint8Array)) {\n        baseBlock.error = \"Wrong parameter: inputBuffer must be 'Uint8Array'\";\n        return false;\n    }\n    if (!inputBuffer.byteLength) {\n        baseBlock.error = \"Wrong parameter: inputBuffer has zero length\";\n        return false;\n    }\n    if (inputOffset < 0) {\n        baseBlock.error = \"Wrong parameter: inputOffset less than zero\";\n        return false;\n    }\n    if (inputLength < 0) {\n        baseBlock.error = \"Wrong parameter: inputLength less than zero\";\n        return false;\n    }\n    if (inputBuffer.byteLength - inputOffset - inputLength < 0) {\n        baseBlock.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\n        return false;\n    }\n    return true;\n}\nclass ViewWriter {\n    constructor(){\n        this.items = [];\n    }\n    write(buf) {\n        this.items.push(buf);\n    }\n    final() {\n        return concat(this.items);\n    }\n}\nconst powers2 = [\n    new Uint8Array([\n        1\n    ])\n];\nconst digitsString = \"0123456789\";\nconst NAME = \"name\";\nconst VALUE_HEX_VIEW = \"valueHexView\";\nconst IS_HEX_ONLY = \"isHexOnly\";\nconst ID_BLOCK = \"idBlock\";\nconst TAG_CLASS = \"tagClass\";\nconst TAG_NUMBER = \"tagNumber\";\nconst IS_CONSTRUCTED = \"isConstructed\";\nconst FROM_BER = \"fromBER\";\nconst TO_BER = \"toBER\";\nconst LOCAL = \"local\";\nconst EMPTY_STRING = \"\";\nconst EMPTY_BUFFER = new ArrayBuffer(0);\nconst EMPTY_VIEW = new Uint8Array(0);\nconst END_OF_CONTENT_NAME = \"EndOfContent\";\nconst OCTET_STRING_NAME = \"OCTET STRING\";\nconst BIT_STRING_NAME = \"BIT STRING\";\nfunction HexBlock(BaseClass) {\n    var _a;\n    return _a = class Some extends BaseClass {\n        constructor(...args){\n            var _a;\n            super(...args);\n            const params = args[0] || {};\n            this.isHexOnly = (_a = params.isHexOnly) !== null && _a !== void 0 ? _a : false;\n            this.valueHexView = params.valueHex ? pvtsutils__namespace.BufferSourceConverter.toUint8Array(params.valueHex) : EMPTY_VIEW;\n        }\n        get valueHex() {\n            return this.valueHexView.slice().buffer;\n        }\n        set valueHex(value) {\n            this.valueHexView = new Uint8Array(value);\n        }\n        fromBER(inputBuffer, inputOffset, inputLength) {\n            const view = inputBuffer instanceof ArrayBuffer ? new Uint8Array(inputBuffer) : inputBuffer;\n            if (!checkBufferParams(this, view, inputOffset, inputLength)) {\n                return -1;\n            }\n            const endLength = inputOffset + inputLength;\n            this.valueHexView = view.subarray(inputOffset, endLength);\n            if (!this.valueHexView.length) {\n                this.warnings.push(\"Zero buffer length\");\n                return inputOffset;\n            }\n            this.blockLength = inputLength;\n            return endLength;\n        }\n        toBER(sizeOnly = false) {\n            if (!this.isHexOnly) {\n                this.error = \"Flag 'isHexOnly' is not set, abort\";\n                return EMPTY_BUFFER;\n            }\n            if (sizeOnly) {\n                return new ArrayBuffer(this.valueHexView.byteLength);\n            }\n            return this.valueHexView.byteLength === this.valueHexView.buffer.byteLength ? this.valueHexView.buffer : this.valueHexView.slice().buffer;\n        }\n        toJSON() {\n            return {\n                ...super.toJSON(),\n                isHexOnly: this.isHexOnly,\n                valueHex: pvtsutils__namespace.Convert.ToHex(this.valueHexView)\n            };\n        }\n    }, _a.NAME = \"hexBlock\", _a;\n}\nclass LocalBaseBlock {\n    constructor({ blockLength = 0, error = EMPTY_STRING, warnings = [], valueBeforeDecode = EMPTY_VIEW } = {}){\n        this.blockLength = blockLength;\n        this.error = error;\n        this.warnings = warnings;\n        this.valueBeforeDecodeView = pvtsutils__namespace.BufferSourceConverter.toUint8Array(valueBeforeDecode);\n    }\n    static blockName() {\n        return this.NAME;\n    }\n    get valueBeforeDecode() {\n        return this.valueBeforeDecodeView.slice().buffer;\n    }\n    set valueBeforeDecode(value) {\n        this.valueBeforeDecodeView = new Uint8Array(value);\n    }\n    toJSON() {\n        return {\n            blockName: this.constructor.NAME,\n            blockLength: this.blockLength,\n            error: this.error,\n            warnings: this.warnings,\n            valueBeforeDecode: pvtsutils__namespace.Convert.ToHex(this.valueBeforeDecodeView)\n        };\n    }\n}\nLocalBaseBlock.NAME = \"baseBlock\";\nclass ValueBlock extends LocalBaseBlock {\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        throw TypeError(\"User need to make a specific function in a class which extends 'ValueBlock'\");\n    }\n    toBER(sizeOnly, writer) {\n        throw TypeError(\"User need to make a specific function in a class which extends 'ValueBlock'\");\n    }\n}\nValueBlock.NAME = \"valueBlock\";\nclass LocalIdentificationBlock extends HexBlock(LocalBaseBlock) {\n    constructor({ idBlock = {} } = {}){\n        var _a, _b, _c, _d;\n        super();\n        if (idBlock) {\n            this.isHexOnly = (_a = idBlock.isHexOnly) !== null && _a !== void 0 ? _a : false;\n            this.valueHexView = idBlock.valueHex ? pvtsutils__namespace.BufferSourceConverter.toUint8Array(idBlock.valueHex) : EMPTY_VIEW;\n            this.tagClass = (_b = idBlock.tagClass) !== null && _b !== void 0 ? _b : -1;\n            this.tagNumber = (_c = idBlock.tagNumber) !== null && _c !== void 0 ? _c : -1;\n            this.isConstructed = (_d = idBlock.isConstructed) !== null && _d !== void 0 ? _d : false;\n        } else {\n            this.tagClass = -1;\n            this.tagNumber = -1;\n            this.isConstructed = false;\n        }\n    }\n    toBER(sizeOnly = false) {\n        let firstOctet = 0;\n        switch(this.tagClass){\n            case 1:\n                firstOctet |= 0x00;\n                break;\n            case 2:\n                firstOctet |= 0x40;\n                break;\n            case 3:\n                firstOctet |= 0x80;\n                break;\n            case 4:\n                firstOctet |= 0xC0;\n                break;\n            default:\n                this.error = \"Unknown tag class\";\n                return EMPTY_BUFFER;\n        }\n        if (this.isConstructed) firstOctet |= 0x20;\n        if (this.tagNumber < 31 && !this.isHexOnly) {\n            const retView = new Uint8Array(1);\n            if (!sizeOnly) {\n                let number = this.tagNumber;\n                number &= 0x1F;\n                firstOctet |= number;\n                retView[0] = firstOctet;\n            }\n            return retView.buffer;\n        }\n        if (!this.isHexOnly) {\n            const encodedBuf = pvutils__namespace.utilToBase(this.tagNumber, 7);\n            const encodedView = new Uint8Array(encodedBuf);\n            const size = encodedBuf.byteLength;\n            const retView = new Uint8Array(size + 1);\n            retView[0] = firstOctet | 0x1F;\n            if (!sizeOnly) {\n                for(let i = 0; i < size - 1; i++)retView[i + 1] = encodedView[i] | 0x80;\n                retView[size] = encodedView[size - 1];\n            }\n            return retView.buffer;\n        }\n        const retView = new Uint8Array(this.valueHexView.byteLength + 1);\n        retView[0] = firstOctet | 0x1F;\n        if (!sizeOnly) {\n            const curView = this.valueHexView;\n            for(let i = 0; i < curView.length - 1; i++)retView[i + 1] = curView[i] | 0x80;\n            retView[this.valueHexView.byteLength] = curView[curView.length - 1];\n        }\n        return retView.buffer;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const inputView = pvtsutils__namespace.BufferSourceConverter.toUint8Array(inputBuffer);\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\n            return -1;\n        }\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\n        if (intBuffer.length === 0) {\n            this.error = \"Zero buffer length\";\n            return -1;\n        }\n        const tagClassMask = intBuffer[0] & 0xC0;\n        switch(tagClassMask){\n            case 0x00:\n                this.tagClass = 1;\n                break;\n            case 0x40:\n                this.tagClass = 2;\n                break;\n            case 0x80:\n                this.tagClass = 3;\n                break;\n            case 0xC0:\n                this.tagClass = 4;\n                break;\n            default:\n                this.error = \"Unknown tag class\";\n                return -1;\n        }\n        this.isConstructed = (intBuffer[0] & 0x20) === 0x20;\n        this.isHexOnly = false;\n        const tagNumberMask = intBuffer[0] & 0x1F;\n        if (tagNumberMask !== 0x1F) {\n            this.tagNumber = tagNumberMask;\n            this.blockLength = 1;\n        } else {\n            let count = 1;\n            let intTagNumberBuffer = this.valueHexView = new Uint8Array(255);\n            let tagNumberBufferMaxLength = 255;\n            while(intBuffer[count] & 0x80){\n                intTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F;\n                count++;\n                if (count >= intBuffer.length) {\n                    this.error = \"End of input reached before message was fully decoded\";\n                    return -1;\n                }\n                if (count === tagNumberBufferMaxLength) {\n                    tagNumberBufferMaxLength += 255;\n                    const tempBufferView = new Uint8Array(tagNumberBufferMaxLength);\n                    for(let i = 0; i < intTagNumberBuffer.length; i++)tempBufferView[i] = intTagNumberBuffer[i];\n                    intTagNumberBuffer = this.valueHexView = new Uint8Array(tagNumberBufferMaxLength);\n                }\n            }\n            this.blockLength = count + 1;\n            intTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F;\n            const tempBufferView = new Uint8Array(count);\n            for(let i = 0; i < count; i++)tempBufferView[i] = intTagNumberBuffer[i];\n            intTagNumberBuffer = this.valueHexView = new Uint8Array(count);\n            intTagNumberBuffer.set(tempBufferView);\n            if (this.blockLength <= 9) this.tagNumber = pvutils__namespace.utilFromBase(intTagNumberBuffer, 7);\n            else {\n                this.isHexOnly = true;\n                this.warnings.push(\"Tag too long, represented as hex-coded\");\n            }\n        }\n        if (this.tagClass === 1 && this.isConstructed) {\n            switch(this.tagNumber){\n                case 1:\n                case 2:\n                case 5:\n                case 6:\n                case 9:\n                case 13:\n                case 14:\n                case 23:\n                case 24:\n                case 31:\n                case 32:\n                case 33:\n                case 34:\n                    this.error = \"Constructed encoding used for primitive type\";\n                    return -1;\n            }\n        }\n        return inputOffset + this.blockLength;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            tagClass: this.tagClass,\n            tagNumber: this.tagNumber,\n            isConstructed: this.isConstructed\n        };\n    }\n}\nLocalIdentificationBlock.NAME = \"identificationBlock\";\nclass LocalLengthBlock extends LocalBaseBlock {\n    constructor({ lenBlock = {} } = {}){\n        var _a, _b, _c;\n        super();\n        this.isIndefiniteForm = (_a = lenBlock.isIndefiniteForm) !== null && _a !== void 0 ? _a : false;\n        this.longFormUsed = (_b = lenBlock.longFormUsed) !== null && _b !== void 0 ? _b : false;\n        this.length = (_c = lenBlock.length) !== null && _c !== void 0 ? _c : 0;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const view = pvtsutils__namespace.BufferSourceConverter.toUint8Array(inputBuffer);\n        if (!checkBufferParams(this, view, inputOffset, inputLength)) {\n            return -1;\n        }\n        const intBuffer = view.subarray(inputOffset, inputOffset + inputLength);\n        if (intBuffer.length === 0) {\n            this.error = \"Zero buffer length\";\n            return -1;\n        }\n        if (intBuffer[0] === 0xFF) {\n            this.error = \"Length block 0xFF is reserved by standard\";\n            return -1;\n        }\n        this.isIndefiniteForm = intBuffer[0] === 0x80;\n        if (this.isIndefiniteForm) {\n            this.blockLength = 1;\n            return inputOffset + this.blockLength;\n        }\n        this.longFormUsed = !!(intBuffer[0] & 0x80);\n        if (this.longFormUsed === false) {\n            this.length = intBuffer[0];\n            this.blockLength = 1;\n            return inputOffset + this.blockLength;\n        }\n        const count = intBuffer[0] & 0x7F;\n        if (count > 8) {\n            this.error = \"Too big integer\";\n            return -1;\n        }\n        if (count + 1 > intBuffer.length) {\n            this.error = \"End of input reached before message was fully decoded\";\n            return -1;\n        }\n        const lenOffset = inputOffset + 1;\n        const lengthBufferView = view.subarray(lenOffset, lenOffset + count);\n        if (lengthBufferView[count - 1] === 0x00) this.warnings.push(\"Needlessly long encoded length\");\n        this.length = pvutils__namespace.utilFromBase(lengthBufferView, 8);\n        if (this.longFormUsed && this.length <= 127) this.warnings.push(\"Unnecessary usage of long length form\");\n        this.blockLength = count + 1;\n        return inputOffset + this.blockLength;\n    }\n    toBER(sizeOnly = false) {\n        let retBuf;\n        let retView;\n        if (this.length > 127) this.longFormUsed = true;\n        if (this.isIndefiniteForm) {\n            retBuf = new ArrayBuffer(1);\n            if (sizeOnly === false) {\n                retView = new Uint8Array(retBuf);\n                retView[0] = 0x80;\n            }\n            return retBuf;\n        }\n        if (this.longFormUsed) {\n            const encodedBuf = pvutils__namespace.utilToBase(this.length, 8);\n            if (encodedBuf.byteLength > 127) {\n                this.error = \"Too big length\";\n                return EMPTY_BUFFER;\n            }\n            retBuf = new ArrayBuffer(encodedBuf.byteLength + 1);\n            if (sizeOnly) return retBuf;\n            const encodedView = new Uint8Array(encodedBuf);\n            retView = new Uint8Array(retBuf);\n            retView[0] = encodedBuf.byteLength | 0x80;\n            for(let i = 0; i < encodedBuf.byteLength; i++)retView[i + 1] = encodedView[i];\n            return retBuf;\n        }\n        retBuf = new ArrayBuffer(1);\n        if (sizeOnly === false) {\n            retView = new Uint8Array(retBuf);\n            retView[0] = this.length;\n        }\n        return retBuf;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            isIndefiniteForm: this.isIndefiniteForm,\n            longFormUsed: this.longFormUsed,\n            length: this.length\n        };\n    }\n}\nLocalLengthBlock.NAME = \"lengthBlock\";\nconst typeStore = {};\nclass BaseBlock extends LocalBaseBlock {\n    constructor({ name = EMPTY_STRING, optional = false, primitiveSchema, ...parameters } = {}, valueBlockType){\n        super(parameters);\n        this.name = name;\n        this.optional = optional;\n        if (primitiveSchema) {\n            this.primitiveSchema = primitiveSchema;\n        }\n        this.idBlock = new LocalIdentificationBlock(parameters);\n        this.lenBlock = new LocalLengthBlock(parameters);\n        this.valueBlock = valueBlockType ? new valueBlockType(parameters) : new ValueBlock(parameters);\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm ? inputLength : this.lenBlock.length);\n        if (resultOffset === -1) {\n            this.error = this.valueBlock.error;\n            return resultOffset;\n        }\n        if (!this.idBlock.error.length) this.blockLength += this.idBlock.blockLength;\n        if (!this.lenBlock.error.length) this.blockLength += this.lenBlock.blockLength;\n        if (!this.valueBlock.error.length) this.blockLength += this.valueBlock.blockLength;\n        return resultOffset;\n    }\n    toBER(sizeOnly, writer) {\n        const _writer = writer || new ViewWriter();\n        if (!writer) {\n            prepareIndefiniteForm(this);\n        }\n        const idBlockBuf = this.idBlock.toBER(sizeOnly);\n        _writer.write(idBlockBuf);\n        if (this.lenBlock.isIndefiniteForm) {\n            _writer.write(new Uint8Array([\n                0x80\n            ]).buffer);\n            this.valueBlock.toBER(sizeOnly, _writer);\n            _writer.write(new ArrayBuffer(2));\n        } else {\n            const valueBlockBuf = this.valueBlock.toBER(sizeOnly);\n            this.lenBlock.length = valueBlockBuf.byteLength;\n            const lenBlockBuf = this.lenBlock.toBER(sizeOnly);\n            _writer.write(lenBlockBuf);\n            _writer.write(valueBlockBuf);\n        }\n        if (!writer) {\n            return _writer.final();\n        }\n        return EMPTY_BUFFER;\n    }\n    toJSON() {\n        const object = {\n            ...super.toJSON(),\n            idBlock: this.idBlock.toJSON(),\n            lenBlock: this.lenBlock.toJSON(),\n            valueBlock: this.valueBlock.toJSON(),\n            name: this.name,\n            optional: this.optional\n        };\n        if (this.primitiveSchema) object.primitiveSchema = this.primitiveSchema.toJSON();\n        return object;\n    }\n    toString(encoding = \"ascii\") {\n        if (encoding === \"ascii\") {\n            return this.onAsciiEncoding();\n        }\n        return pvtsutils__namespace.Convert.ToHex(this.toBER());\n    }\n    onAsciiEncoding() {\n        return `${this.constructor.NAME} : ${pvtsutils__namespace.Convert.ToHex(this.valueBlock.valueBeforeDecodeView)}`;\n    }\n    isEqual(other) {\n        if (this === other) {\n            return true;\n        }\n        if (!(other instanceof this.constructor)) {\n            return false;\n        }\n        const thisRaw = this.toBER();\n        const otherRaw = other.toBER();\n        return pvutils__namespace.isEqualBuffer(thisRaw, otherRaw);\n    }\n}\nBaseBlock.NAME = \"BaseBlock\";\nfunction prepareIndefiniteForm(baseBlock) {\n    if (baseBlock instanceof typeStore.Constructed) {\n        for (const value of baseBlock.valueBlock.value){\n            if (prepareIndefiniteForm(value)) {\n                baseBlock.lenBlock.isIndefiniteForm = true;\n            }\n        }\n    }\n    return !!baseBlock.lenBlock.isIndefiniteForm;\n}\nclass BaseStringBlock extends BaseBlock {\n    constructor({ value = EMPTY_STRING, ...parameters } = {}, stringValueBlockType){\n        super(parameters, stringValueBlockType);\n        if (value) {\n            this.fromString(value);\n        }\n    }\n    getValue() {\n        return this.valueBlock.value;\n    }\n    setValue(value) {\n        this.valueBlock.value = value;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm ? inputLength : this.lenBlock.length);\n        if (resultOffset === -1) {\n            this.error = this.valueBlock.error;\n            return resultOffset;\n        }\n        this.fromBuffer(this.valueBlock.valueHexView);\n        if (!this.idBlock.error.length) this.blockLength += this.idBlock.blockLength;\n        if (!this.lenBlock.error.length) this.blockLength += this.lenBlock.blockLength;\n        if (!this.valueBlock.error.length) this.blockLength += this.valueBlock.blockLength;\n        return resultOffset;\n    }\n    onAsciiEncoding() {\n        return `${this.constructor.NAME} : '${this.valueBlock.value}'`;\n    }\n}\nBaseStringBlock.NAME = \"BaseStringBlock\";\nclass LocalPrimitiveValueBlock extends HexBlock(ValueBlock) {\n    constructor({ isHexOnly = true, ...parameters } = {}){\n        super(parameters);\n        this.isHexOnly = isHexOnly;\n    }\n}\nLocalPrimitiveValueBlock.NAME = \"PrimitiveValueBlock\";\nvar _a$w;\nclass Primitive extends BaseBlock {\n    constructor(parameters = {}){\n        super(parameters, LocalPrimitiveValueBlock);\n        this.idBlock.isConstructed = false;\n    }\n}\n_a$w = Primitive;\n(()=>{\n    typeStore.Primitive = _a$w;\n})();\nPrimitive.NAME = \"PRIMITIVE\";\nfunction localChangeType(inputObject, newType) {\n    if (inputObject instanceof newType) {\n        return inputObject;\n    }\n    const newObject = new newType();\n    newObject.idBlock = inputObject.idBlock;\n    newObject.lenBlock = inputObject.lenBlock;\n    newObject.warnings = inputObject.warnings;\n    newObject.valueBeforeDecodeView = inputObject.valueBeforeDecodeView;\n    return newObject;\n}\nfunction localFromBER(inputBuffer, inputOffset = 0, inputLength = inputBuffer.length) {\n    const incomingOffset = inputOffset;\n    let returnObject = new BaseBlock({}, ValueBlock);\n    const baseBlock = new LocalBaseBlock();\n    if (!checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength)) {\n        returnObject.error = baseBlock.error;\n        return {\n            offset: -1,\n            result: returnObject\n        };\n    }\n    const intBuffer = inputBuffer.subarray(inputOffset, inputOffset + inputLength);\n    if (!intBuffer.length) {\n        returnObject.error = \"Zero buffer length\";\n        return {\n            offset: -1,\n            result: returnObject\n        };\n    }\n    let resultOffset = returnObject.idBlock.fromBER(inputBuffer, inputOffset, inputLength);\n    if (returnObject.idBlock.warnings.length) {\n        returnObject.warnings.concat(returnObject.idBlock.warnings);\n    }\n    if (resultOffset === -1) {\n        returnObject.error = returnObject.idBlock.error;\n        return {\n            offset: -1,\n            result: returnObject\n        };\n    }\n    inputOffset = resultOffset;\n    inputLength -= returnObject.idBlock.blockLength;\n    resultOffset = returnObject.lenBlock.fromBER(inputBuffer, inputOffset, inputLength);\n    if (returnObject.lenBlock.warnings.length) {\n        returnObject.warnings.concat(returnObject.lenBlock.warnings);\n    }\n    if (resultOffset === -1) {\n        returnObject.error = returnObject.lenBlock.error;\n        return {\n            offset: -1,\n            result: returnObject\n        };\n    }\n    inputOffset = resultOffset;\n    inputLength -= returnObject.lenBlock.blockLength;\n    if (!returnObject.idBlock.isConstructed && returnObject.lenBlock.isIndefiniteForm) {\n        returnObject.error = \"Indefinite length form used for primitive encoding form\";\n        return {\n            offset: -1,\n            result: returnObject\n        };\n    }\n    let newASN1Type = BaseBlock;\n    switch(returnObject.idBlock.tagClass){\n        case 1:\n            if (returnObject.idBlock.tagNumber >= 37 && returnObject.idBlock.isHexOnly === false) {\n                returnObject.error = \"UNIVERSAL 37 and upper tags are reserved by ASN.1 standard\";\n                return {\n                    offset: -1,\n                    result: returnObject\n                };\n            }\n            switch(returnObject.idBlock.tagNumber){\n                case 0:\n                    if (returnObject.idBlock.isConstructed && returnObject.lenBlock.length > 0) {\n                        returnObject.error = \"Type [UNIVERSAL 0] is reserved\";\n                        return {\n                            offset: -1,\n                            result: returnObject\n                        };\n                    }\n                    newASN1Type = typeStore.EndOfContent;\n                    break;\n                case 1:\n                    newASN1Type = typeStore.Boolean;\n                    break;\n                case 2:\n                    newASN1Type = typeStore.Integer;\n                    break;\n                case 3:\n                    newASN1Type = typeStore.BitString;\n                    break;\n                case 4:\n                    newASN1Type = typeStore.OctetString;\n                    break;\n                case 5:\n                    newASN1Type = typeStore.Null;\n                    break;\n                case 6:\n                    newASN1Type = typeStore.ObjectIdentifier;\n                    break;\n                case 10:\n                    newASN1Type = typeStore.Enumerated;\n                    break;\n                case 12:\n                    newASN1Type = typeStore.Utf8String;\n                    break;\n                case 13:\n                    newASN1Type = typeStore.RelativeObjectIdentifier;\n                    break;\n                case 14:\n                    newASN1Type = typeStore.TIME;\n                    break;\n                case 15:\n                    returnObject.error = \"[UNIVERSAL 15] is reserved by ASN.1 standard\";\n                    return {\n                        offset: -1,\n                        result: returnObject\n                    };\n                case 16:\n                    newASN1Type = typeStore.Sequence;\n                    break;\n                case 17:\n                    newASN1Type = typeStore.Set;\n                    break;\n                case 18:\n                    newASN1Type = typeStore.NumericString;\n                    break;\n                case 19:\n                    newASN1Type = typeStore.PrintableString;\n                    break;\n                case 20:\n                    newASN1Type = typeStore.TeletexString;\n                    break;\n                case 21:\n                    newASN1Type = typeStore.VideotexString;\n                    break;\n                case 22:\n                    newASN1Type = typeStore.IA5String;\n                    break;\n                case 23:\n                    newASN1Type = typeStore.UTCTime;\n                    break;\n                case 24:\n                    newASN1Type = typeStore.GeneralizedTime;\n                    break;\n                case 25:\n                    newASN1Type = typeStore.GraphicString;\n                    break;\n                case 26:\n                    newASN1Type = typeStore.VisibleString;\n                    break;\n                case 27:\n                    newASN1Type = typeStore.GeneralString;\n                    break;\n                case 28:\n                    newASN1Type = typeStore.UniversalString;\n                    break;\n                case 29:\n                    newASN1Type = typeStore.CharacterString;\n                    break;\n                case 30:\n                    newASN1Type = typeStore.BmpString;\n                    break;\n                case 31:\n                    newASN1Type = typeStore.DATE;\n                    break;\n                case 32:\n                    newASN1Type = typeStore.TimeOfDay;\n                    break;\n                case 33:\n                    newASN1Type = typeStore.DateTime;\n                    break;\n                case 34:\n                    newASN1Type = typeStore.Duration;\n                    break;\n                default:\n                    {\n                        const newObject = returnObject.idBlock.isConstructed ? new typeStore.Constructed() : new typeStore.Primitive();\n                        newObject.idBlock = returnObject.idBlock;\n                        newObject.lenBlock = returnObject.lenBlock;\n                        newObject.warnings = returnObject.warnings;\n                        returnObject = newObject;\n                    }\n            }\n            break;\n        case 2:\n        case 3:\n        case 4:\n        default:\n            {\n                newASN1Type = returnObject.idBlock.isConstructed ? typeStore.Constructed : typeStore.Primitive;\n            }\n    }\n    returnObject = localChangeType(returnObject, newASN1Type);\n    resultOffset = returnObject.fromBER(inputBuffer, inputOffset, returnObject.lenBlock.isIndefiniteForm ? inputLength : returnObject.lenBlock.length);\n    returnObject.valueBeforeDecodeView = inputBuffer.subarray(incomingOffset, incomingOffset + returnObject.blockLength);\n    return {\n        offset: resultOffset,\n        result: returnObject\n    };\n}\nfunction fromBER(inputBuffer) {\n    if (!inputBuffer.byteLength) {\n        const result = new BaseBlock({}, ValueBlock);\n        result.error = \"Input buffer has zero length\";\n        return {\n            offset: -1,\n            result\n        };\n    }\n    return localFromBER(pvtsutils__namespace.BufferSourceConverter.toUint8Array(inputBuffer).slice(), 0, inputBuffer.byteLength);\n}\nfunction checkLen(indefiniteLength, length) {\n    if (indefiniteLength) {\n        return 1;\n    }\n    return length;\n}\nclass LocalConstructedValueBlock extends ValueBlock {\n    constructor({ value = [], isIndefiniteForm = false, ...parameters } = {}){\n        super(parameters);\n        this.value = value;\n        this.isIndefiniteForm = isIndefiniteForm;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const view = pvtsutils__namespace.BufferSourceConverter.toUint8Array(inputBuffer);\n        if (!checkBufferParams(this, view, inputOffset, inputLength)) {\n            return -1;\n        }\n        this.valueBeforeDecodeView = view.subarray(inputOffset, inputOffset + inputLength);\n        if (this.valueBeforeDecodeView.length === 0) {\n            this.warnings.push(\"Zero buffer length\");\n            return inputOffset;\n        }\n        let currentOffset = inputOffset;\n        while(checkLen(this.isIndefiniteForm, inputLength) > 0){\n            const returnObject = localFromBER(view, currentOffset, inputLength);\n            if (returnObject.offset === -1) {\n                this.error = returnObject.result.error;\n                this.warnings.concat(returnObject.result.warnings);\n                return -1;\n            }\n            currentOffset = returnObject.offset;\n            this.blockLength += returnObject.result.blockLength;\n            inputLength -= returnObject.result.blockLength;\n            this.value.push(returnObject.result);\n            if (this.isIndefiniteForm && returnObject.result.constructor.NAME === END_OF_CONTENT_NAME) {\n                break;\n            }\n        }\n        if (this.isIndefiniteForm) {\n            if (this.value[this.value.length - 1].constructor.NAME === END_OF_CONTENT_NAME) {\n                this.value.pop();\n            } else {\n                this.warnings.push(\"No EndOfContent block encoded\");\n            }\n        }\n        return currentOffset;\n    }\n    toBER(sizeOnly, writer) {\n        const _writer = writer || new ViewWriter();\n        for(let i = 0; i < this.value.length; i++){\n            this.value[i].toBER(sizeOnly, _writer);\n        }\n        if (!writer) {\n            return _writer.final();\n        }\n        return EMPTY_BUFFER;\n    }\n    toJSON() {\n        const object = {\n            ...super.toJSON(),\n            isIndefiniteForm: this.isIndefiniteForm,\n            value: []\n        };\n        for (const value of this.value){\n            object.value.push(value.toJSON());\n        }\n        return object;\n    }\n}\nLocalConstructedValueBlock.NAME = \"ConstructedValueBlock\";\nvar _a$v;\nclass Constructed extends BaseBlock {\n    constructor(parameters = {}){\n        super(parameters, LocalConstructedValueBlock);\n        this.idBlock.isConstructed = true;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\n        const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm ? inputLength : this.lenBlock.length);\n        if (resultOffset === -1) {\n            this.error = this.valueBlock.error;\n            return resultOffset;\n        }\n        if (!this.idBlock.error.length) this.blockLength += this.idBlock.blockLength;\n        if (!this.lenBlock.error.length) this.blockLength += this.lenBlock.blockLength;\n        if (!this.valueBlock.error.length) this.blockLength += this.valueBlock.blockLength;\n        return resultOffset;\n    }\n    onAsciiEncoding() {\n        const values = [];\n        for (const value of this.valueBlock.value){\n            values.push(value.toString(\"ascii\").split(\"\\n\").map((o)=>`  ${o}`).join(\"\\n\"));\n        }\n        const blockName = this.idBlock.tagClass === 3 ? `[${this.idBlock.tagNumber}]` : this.constructor.NAME;\n        return values.length ? `${blockName} :\\n${values.join(\"\\n\")}` : `${blockName} :`;\n    }\n}\n_a$v = Constructed;\n(()=>{\n    typeStore.Constructed = _a$v;\n})();\nConstructed.NAME = \"CONSTRUCTED\";\nclass LocalEndOfContentValueBlock extends ValueBlock {\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        return inputOffset;\n    }\n    toBER(sizeOnly) {\n        return EMPTY_BUFFER;\n    }\n}\nLocalEndOfContentValueBlock.override = \"EndOfContentValueBlock\";\nvar _a$u;\nclass EndOfContent extends BaseBlock {\n    constructor(parameters = {}){\n        super(parameters, LocalEndOfContentValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 0;\n    }\n}\n_a$u = EndOfContent;\n(()=>{\n    typeStore.EndOfContent = _a$u;\n})();\nEndOfContent.NAME = END_OF_CONTENT_NAME;\nvar _a$t;\nclass Null extends BaseBlock {\n    constructor(parameters = {}){\n        super(parameters, ValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 5;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        if (this.lenBlock.length > 0) this.warnings.push(\"Non-zero length of value block for Null type\");\n        if (!this.idBlock.error.length) this.blockLength += this.idBlock.blockLength;\n        if (!this.lenBlock.error.length) this.blockLength += this.lenBlock.blockLength;\n        this.blockLength += inputLength;\n        if (inputOffset + inputLength > inputBuffer.byteLength) {\n            this.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\n            return -1;\n        }\n        return inputOffset + inputLength;\n    }\n    toBER(sizeOnly, writer) {\n        const retBuf = new ArrayBuffer(2);\n        if (!sizeOnly) {\n            const retView = new Uint8Array(retBuf);\n            retView[0] = 0x05;\n            retView[1] = 0x00;\n        }\n        if (writer) {\n            writer.write(retBuf);\n        }\n        return retBuf;\n    }\n    onAsciiEncoding() {\n        return `${this.constructor.NAME}`;\n    }\n}\n_a$t = Null;\n(()=>{\n    typeStore.Null = _a$t;\n})();\nNull.NAME = \"NULL\";\nclass LocalBooleanValueBlock extends HexBlock(ValueBlock) {\n    constructor({ value, ...parameters } = {}){\n        super(parameters);\n        if (parameters.valueHex) {\n            this.valueHexView = pvtsutils__namespace.BufferSourceConverter.toUint8Array(parameters.valueHex);\n        } else {\n            this.valueHexView = new Uint8Array(1);\n        }\n        if (value) {\n            this.value = value;\n        }\n    }\n    get value() {\n        for (const octet of this.valueHexView){\n            if (octet > 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    set value(value) {\n        this.valueHexView[0] = value ? 0xFF : 0x00;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const inputView = pvtsutils__namespace.BufferSourceConverter.toUint8Array(inputBuffer);\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\n            return -1;\n        }\n        this.valueHexView = inputView.subarray(inputOffset, inputOffset + inputLength);\n        if (inputLength > 1) this.warnings.push(\"Boolean value encoded in more then 1 octet\");\n        this.isHexOnly = true;\n        pvutils__namespace.utilDecodeTC.call(this);\n        this.blockLength = inputLength;\n        return inputOffset + inputLength;\n    }\n    toBER() {\n        return this.valueHexView.slice();\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            value: this.value\n        };\n    }\n}\nLocalBooleanValueBlock.NAME = \"BooleanValueBlock\";\nvar _a$s;\nclass Boolean extends BaseBlock {\n    constructor(parameters = {}){\n        super(parameters, LocalBooleanValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 1;\n    }\n    getValue() {\n        return this.valueBlock.value;\n    }\n    setValue(value) {\n        this.valueBlock.value = value;\n    }\n    onAsciiEncoding() {\n        return `${this.constructor.NAME} : ${this.getValue}`;\n    }\n}\n_a$s = Boolean;\n(()=>{\n    typeStore.Boolean = _a$s;\n})();\nBoolean.NAME = \"BOOLEAN\";\nclass LocalOctetStringValueBlock extends HexBlock(LocalConstructedValueBlock) {\n    constructor({ isConstructed = false, ...parameters } = {}){\n        super(parameters);\n        this.isConstructed = isConstructed;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        let resultOffset = 0;\n        if (this.isConstructed) {\n            this.isHexOnly = false;\n            resultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);\n            if (resultOffset === -1) return resultOffset;\n            for(let i = 0; i < this.value.length; i++){\n                const currentBlockName = this.value[i].constructor.NAME;\n                if (currentBlockName === END_OF_CONTENT_NAME) {\n                    if (this.isIndefiniteForm) break;\n                    else {\n                        this.error = \"EndOfContent is unexpected, OCTET STRING may consists of OCTET STRINGs only\";\n                        return -1;\n                    }\n                }\n                if (currentBlockName !== OCTET_STRING_NAME) {\n                    this.error = \"OCTET STRING may consists of OCTET STRINGs only\";\n                    return -1;\n                }\n            }\n        } else {\n            this.isHexOnly = true;\n            resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);\n            this.blockLength = inputLength;\n        }\n        return resultOffset;\n    }\n    toBER(sizeOnly, writer) {\n        if (this.isConstructed) return LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly, writer);\n        return sizeOnly ? new ArrayBuffer(this.valueHexView.byteLength) : this.valueHexView.slice().buffer;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            isConstructed: this.isConstructed\n        };\n    }\n}\nLocalOctetStringValueBlock.NAME = \"OctetStringValueBlock\";\nvar _a$r;\nclass OctetString extends BaseBlock {\n    constructor({ idBlock = {}, lenBlock = {}, ...parameters } = {}){\n        var _b, _c;\n        (_b = parameters.isConstructed) !== null && _b !== void 0 ? _b : parameters.isConstructed = !!((_c = parameters.value) === null || _c === void 0 ? void 0 : _c.length);\n        super({\n            idBlock: {\n                isConstructed: parameters.isConstructed,\n                ...idBlock\n            },\n            lenBlock: {\n                ...lenBlock,\n                isIndefiniteForm: !!parameters.isIndefiniteForm\n            },\n            ...parameters\n        }, LocalOctetStringValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 4;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        this.valueBlock.isConstructed = this.idBlock.isConstructed;\n        this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\n        if (inputLength === 0) {\n            if (this.idBlock.error.length === 0) this.blockLength += this.idBlock.blockLength;\n            if (this.lenBlock.error.length === 0) this.blockLength += this.lenBlock.blockLength;\n            return inputOffset;\n        }\n        if (!this.valueBlock.isConstructed) {\n            const view = inputBuffer instanceof ArrayBuffer ? new Uint8Array(inputBuffer) : inputBuffer;\n            const buf = view.subarray(inputOffset, inputOffset + inputLength);\n            try {\n                if (buf.byteLength) {\n                    const asn = localFromBER(buf, 0, buf.byteLength);\n                    if (asn.offset !== -1 && asn.offset === inputLength) {\n                        this.valueBlock.value = [\n                            asn.result\n                        ];\n                    }\n                }\n            } catch (e) {}\n        }\n        return super.fromBER(inputBuffer, inputOffset, inputLength);\n    }\n    onAsciiEncoding() {\n        if (this.valueBlock.isConstructed || this.valueBlock.value && this.valueBlock.value.length) {\n            return Constructed.prototype.onAsciiEncoding.call(this);\n        }\n        return `${this.constructor.NAME} : ${pvtsutils__namespace.Convert.ToHex(this.valueBlock.valueHexView)}`;\n    }\n    getValue() {\n        if (!this.idBlock.isConstructed) {\n            return this.valueBlock.valueHexView.slice().buffer;\n        }\n        const array = [];\n        for (const content of this.valueBlock.value){\n            if (content instanceof OctetString) {\n                array.push(content.valueBlock.valueHexView);\n            }\n        }\n        return pvtsutils__namespace.BufferSourceConverter.concat(array);\n    }\n}\n_a$r = OctetString;\n(()=>{\n    typeStore.OctetString = _a$r;\n})();\nOctetString.NAME = OCTET_STRING_NAME;\nclass LocalBitStringValueBlock extends HexBlock(LocalConstructedValueBlock) {\n    constructor({ unusedBits = 0, isConstructed = false, ...parameters } = {}){\n        super(parameters);\n        this.unusedBits = unusedBits;\n        this.isConstructed = isConstructed;\n        this.blockLength = this.valueHexView.byteLength;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        if (!inputLength) {\n            return inputOffset;\n        }\n        let resultOffset = -1;\n        if (this.isConstructed) {\n            resultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);\n            if (resultOffset === -1) return resultOffset;\n            for (const value of this.value){\n                const currentBlockName = value.constructor.NAME;\n                if (currentBlockName === END_OF_CONTENT_NAME) {\n                    if (this.isIndefiniteForm) break;\n                    else {\n                        this.error = \"EndOfContent is unexpected, BIT STRING may consists of BIT STRINGs only\";\n                        return -1;\n                    }\n                }\n                if (currentBlockName !== BIT_STRING_NAME) {\n                    this.error = \"BIT STRING may consists of BIT STRINGs only\";\n                    return -1;\n                }\n                const valueBlock = value.valueBlock;\n                if (this.unusedBits > 0 && valueBlock.unusedBits > 0) {\n                    this.error = 'Using of \"unused bits\" inside constructive BIT STRING allowed for least one only';\n                    return -1;\n                }\n                this.unusedBits = valueBlock.unusedBits;\n            }\n            return resultOffset;\n        }\n        const inputView = pvtsutils__namespace.BufferSourceConverter.toUint8Array(inputBuffer);\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\n            return -1;\n        }\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\n        this.unusedBits = intBuffer[0];\n        if (this.unusedBits > 7) {\n            this.error = \"Unused bits for BitString must be in range 0-7\";\n            return -1;\n        }\n        if (!this.unusedBits) {\n            const buf = intBuffer.subarray(1);\n            try {\n                if (buf.byteLength) {\n                    const asn = localFromBER(buf, 0, buf.byteLength);\n                    if (asn.offset !== -1 && asn.offset === inputLength - 1) {\n                        this.value = [\n                            asn.result\n                        ];\n                    }\n                }\n            } catch (e) {}\n        }\n        this.valueHexView = intBuffer.subarray(1);\n        this.blockLength = intBuffer.length;\n        return inputOffset + inputLength;\n    }\n    toBER(sizeOnly, writer) {\n        if (this.isConstructed) {\n            return LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly, writer);\n        }\n        if (sizeOnly) {\n            return new ArrayBuffer(this.valueHexView.byteLength + 1);\n        }\n        if (!this.valueHexView.byteLength) {\n            return EMPTY_BUFFER;\n        }\n        const retView = new Uint8Array(this.valueHexView.length + 1);\n        retView[0] = this.unusedBits;\n        retView.set(this.valueHexView, 1);\n        return retView.buffer;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            unusedBits: this.unusedBits,\n            isConstructed: this.isConstructed\n        };\n    }\n}\nLocalBitStringValueBlock.NAME = \"BitStringValueBlock\";\nvar _a$q;\nclass BitString extends BaseBlock {\n    constructor({ idBlock = {}, lenBlock = {}, ...parameters } = {}){\n        var _b, _c;\n        (_b = parameters.isConstructed) !== null && _b !== void 0 ? _b : parameters.isConstructed = !!((_c = parameters.value) === null || _c === void 0 ? void 0 : _c.length);\n        super({\n            idBlock: {\n                isConstructed: parameters.isConstructed,\n                ...idBlock\n            },\n            lenBlock: {\n                ...lenBlock,\n                isIndefiniteForm: !!parameters.isIndefiniteForm\n            },\n            ...parameters\n        }, LocalBitStringValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 3;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        this.valueBlock.isConstructed = this.idBlock.isConstructed;\n        this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\n        return super.fromBER(inputBuffer, inputOffset, inputLength);\n    }\n    onAsciiEncoding() {\n        if (this.valueBlock.isConstructed || this.valueBlock.value && this.valueBlock.value.length) {\n            return Constructed.prototype.onAsciiEncoding.call(this);\n        } else {\n            const bits = [];\n            const valueHex = this.valueBlock.valueHexView;\n            for (const byte of valueHex){\n                bits.push(byte.toString(2).padStart(8, \"0\"));\n            }\n            const bitsStr = bits.join(\"\");\n            return `${this.constructor.NAME} : ${bitsStr.substring(0, bitsStr.length - this.valueBlock.unusedBits)}`;\n        }\n    }\n}\n_a$q = BitString;\n(()=>{\n    typeStore.BitString = _a$q;\n})();\nBitString.NAME = BIT_STRING_NAME;\nvar _a$p;\nfunction viewAdd(first, second) {\n    const c = new Uint8Array([\n        0\n    ]);\n    const firstView = new Uint8Array(first);\n    const secondView = new Uint8Array(second);\n    let firstViewCopy = firstView.slice(0);\n    const firstViewCopyLength = firstViewCopy.length - 1;\n    const secondViewCopy = secondView.slice(0);\n    const secondViewCopyLength = secondViewCopy.length - 1;\n    let value = 0;\n    const max = secondViewCopyLength < firstViewCopyLength ? firstViewCopyLength : secondViewCopyLength;\n    let counter = 0;\n    for(let i = max; i >= 0; i--, counter++){\n        switch(true){\n            case counter < secondViewCopy.length:\n                value = firstViewCopy[firstViewCopyLength - counter] + secondViewCopy[secondViewCopyLength - counter] + c[0];\n                break;\n            default:\n                value = firstViewCopy[firstViewCopyLength - counter] + c[0];\n        }\n        c[0] = value / 10;\n        switch(true){\n            case counter >= firstViewCopy.length:\n                firstViewCopy = pvutils__namespace.utilConcatView(new Uint8Array([\n                    value % 10\n                ]), firstViewCopy);\n                break;\n            default:\n                firstViewCopy[firstViewCopyLength - counter] = value % 10;\n        }\n    }\n    if (c[0] > 0) firstViewCopy = pvutils__namespace.utilConcatView(c, firstViewCopy);\n    return firstViewCopy;\n}\nfunction power2(n) {\n    if (n >= powers2.length) {\n        for(let p = powers2.length; p <= n; p++){\n            const c = new Uint8Array([\n                0\n            ]);\n            let digits = powers2[p - 1].slice(0);\n            for(let i = digits.length - 1; i >= 0; i--){\n                const newValue = new Uint8Array([\n                    (digits[i] << 1) + c[0]\n                ]);\n                c[0] = newValue[0] / 10;\n                digits[i] = newValue[0] % 10;\n            }\n            if (c[0] > 0) digits = pvutils__namespace.utilConcatView(c, digits);\n            powers2.push(digits);\n        }\n    }\n    return powers2[n];\n}\nfunction viewSub(first, second) {\n    let b = 0;\n    const firstView = new Uint8Array(first);\n    const secondView = new Uint8Array(second);\n    const firstViewCopy = firstView.slice(0);\n    const firstViewCopyLength = firstViewCopy.length - 1;\n    const secondViewCopy = secondView.slice(0);\n    const secondViewCopyLength = secondViewCopy.length - 1;\n    let value;\n    let counter = 0;\n    for(let i = secondViewCopyLength; i >= 0; i--, counter++){\n        value = firstViewCopy[firstViewCopyLength - counter] - secondViewCopy[secondViewCopyLength - counter] - b;\n        switch(true){\n            case value < 0:\n                b = 1;\n                firstViewCopy[firstViewCopyLength - counter] = value + 10;\n                break;\n            default:\n                b = 0;\n                firstViewCopy[firstViewCopyLength - counter] = value;\n        }\n    }\n    if (b > 0) {\n        for(let i = firstViewCopyLength - secondViewCopyLength + 1; i >= 0; i--, counter++){\n            value = firstViewCopy[firstViewCopyLength - counter] - b;\n            if (value < 0) {\n                b = 1;\n                firstViewCopy[firstViewCopyLength - counter] = value + 10;\n            } else {\n                b = 0;\n                firstViewCopy[firstViewCopyLength - counter] = value;\n                break;\n            }\n        }\n    }\n    return firstViewCopy.slice();\n}\nclass LocalIntegerValueBlock extends HexBlock(ValueBlock) {\n    constructor({ value, ...parameters } = {}){\n        super(parameters);\n        this._valueDec = 0;\n        if (parameters.valueHex) {\n            this.setValueHex();\n        }\n        if (value !== undefined) {\n            this.valueDec = value;\n        }\n    }\n    setValueHex() {\n        if (this.valueHexView.length >= 4) {\n            this.warnings.push(\"Too big Integer for decoding, hex only\");\n            this.isHexOnly = true;\n            this._valueDec = 0;\n        } else {\n            this.isHexOnly = false;\n            if (this.valueHexView.length > 0) {\n                this._valueDec = pvutils__namespace.utilDecodeTC.call(this);\n            }\n        }\n    }\n    set valueDec(v) {\n        this._valueDec = v;\n        this.isHexOnly = false;\n        this.valueHexView = new Uint8Array(pvutils__namespace.utilEncodeTC(v));\n    }\n    get valueDec() {\n        return this._valueDec;\n    }\n    fromDER(inputBuffer, inputOffset, inputLength, expectedLength = 0) {\n        const offset = this.fromBER(inputBuffer, inputOffset, inputLength);\n        if (offset === -1) return offset;\n        const view = this.valueHexView;\n        if (view[0] === 0x00 && (view[1] & 0x80) !== 0) {\n            this.valueHexView = view.subarray(1);\n        } else {\n            if (expectedLength !== 0) {\n                if (view.length < expectedLength) {\n                    if (expectedLength - view.length > 1) expectedLength = view.length + 1;\n                    this.valueHexView = view.subarray(expectedLength - view.length);\n                }\n            }\n        }\n        return offset;\n    }\n    toDER(sizeOnly = false) {\n        const view = this.valueHexView;\n        switch(true){\n            case (view[0] & 0x80) !== 0:\n                {\n                    const updatedView = new Uint8Array(this.valueHexView.length + 1);\n                    updatedView[0] = 0x00;\n                    updatedView.set(view, 1);\n                    this.valueHexView = updatedView;\n                }\n                break;\n            case view[0] === 0x00 && (view[1] & 0x80) === 0:\n                {\n                    this.valueHexView = this.valueHexView.subarray(1);\n                }\n                break;\n        }\n        return this.toBER(sizeOnly);\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);\n        if (resultOffset === -1) {\n            return resultOffset;\n        }\n        this.setValueHex();\n        return resultOffset;\n    }\n    toBER(sizeOnly) {\n        return sizeOnly ? new ArrayBuffer(this.valueHexView.length) : this.valueHexView.slice().buffer;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            valueDec: this.valueDec\n        };\n    }\n    toString() {\n        const firstBit = this.valueHexView.length * 8 - 1;\n        let digits = new Uint8Array(this.valueHexView.length * 8 / 3);\n        let bitNumber = 0;\n        let currentByte;\n        const asn1View = this.valueHexView;\n        let result = \"\";\n        let flag = false;\n        for(let byteNumber = asn1View.byteLength - 1; byteNumber >= 0; byteNumber--){\n            currentByte = asn1View[byteNumber];\n            for(let i = 0; i < 8; i++){\n                if ((currentByte & 1) === 1) {\n                    switch(bitNumber){\n                        case firstBit:\n                            digits = viewSub(power2(bitNumber), digits);\n                            result = \"-\";\n                            break;\n                        default:\n                            digits = viewAdd(digits, power2(bitNumber));\n                    }\n                }\n                bitNumber++;\n                currentByte >>= 1;\n            }\n        }\n        for(let i = 0; i < digits.length; i++){\n            if (digits[i]) flag = true;\n            if (flag) result += digitsString.charAt(digits[i]);\n        }\n        if (flag === false) result += digitsString.charAt(0);\n        return result;\n    }\n}\n_a$p = LocalIntegerValueBlock;\nLocalIntegerValueBlock.NAME = \"IntegerValueBlock\";\n(()=>{\n    Object.defineProperty(_a$p.prototype, \"valueHex\", {\n        set: function(v) {\n            this.valueHexView = new Uint8Array(v);\n            this.setValueHex();\n        },\n        get: function() {\n            return this.valueHexView.slice().buffer;\n        }\n    });\n})();\nvar _a$o;\nclass Integer extends BaseBlock {\n    constructor(parameters = {}){\n        super(parameters, LocalIntegerValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 2;\n    }\n    toBigInt() {\n        assertBigInt();\n        return BigInt(this.valueBlock.toString());\n    }\n    static fromBigInt(value) {\n        assertBigInt();\n        const bigIntValue = BigInt(value);\n        const writer = new ViewWriter();\n        const hex = bigIntValue.toString(16).replace(/^-/, \"\");\n        const view = new Uint8Array(pvtsutils__namespace.Convert.FromHex(hex));\n        if (bigIntValue < 0) {\n            const first = new Uint8Array(view.length + (view[0] & 0x80 ? 1 : 0));\n            first[0] |= 0x80;\n            const firstInt = BigInt(`0x${pvtsutils__namespace.Convert.ToHex(first)}`);\n            const secondInt = firstInt + bigIntValue;\n            const second = pvtsutils__namespace.BufferSourceConverter.toUint8Array(pvtsutils__namespace.Convert.FromHex(secondInt.toString(16)));\n            second[0] |= 0x80;\n            writer.write(second);\n        } else {\n            if (view[0] & 0x80) {\n                writer.write(new Uint8Array([\n                    0\n                ]));\n            }\n            writer.write(view);\n        }\n        const res = new Integer({\n            valueHex: writer.final()\n        });\n        return res;\n    }\n    convertToDER() {\n        const integer = new Integer({\n            valueHex: this.valueBlock.valueHexView\n        });\n        integer.valueBlock.toDER();\n        return integer;\n    }\n    convertFromDER() {\n        return new Integer({\n            valueHex: this.valueBlock.valueHexView[0] === 0 ? this.valueBlock.valueHexView.subarray(1) : this.valueBlock.valueHexView\n        });\n    }\n    onAsciiEncoding() {\n        return `${this.constructor.NAME} : ${this.valueBlock.toString()}`;\n    }\n}\n_a$o = Integer;\n(()=>{\n    typeStore.Integer = _a$o;\n})();\nInteger.NAME = \"INTEGER\";\nvar _a$n;\nclass Enumerated extends Integer {\n    constructor(parameters = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 10;\n    }\n}\n_a$n = Enumerated;\n(()=>{\n    typeStore.Enumerated = _a$n;\n})();\nEnumerated.NAME = \"ENUMERATED\";\nclass LocalSidValueBlock extends HexBlock(ValueBlock) {\n    constructor({ valueDec = -1, isFirstSid = false, ...parameters } = {}){\n        super(parameters);\n        this.valueDec = valueDec;\n        this.isFirstSid = isFirstSid;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        if (!inputLength) {\n            return inputOffset;\n        }\n        const inputView = pvtsutils__namespace.BufferSourceConverter.toUint8Array(inputBuffer);\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\n            return -1;\n        }\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\n        this.valueHexView = new Uint8Array(inputLength);\n        for(let i = 0; i < inputLength; i++){\n            this.valueHexView[i] = intBuffer[i] & 0x7F;\n            this.blockLength++;\n            if ((intBuffer[i] & 0x80) === 0x00) break;\n        }\n        const tempView = new Uint8Array(this.blockLength);\n        for(let i = 0; i < this.blockLength; i++){\n            tempView[i] = this.valueHexView[i];\n        }\n        this.valueHexView = tempView;\n        if ((intBuffer[this.blockLength - 1] & 0x80) !== 0x00) {\n            this.error = \"End of input reached before message was fully decoded\";\n            return -1;\n        }\n        if (this.valueHexView[0] === 0x00) this.warnings.push(\"Needlessly long format of SID encoding\");\n        if (this.blockLength <= 8) this.valueDec = pvutils__namespace.utilFromBase(this.valueHexView, 7);\n        else {\n            this.isHexOnly = true;\n            this.warnings.push(\"Too big SID for decoding, hex only\");\n        }\n        return inputOffset + this.blockLength;\n    }\n    set valueBigInt(value) {\n        assertBigInt();\n        let bits = BigInt(value).toString(2);\n        while(bits.length % 7){\n            bits = \"0\" + bits;\n        }\n        const bytes = new Uint8Array(bits.length / 7);\n        for(let i = 0; i < bytes.length; i++){\n            bytes[i] = parseInt(bits.slice(i * 7, i * 7 + 7), 2) + (i + 1 < bytes.length ? 0x80 : 0);\n        }\n        this.fromBER(bytes.buffer, 0, bytes.length);\n    }\n    toBER(sizeOnly) {\n        if (this.isHexOnly) {\n            if (sizeOnly) return new ArrayBuffer(this.valueHexView.byteLength);\n            const curView = this.valueHexView;\n            const retView = new Uint8Array(this.blockLength);\n            for(let i = 0; i < this.blockLength - 1; i++)retView[i] = curView[i] | 0x80;\n            retView[this.blockLength - 1] = curView[this.blockLength - 1];\n            return retView.buffer;\n        }\n        const encodedBuf = pvutils__namespace.utilToBase(this.valueDec, 7);\n        if (encodedBuf.byteLength === 0) {\n            this.error = \"Error during encoding SID value\";\n            return EMPTY_BUFFER;\n        }\n        const retView = new Uint8Array(encodedBuf.byteLength);\n        if (!sizeOnly) {\n            const encodedView = new Uint8Array(encodedBuf);\n            const len = encodedBuf.byteLength - 1;\n            for(let i = 0; i < len; i++)retView[i] = encodedView[i] | 0x80;\n            retView[len] = encodedView[len];\n        }\n        return retView;\n    }\n    toString() {\n        let result = \"\";\n        if (this.isHexOnly) result = pvtsutils__namespace.Convert.ToHex(this.valueHexView);\n        else {\n            if (this.isFirstSid) {\n                let sidValue = this.valueDec;\n                if (this.valueDec <= 39) result = \"0.\";\n                else {\n                    if (this.valueDec <= 79) {\n                        result = \"1.\";\n                        sidValue -= 40;\n                    } else {\n                        result = \"2.\";\n                        sidValue -= 80;\n                    }\n                }\n                result += sidValue.toString();\n            } else result = this.valueDec.toString();\n        }\n        return result;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            valueDec: this.valueDec,\n            isFirstSid: this.isFirstSid\n        };\n    }\n}\nLocalSidValueBlock.NAME = \"sidBlock\";\nclass LocalObjectIdentifierValueBlock extends ValueBlock {\n    constructor({ value = EMPTY_STRING, ...parameters } = {}){\n        super(parameters);\n        this.value = [];\n        if (value) {\n            this.fromString(value);\n        }\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        let resultOffset = inputOffset;\n        while(inputLength > 0){\n            const sidBlock = new LocalSidValueBlock();\n            resultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);\n            if (resultOffset === -1) {\n                this.blockLength = 0;\n                this.error = sidBlock.error;\n                return resultOffset;\n            }\n            if (this.value.length === 0) sidBlock.isFirstSid = true;\n            this.blockLength += sidBlock.blockLength;\n            inputLength -= sidBlock.blockLength;\n            this.value.push(sidBlock);\n        }\n        return resultOffset;\n    }\n    toBER(sizeOnly) {\n        const retBuffers = [];\n        for(let i = 0; i < this.value.length; i++){\n            const valueBuf = this.value[i].toBER(sizeOnly);\n            if (valueBuf.byteLength === 0) {\n                this.error = this.value[i].error;\n                return EMPTY_BUFFER;\n            }\n            retBuffers.push(valueBuf);\n        }\n        return concat(retBuffers);\n    }\n    fromString(string) {\n        this.value = [];\n        let pos1 = 0;\n        let pos2 = 0;\n        let sid = \"\";\n        let flag = false;\n        do {\n            pos2 = string.indexOf(\".\", pos1);\n            if (pos2 === -1) sid = string.substring(pos1);\n            else sid = string.substring(pos1, pos2);\n            pos1 = pos2 + 1;\n            if (flag) {\n                const sidBlock = this.value[0];\n                let plus = 0;\n                switch(sidBlock.valueDec){\n                    case 0:\n                        break;\n                    case 1:\n                        plus = 40;\n                        break;\n                    case 2:\n                        plus = 80;\n                        break;\n                    default:\n                        this.value = [];\n                        return;\n                }\n                const parsedSID = parseInt(sid, 10);\n                if (isNaN(parsedSID)) return;\n                sidBlock.valueDec = parsedSID + plus;\n                flag = false;\n            } else {\n                const sidBlock = new LocalSidValueBlock();\n                if (sid > Number.MAX_SAFE_INTEGER) {\n                    assertBigInt();\n                    const sidValue = BigInt(sid);\n                    sidBlock.valueBigInt = sidValue;\n                } else {\n                    sidBlock.valueDec = parseInt(sid, 10);\n                    if (isNaN(sidBlock.valueDec)) return;\n                }\n                if (!this.value.length) {\n                    sidBlock.isFirstSid = true;\n                    flag = true;\n                }\n                this.value.push(sidBlock);\n            }\n        }while (pos2 !== -1);\n    }\n    toString() {\n        let result = \"\";\n        let isHexOnly = false;\n        for(let i = 0; i < this.value.length; i++){\n            isHexOnly = this.value[i].isHexOnly;\n            let sidStr = this.value[i].toString();\n            if (i !== 0) result = `${result}.`;\n            if (isHexOnly) {\n                sidStr = `{${sidStr}}`;\n                if (this.value[i].isFirstSid) result = `2.{${sidStr} - 80}`;\n                else result += sidStr;\n            } else result += sidStr;\n        }\n        return result;\n    }\n    toJSON() {\n        const object = {\n            ...super.toJSON(),\n            value: this.toString(),\n            sidArray: []\n        };\n        for(let i = 0; i < this.value.length; i++){\n            object.sidArray.push(this.value[i].toJSON());\n        }\n        return object;\n    }\n}\nLocalObjectIdentifierValueBlock.NAME = \"ObjectIdentifierValueBlock\";\nvar _a$m;\nclass ObjectIdentifier extends BaseBlock {\n    constructor(parameters = {}){\n        super(parameters, LocalObjectIdentifierValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 6;\n    }\n    getValue() {\n        return this.valueBlock.toString();\n    }\n    setValue(value) {\n        this.valueBlock.fromString(value);\n    }\n    onAsciiEncoding() {\n        return `${this.constructor.NAME} : ${this.valueBlock.toString() || \"empty\"}`;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            value: this.getValue()\n        };\n    }\n}\n_a$m = ObjectIdentifier;\n(()=>{\n    typeStore.ObjectIdentifier = _a$m;\n})();\nObjectIdentifier.NAME = \"OBJECT IDENTIFIER\";\nclass LocalRelativeSidValueBlock extends HexBlock(LocalBaseBlock) {\n    constructor({ valueDec = 0, ...parameters } = {}){\n        super(parameters);\n        this.valueDec = valueDec;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        if (inputLength === 0) return inputOffset;\n        const inputView = pvtsutils__namespace.BufferSourceConverter.toUint8Array(inputBuffer);\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) return -1;\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\n        this.valueHexView = new Uint8Array(inputLength);\n        for(let i = 0; i < inputLength; i++){\n            this.valueHexView[i] = intBuffer[i] & 0x7F;\n            this.blockLength++;\n            if ((intBuffer[i] & 0x80) === 0x00) break;\n        }\n        const tempView = new Uint8Array(this.blockLength);\n        for(let i = 0; i < this.blockLength; i++)tempView[i] = this.valueHexView[i];\n        this.valueHexView = tempView;\n        if ((intBuffer[this.blockLength - 1] & 0x80) !== 0x00) {\n            this.error = \"End of input reached before message was fully decoded\";\n            return -1;\n        }\n        if (this.valueHexView[0] === 0x00) this.warnings.push(\"Needlessly long format of SID encoding\");\n        if (this.blockLength <= 8) this.valueDec = pvutils__namespace.utilFromBase(this.valueHexView, 7);\n        else {\n            this.isHexOnly = true;\n            this.warnings.push(\"Too big SID for decoding, hex only\");\n        }\n        return inputOffset + this.blockLength;\n    }\n    toBER(sizeOnly) {\n        if (this.isHexOnly) {\n            if (sizeOnly) return new ArrayBuffer(this.valueHexView.byteLength);\n            const curView = this.valueHexView;\n            const retView = new Uint8Array(this.blockLength);\n            for(let i = 0; i < this.blockLength - 1; i++)retView[i] = curView[i] | 0x80;\n            retView[this.blockLength - 1] = curView[this.blockLength - 1];\n            return retView.buffer;\n        }\n        const encodedBuf = pvutils__namespace.utilToBase(this.valueDec, 7);\n        if (encodedBuf.byteLength === 0) {\n            this.error = \"Error during encoding SID value\";\n            return EMPTY_BUFFER;\n        }\n        const retView = new Uint8Array(encodedBuf.byteLength);\n        if (!sizeOnly) {\n            const encodedView = new Uint8Array(encodedBuf);\n            const len = encodedBuf.byteLength - 1;\n            for(let i = 0; i < len; i++)retView[i] = encodedView[i] | 0x80;\n            retView[len] = encodedView[len];\n        }\n        return retView.buffer;\n    }\n    toString() {\n        let result = \"\";\n        if (this.isHexOnly) result = pvtsutils__namespace.Convert.ToHex(this.valueHexView);\n        else {\n            result = this.valueDec.toString();\n        }\n        return result;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            valueDec: this.valueDec\n        };\n    }\n}\nLocalRelativeSidValueBlock.NAME = \"relativeSidBlock\";\nclass LocalRelativeObjectIdentifierValueBlock extends ValueBlock {\n    constructor({ value = EMPTY_STRING, ...parameters } = {}){\n        super(parameters);\n        this.value = [];\n        if (value) {\n            this.fromString(value);\n        }\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        let resultOffset = inputOffset;\n        while(inputLength > 0){\n            const sidBlock = new LocalRelativeSidValueBlock();\n            resultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);\n            if (resultOffset === -1) {\n                this.blockLength = 0;\n                this.error = sidBlock.error;\n                return resultOffset;\n            }\n            this.blockLength += sidBlock.blockLength;\n            inputLength -= sidBlock.blockLength;\n            this.value.push(sidBlock);\n        }\n        return resultOffset;\n    }\n    toBER(sizeOnly, writer) {\n        const retBuffers = [];\n        for(let i = 0; i < this.value.length; i++){\n            const valueBuf = this.value[i].toBER(sizeOnly);\n            if (valueBuf.byteLength === 0) {\n                this.error = this.value[i].error;\n                return EMPTY_BUFFER;\n            }\n            retBuffers.push(valueBuf);\n        }\n        return concat(retBuffers);\n    }\n    fromString(string) {\n        this.value = [];\n        let pos1 = 0;\n        let pos2 = 0;\n        let sid = \"\";\n        do {\n            pos2 = string.indexOf(\".\", pos1);\n            if (pos2 === -1) sid = string.substring(pos1);\n            else sid = string.substring(pos1, pos2);\n            pos1 = pos2 + 1;\n            const sidBlock = new LocalRelativeSidValueBlock();\n            sidBlock.valueDec = parseInt(sid, 10);\n            if (isNaN(sidBlock.valueDec)) return true;\n            this.value.push(sidBlock);\n        }while (pos2 !== -1);\n        return true;\n    }\n    toString() {\n        let result = \"\";\n        let isHexOnly = false;\n        for(let i = 0; i < this.value.length; i++){\n            isHexOnly = this.value[i].isHexOnly;\n            let sidStr = this.value[i].toString();\n            if (i !== 0) result = `${result}.`;\n            if (isHexOnly) {\n                sidStr = `{${sidStr}}`;\n                result += sidStr;\n            } else result += sidStr;\n        }\n        return result;\n    }\n    toJSON() {\n        const object = {\n            ...super.toJSON(),\n            value: this.toString(),\n            sidArray: []\n        };\n        for(let i = 0; i < this.value.length; i++)object.sidArray.push(this.value[i].toJSON());\n        return object;\n    }\n}\nLocalRelativeObjectIdentifierValueBlock.NAME = \"RelativeObjectIdentifierValueBlock\";\nvar _a$l;\nclass RelativeObjectIdentifier extends BaseBlock {\n    constructor(parameters = {}){\n        super(parameters, LocalRelativeObjectIdentifierValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 13;\n    }\n    getValue() {\n        return this.valueBlock.toString();\n    }\n    setValue(value) {\n        this.valueBlock.fromString(value);\n    }\n    onAsciiEncoding() {\n        return `${this.constructor.NAME} : ${this.valueBlock.toString() || \"empty\"}`;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            value: this.getValue()\n        };\n    }\n}\n_a$l = RelativeObjectIdentifier;\n(()=>{\n    typeStore.RelativeObjectIdentifier = _a$l;\n})();\nRelativeObjectIdentifier.NAME = \"RelativeObjectIdentifier\";\nvar _a$k;\nclass Sequence extends Constructed {\n    constructor(parameters = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 16;\n    }\n}\n_a$k = Sequence;\n(()=>{\n    typeStore.Sequence = _a$k;\n})();\nSequence.NAME = \"SEQUENCE\";\nvar _a$j;\nclass Set extends Constructed {\n    constructor(parameters = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 17;\n    }\n}\n_a$j = Set;\n(()=>{\n    typeStore.Set = _a$j;\n})();\nSet.NAME = \"SET\";\nclass LocalStringValueBlock extends HexBlock(ValueBlock) {\n    constructor({ ...parameters } = {}){\n        super(parameters);\n        this.isHexOnly = true;\n        this.value = EMPTY_STRING;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            value: this.value\n        };\n    }\n}\nLocalStringValueBlock.NAME = \"StringValueBlock\";\nclass LocalSimpleStringValueBlock extends LocalStringValueBlock {\n}\nLocalSimpleStringValueBlock.NAME = \"SimpleStringValueBlock\";\nclass LocalSimpleStringBlock extends BaseStringBlock {\n    constructor({ ...parameters } = {}){\n        super(parameters, LocalSimpleStringValueBlock);\n    }\n    fromBuffer(inputBuffer) {\n        this.valueBlock.value = String.fromCharCode.apply(null, pvtsutils__namespace.BufferSourceConverter.toUint8Array(inputBuffer));\n    }\n    fromString(inputString) {\n        const strLen = inputString.length;\n        const view = this.valueBlock.valueHexView = new Uint8Array(strLen);\n        for(let i = 0; i < strLen; i++)view[i] = inputString.charCodeAt(i);\n        this.valueBlock.value = inputString;\n    }\n}\nLocalSimpleStringBlock.NAME = \"SIMPLE STRING\";\nclass LocalUtf8StringValueBlock extends LocalSimpleStringBlock {\n    fromBuffer(inputBuffer) {\n        this.valueBlock.valueHexView = pvtsutils__namespace.BufferSourceConverter.toUint8Array(inputBuffer);\n        try {\n            this.valueBlock.value = pvtsutils__namespace.Convert.ToUtf8String(inputBuffer);\n        } catch (ex) {\n            this.warnings.push(`Error during \"decodeURIComponent\": ${ex}, using raw string`);\n            this.valueBlock.value = pvtsutils__namespace.Convert.ToBinary(inputBuffer);\n        }\n    }\n    fromString(inputString) {\n        this.valueBlock.valueHexView = new Uint8Array(pvtsutils__namespace.Convert.FromUtf8String(inputString));\n        this.valueBlock.value = inputString;\n    }\n}\nLocalUtf8StringValueBlock.NAME = \"Utf8StringValueBlock\";\nvar _a$i;\nclass Utf8String extends LocalUtf8StringValueBlock {\n    constructor(parameters = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 12;\n    }\n}\n_a$i = Utf8String;\n(()=>{\n    typeStore.Utf8String = _a$i;\n})();\nUtf8String.NAME = \"UTF8String\";\nclass LocalBmpStringValueBlock extends LocalSimpleStringBlock {\n    fromBuffer(inputBuffer) {\n        this.valueBlock.value = pvtsutils__namespace.Convert.ToUtf16String(inputBuffer);\n        this.valueBlock.valueHexView = pvtsutils__namespace.BufferSourceConverter.toUint8Array(inputBuffer);\n    }\n    fromString(inputString) {\n        this.valueBlock.value = inputString;\n        this.valueBlock.valueHexView = new Uint8Array(pvtsutils__namespace.Convert.FromUtf16String(inputString));\n    }\n}\nLocalBmpStringValueBlock.NAME = \"BmpStringValueBlock\";\nvar _a$h;\nclass BmpString extends LocalBmpStringValueBlock {\n    constructor({ ...parameters } = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 30;\n    }\n}\n_a$h = BmpString;\n(()=>{\n    typeStore.BmpString = _a$h;\n})();\nBmpString.NAME = \"BMPString\";\nclass LocalUniversalStringValueBlock extends LocalSimpleStringBlock {\n    fromBuffer(inputBuffer) {\n        const copyBuffer = ArrayBuffer.isView(inputBuffer) ? inputBuffer.slice().buffer : inputBuffer.slice(0);\n        const valueView = new Uint8Array(copyBuffer);\n        for(let i = 0; i < valueView.length; i += 4){\n            valueView[i] = valueView[i + 3];\n            valueView[i + 1] = valueView[i + 2];\n            valueView[i + 2] = 0x00;\n            valueView[i + 3] = 0x00;\n        }\n        this.valueBlock.value = String.fromCharCode.apply(null, new Uint32Array(copyBuffer));\n    }\n    fromString(inputString) {\n        const strLength = inputString.length;\n        const valueHexView = this.valueBlock.valueHexView = new Uint8Array(strLength * 4);\n        for(let i = 0; i < strLength; i++){\n            const codeBuf = pvutils__namespace.utilToBase(inputString.charCodeAt(i), 8);\n            const codeView = new Uint8Array(codeBuf);\n            if (codeView.length > 4) continue;\n            const dif = 4 - codeView.length;\n            for(let j = codeView.length - 1; j >= 0; j--)valueHexView[i * 4 + j + dif] = codeView[j];\n        }\n        this.valueBlock.value = inputString;\n    }\n}\nLocalUniversalStringValueBlock.NAME = \"UniversalStringValueBlock\";\nvar _a$g;\nclass UniversalString extends LocalUniversalStringValueBlock {\n    constructor({ ...parameters } = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 28;\n    }\n}\n_a$g = UniversalString;\n(()=>{\n    typeStore.UniversalString = _a$g;\n})();\nUniversalString.NAME = \"UniversalString\";\nvar _a$f;\nclass NumericString extends LocalSimpleStringBlock {\n    constructor(parameters = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 18;\n    }\n}\n_a$f = NumericString;\n(()=>{\n    typeStore.NumericString = _a$f;\n})();\nNumericString.NAME = \"NumericString\";\nvar _a$e;\nclass PrintableString extends LocalSimpleStringBlock {\n    constructor(parameters = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 19;\n    }\n}\n_a$e = PrintableString;\n(()=>{\n    typeStore.PrintableString = _a$e;\n})();\nPrintableString.NAME = \"PrintableString\";\nvar _a$d;\nclass TeletexString extends LocalSimpleStringBlock {\n    constructor(parameters = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 20;\n    }\n}\n_a$d = TeletexString;\n(()=>{\n    typeStore.TeletexString = _a$d;\n})();\nTeletexString.NAME = \"TeletexString\";\nvar _a$c;\nclass VideotexString extends LocalSimpleStringBlock {\n    constructor(parameters = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 21;\n    }\n}\n_a$c = VideotexString;\n(()=>{\n    typeStore.VideotexString = _a$c;\n})();\nVideotexString.NAME = \"VideotexString\";\nvar _a$b;\nclass IA5String extends LocalSimpleStringBlock {\n    constructor(parameters = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 22;\n    }\n}\n_a$b = IA5String;\n(()=>{\n    typeStore.IA5String = _a$b;\n})();\nIA5String.NAME = \"IA5String\";\nvar _a$a;\nclass GraphicString extends LocalSimpleStringBlock {\n    constructor(parameters = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 25;\n    }\n}\n_a$a = GraphicString;\n(()=>{\n    typeStore.GraphicString = _a$a;\n})();\nGraphicString.NAME = \"GraphicString\";\nvar _a$9;\nclass VisibleString extends LocalSimpleStringBlock {\n    constructor(parameters = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 26;\n    }\n}\n_a$9 = VisibleString;\n(()=>{\n    typeStore.VisibleString = _a$9;\n})();\nVisibleString.NAME = \"VisibleString\";\nvar _a$8;\nclass GeneralString extends LocalSimpleStringBlock {\n    constructor(parameters = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 27;\n    }\n}\n_a$8 = GeneralString;\n(()=>{\n    typeStore.GeneralString = _a$8;\n})();\nGeneralString.NAME = \"GeneralString\";\nvar _a$7;\nclass CharacterString extends LocalSimpleStringBlock {\n    constructor(parameters = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 29;\n    }\n}\n_a$7 = CharacterString;\n(()=>{\n    typeStore.CharacterString = _a$7;\n})();\nCharacterString.NAME = \"CharacterString\";\nvar _a$6;\nclass UTCTime extends VisibleString {\n    constructor({ value, valueDate, ...parameters } = {}){\n        super(parameters);\n        this.year = 0;\n        this.month = 0;\n        this.day = 0;\n        this.hour = 0;\n        this.minute = 0;\n        this.second = 0;\n        if (value) {\n            this.fromString(value);\n            this.valueBlock.valueHexView = new Uint8Array(value.length);\n            for(let i = 0; i < value.length; i++)this.valueBlock.valueHexView[i] = value.charCodeAt(i);\n        }\n        if (valueDate) {\n            this.fromDate(valueDate);\n            this.valueBlock.valueHexView = new Uint8Array(this.toBuffer());\n        }\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 23;\n    }\n    fromBuffer(inputBuffer) {\n        this.fromString(String.fromCharCode.apply(null, pvtsutils__namespace.BufferSourceConverter.toUint8Array(inputBuffer)));\n    }\n    toBuffer() {\n        const str = this.toString();\n        const buffer = new ArrayBuffer(str.length);\n        const view = new Uint8Array(buffer);\n        for(let i = 0; i < str.length; i++)view[i] = str.charCodeAt(i);\n        return buffer;\n    }\n    fromDate(inputDate) {\n        this.year = inputDate.getUTCFullYear();\n        this.month = inputDate.getUTCMonth() + 1;\n        this.day = inputDate.getUTCDate();\n        this.hour = inputDate.getUTCHours();\n        this.minute = inputDate.getUTCMinutes();\n        this.second = inputDate.getUTCSeconds();\n    }\n    toDate() {\n        return new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second));\n    }\n    fromString(inputString) {\n        const parser = /(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})Z/ig;\n        const parserArray = parser.exec(inputString);\n        if (parserArray === null) {\n            this.error = \"Wrong input string for conversion\";\n            return;\n        }\n        const year = parseInt(parserArray[1], 10);\n        if (year >= 50) this.year = 1900 + year;\n        else this.year = 2000 + year;\n        this.month = parseInt(parserArray[2], 10);\n        this.day = parseInt(parserArray[3], 10);\n        this.hour = parseInt(parserArray[4], 10);\n        this.minute = parseInt(parserArray[5], 10);\n        this.second = parseInt(parserArray[6], 10);\n    }\n    toString(encoding = \"iso\") {\n        if (encoding === \"iso\") {\n            const outputArray = new Array(7);\n            outputArray[0] = pvutils__namespace.padNumber(this.year < 2000 ? this.year - 1900 : this.year - 2000, 2);\n            outputArray[1] = pvutils__namespace.padNumber(this.month, 2);\n            outputArray[2] = pvutils__namespace.padNumber(this.day, 2);\n            outputArray[3] = pvutils__namespace.padNumber(this.hour, 2);\n            outputArray[4] = pvutils__namespace.padNumber(this.minute, 2);\n            outputArray[5] = pvutils__namespace.padNumber(this.second, 2);\n            outputArray[6] = \"Z\";\n            return outputArray.join(\"\");\n        }\n        return super.toString(encoding);\n    }\n    onAsciiEncoding() {\n        return `${this.constructor.NAME} : ${this.toDate().toISOString()}`;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            year: this.year,\n            month: this.month,\n            day: this.day,\n            hour: this.hour,\n            minute: this.minute,\n            second: this.second\n        };\n    }\n}\n_a$6 = UTCTime;\n(()=>{\n    typeStore.UTCTime = _a$6;\n})();\nUTCTime.NAME = \"UTCTime\";\nvar _a$5;\nclass GeneralizedTime extends UTCTime {\n    constructor(parameters = {}){\n        var _b;\n        super(parameters);\n        (_b = this.millisecond) !== null && _b !== void 0 ? _b : this.millisecond = 0;\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 24;\n    }\n    fromDate(inputDate) {\n        super.fromDate(inputDate);\n        this.millisecond = inputDate.getUTCMilliseconds();\n    }\n    toDate() {\n        return new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond));\n    }\n    fromString(inputString) {\n        let isUTC = false;\n        let timeString = \"\";\n        let dateTimeString = \"\";\n        let fractionPart = 0;\n        let parser;\n        let hourDifference = 0;\n        let minuteDifference = 0;\n        if (inputString[inputString.length - 1] === \"Z\") {\n            timeString = inputString.substring(0, inputString.length - 1);\n            isUTC = true;\n        } else {\n            const number = new Number(inputString[inputString.length - 1]);\n            if (isNaN(number.valueOf())) throw new Error(\"Wrong input string for conversion\");\n            timeString = inputString;\n        }\n        if (isUTC) {\n            if (timeString.indexOf(\"+\") !== -1) throw new Error(\"Wrong input string for conversion\");\n            if (timeString.indexOf(\"-\") !== -1) throw new Error(\"Wrong input string for conversion\");\n        } else {\n            let multiplier = 1;\n            let differencePosition = timeString.indexOf(\"+\");\n            let differenceString = \"\";\n            if (differencePosition === -1) {\n                differencePosition = timeString.indexOf(\"-\");\n                multiplier = -1;\n            }\n            if (differencePosition !== -1) {\n                differenceString = timeString.substring(differencePosition + 1);\n                timeString = timeString.substring(0, differencePosition);\n                if (differenceString.length !== 2 && differenceString.length !== 4) throw new Error(\"Wrong input string for conversion\");\n                let number = parseInt(differenceString.substring(0, 2), 10);\n                if (isNaN(number.valueOf())) throw new Error(\"Wrong input string for conversion\");\n                hourDifference = multiplier * number;\n                if (differenceString.length === 4) {\n                    number = parseInt(differenceString.substring(2, 4), 10);\n                    if (isNaN(number.valueOf())) throw new Error(\"Wrong input string for conversion\");\n                    minuteDifference = multiplier * number;\n                }\n            }\n        }\n        let fractionPointPosition = timeString.indexOf(\".\");\n        if (fractionPointPosition === -1) fractionPointPosition = timeString.indexOf(\",\");\n        if (fractionPointPosition !== -1) {\n            const fractionPartCheck = new Number(`0${timeString.substring(fractionPointPosition)}`);\n            if (isNaN(fractionPartCheck.valueOf())) throw new Error(\"Wrong input string for conversion\");\n            fractionPart = fractionPartCheck.valueOf();\n            dateTimeString = timeString.substring(0, fractionPointPosition);\n        } else dateTimeString = timeString;\n        switch(true){\n            case dateTimeString.length === 8:\n                parser = /(\\d{4})(\\d{2})(\\d{2})/ig;\n                if (fractionPointPosition !== -1) throw new Error(\"Wrong input string for conversion\");\n                break;\n            case dateTimeString.length === 10:\n                parser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})/ig;\n                if (fractionPointPosition !== -1) {\n                    let fractionResult = 60 * fractionPart;\n                    this.minute = Math.floor(fractionResult);\n                    fractionResult = 60 * (fractionResult - this.minute);\n                    this.second = Math.floor(fractionResult);\n                    fractionResult = 1000 * (fractionResult - this.second);\n                    this.millisecond = Math.floor(fractionResult);\n                }\n                break;\n            case dateTimeString.length === 12:\n                parser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\n                if (fractionPointPosition !== -1) {\n                    let fractionResult = 60 * fractionPart;\n                    this.second = Math.floor(fractionResult);\n                    fractionResult = 1000 * (fractionResult - this.second);\n                    this.millisecond = Math.floor(fractionResult);\n                }\n                break;\n            case dateTimeString.length === 14:\n                parser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\n                if (fractionPointPosition !== -1) {\n                    const fractionResult = 1000 * fractionPart;\n                    this.millisecond = Math.floor(fractionResult);\n                }\n                break;\n            default:\n                throw new Error(\"Wrong input string for conversion\");\n        }\n        const parserArray = parser.exec(dateTimeString);\n        if (parserArray === null) throw new Error(\"Wrong input string for conversion\");\n        for(let j = 1; j < parserArray.length; j++){\n            switch(j){\n                case 1:\n                    this.year = parseInt(parserArray[j], 10);\n                    break;\n                case 2:\n                    this.month = parseInt(parserArray[j], 10);\n                    break;\n                case 3:\n                    this.day = parseInt(parserArray[j], 10);\n                    break;\n                case 4:\n                    this.hour = parseInt(parserArray[j], 10) + hourDifference;\n                    break;\n                case 5:\n                    this.minute = parseInt(parserArray[j], 10) + minuteDifference;\n                    break;\n                case 6:\n                    this.second = parseInt(parserArray[j], 10);\n                    break;\n                default:\n                    throw new Error(\"Wrong input string for conversion\");\n            }\n        }\n        if (isUTC === false) {\n            const tempDate = new Date(this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n            this.year = tempDate.getUTCFullYear();\n            this.month = tempDate.getUTCMonth();\n            this.day = tempDate.getUTCDay();\n            this.hour = tempDate.getUTCHours();\n            this.minute = tempDate.getUTCMinutes();\n            this.second = tempDate.getUTCSeconds();\n            this.millisecond = tempDate.getUTCMilliseconds();\n        }\n    }\n    toString(encoding = \"iso\") {\n        if (encoding === \"iso\") {\n            const outputArray = [];\n            outputArray.push(pvutils__namespace.padNumber(this.year, 4));\n            outputArray.push(pvutils__namespace.padNumber(this.month, 2));\n            outputArray.push(pvutils__namespace.padNumber(this.day, 2));\n            outputArray.push(pvutils__namespace.padNumber(this.hour, 2));\n            outputArray.push(pvutils__namespace.padNumber(this.minute, 2));\n            outputArray.push(pvutils__namespace.padNumber(this.second, 2));\n            if (this.millisecond !== 0) {\n                outputArray.push(\".\");\n                outputArray.push(pvutils__namespace.padNumber(this.millisecond, 3));\n            }\n            outputArray.push(\"Z\");\n            return outputArray.join(\"\");\n        }\n        return super.toString(encoding);\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            millisecond: this.millisecond\n        };\n    }\n}\n_a$5 = GeneralizedTime;\n(()=>{\n    typeStore.GeneralizedTime = _a$5;\n})();\nGeneralizedTime.NAME = \"GeneralizedTime\";\nvar _a$4;\nclass DATE extends Utf8String {\n    constructor(parameters = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 31;\n    }\n}\n_a$4 = DATE;\n(()=>{\n    typeStore.DATE = _a$4;\n})();\nDATE.NAME = \"DATE\";\nvar _a$3;\nclass TimeOfDay extends Utf8String {\n    constructor(parameters = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 32;\n    }\n}\n_a$3 = TimeOfDay;\n(()=>{\n    typeStore.TimeOfDay = _a$3;\n})();\nTimeOfDay.NAME = \"TimeOfDay\";\nvar _a$2;\nclass DateTime extends Utf8String {\n    constructor(parameters = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 33;\n    }\n}\n_a$2 = DateTime;\n(()=>{\n    typeStore.DateTime = _a$2;\n})();\nDateTime.NAME = \"DateTime\";\nvar _a$1;\nclass Duration extends Utf8String {\n    constructor(parameters = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 34;\n    }\n}\n_a$1 = Duration;\n(()=>{\n    typeStore.Duration = _a$1;\n})();\nDuration.NAME = \"Duration\";\nvar _a;\nclass TIME extends Utf8String {\n    constructor(parameters = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 14;\n    }\n}\n_a = TIME;\n(()=>{\n    typeStore.TIME = _a;\n})();\nTIME.NAME = \"TIME\";\nclass Any {\n    constructor({ name = EMPTY_STRING, optional = false } = {}){\n        this.name = name;\n        this.optional = optional;\n    }\n}\nclass Choice extends Any {\n    constructor({ value = [], ...parameters } = {}){\n        super(parameters);\n        this.value = value;\n    }\n}\nclass Repeated extends Any {\n    constructor({ value = new Any(), local = false, ...parameters } = {}){\n        super(parameters);\n        this.value = value;\n        this.local = local;\n    }\n}\nclass RawData {\n    constructor({ data = EMPTY_VIEW } = {}){\n        this.dataView = pvtsutils__namespace.BufferSourceConverter.toUint8Array(data);\n    }\n    get data() {\n        return this.dataView.slice().buffer;\n    }\n    set data(value) {\n        this.dataView = pvtsutils__namespace.BufferSourceConverter.toUint8Array(value);\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const endLength = inputOffset + inputLength;\n        this.dataView = pvtsutils__namespace.BufferSourceConverter.toUint8Array(inputBuffer).subarray(inputOffset, endLength);\n        return endLength;\n    }\n    toBER(sizeOnly) {\n        return this.dataView.slice().buffer;\n    }\n}\nfunction compareSchema(root, inputData, inputSchema) {\n    if (inputSchema instanceof Choice) {\n        for(let j = 0; j < inputSchema.value.length; j++){\n            const result = compareSchema(root, inputData, inputSchema.value[j]);\n            if (result.verified) {\n                return {\n                    verified: true,\n                    result: root\n                };\n            }\n        }\n        {\n            const _result = {\n                verified: false,\n                result: {\n                    error: \"Wrong values for Choice type\"\n                }\n            };\n            if (inputSchema.hasOwnProperty(NAME)) _result.name = inputSchema.name;\n            return _result;\n        }\n    }\n    if (inputSchema instanceof Any) {\n        if (inputSchema.hasOwnProperty(NAME)) root[inputSchema.name] = inputData;\n        return {\n            verified: true,\n            result: root\n        };\n    }\n    if (root instanceof Object === false) {\n        return {\n            verified: false,\n            result: {\n                error: \"Wrong root object\"\n            }\n        };\n    }\n    if (inputData instanceof Object === false) {\n        return {\n            verified: false,\n            result: {\n                error: \"Wrong ASN.1 data\"\n            }\n        };\n    }\n    if (inputSchema instanceof Object === false) {\n        return {\n            verified: false,\n            result: {\n                error: \"Wrong ASN.1 schema\"\n            }\n        };\n    }\n    if (ID_BLOCK in inputSchema === false) {\n        return {\n            verified: false,\n            result: {\n                error: \"Wrong ASN.1 schema\"\n            }\n        };\n    }\n    if (FROM_BER in inputSchema.idBlock === false) {\n        return {\n            verified: false,\n            result: {\n                error: \"Wrong ASN.1 schema\"\n            }\n        };\n    }\n    if (TO_BER in inputSchema.idBlock === false) {\n        return {\n            verified: false,\n            result: {\n                error: \"Wrong ASN.1 schema\"\n            }\n        };\n    }\n    const encodedId = inputSchema.idBlock.toBER(false);\n    if (encodedId.byteLength === 0) {\n        return {\n            verified: false,\n            result: {\n                error: \"Error encoding idBlock for ASN.1 schema\"\n            }\n        };\n    }\n    const decodedOffset = inputSchema.idBlock.fromBER(encodedId, 0, encodedId.byteLength);\n    if (decodedOffset === -1) {\n        return {\n            verified: false,\n            result: {\n                error: \"Error decoding idBlock for ASN.1 schema\"\n            }\n        };\n    }\n    if (inputSchema.idBlock.hasOwnProperty(TAG_CLASS) === false) {\n        return {\n            verified: false,\n            result: {\n                error: \"Wrong ASN.1 schema\"\n            }\n        };\n    }\n    if (inputSchema.idBlock.tagClass !== inputData.idBlock.tagClass) {\n        return {\n            verified: false,\n            result: root\n        };\n    }\n    if (inputSchema.idBlock.hasOwnProperty(TAG_NUMBER) === false) {\n        return {\n            verified: false,\n            result: {\n                error: \"Wrong ASN.1 schema\"\n            }\n        };\n    }\n    if (inputSchema.idBlock.tagNumber !== inputData.idBlock.tagNumber) {\n        return {\n            verified: false,\n            result: root\n        };\n    }\n    if (inputSchema.idBlock.hasOwnProperty(IS_CONSTRUCTED) === false) {\n        return {\n            verified: false,\n            result: {\n                error: \"Wrong ASN.1 schema\"\n            }\n        };\n    }\n    if (inputSchema.idBlock.isConstructed !== inputData.idBlock.isConstructed) {\n        return {\n            verified: false,\n            result: root\n        };\n    }\n    if (!(IS_HEX_ONLY in inputSchema.idBlock)) {\n        return {\n            verified: false,\n            result: {\n                error: \"Wrong ASN.1 schema\"\n            }\n        };\n    }\n    if (inputSchema.idBlock.isHexOnly !== inputData.idBlock.isHexOnly) {\n        return {\n            verified: false,\n            result: root\n        };\n    }\n    if (inputSchema.idBlock.isHexOnly) {\n        if (VALUE_HEX_VIEW in inputSchema.idBlock === false) {\n            return {\n                verified: false,\n                result: {\n                    error: \"Wrong ASN.1 schema\"\n                }\n            };\n        }\n        const schemaView = inputSchema.idBlock.valueHexView;\n        const asn1View = inputData.idBlock.valueHexView;\n        if (schemaView.length !== asn1View.length) {\n            return {\n                verified: false,\n                result: root\n            };\n        }\n        for(let i = 0; i < schemaView.length; i++){\n            if (schemaView[i] !== asn1View[1]) {\n                return {\n                    verified: false,\n                    result: root\n                };\n            }\n        }\n    }\n    if (inputSchema.name) {\n        inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n        if (inputSchema.name) root[inputSchema.name] = inputData;\n    }\n    if (inputSchema instanceof typeStore.Constructed) {\n        let admission = 0;\n        let result = {\n            verified: false,\n            result: {\n                error: \"Unknown error\"\n            }\n        };\n        let maxLength = inputSchema.valueBlock.value.length;\n        if (maxLength > 0) {\n            if (inputSchema.valueBlock.value[0] instanceof Repeated) {\n                maxLength = inputData.valueBlock.value.length;\n            }\n        }\n        if (maxLength === 0) {\n            return {\n                verified: true,\n                result: root\n            };\n        }\n        if (inputData.valueBlock.value.length === 0 && inputSchema.valueBlock.value.length !== 0) {\n            let _optional = true;\n            for(let i = 0; i < inputSchema.valueBlock.value.length; i++)_optional = _optional && (inputSchema.valueBlock.value[i].optional || false);\n            if (_optional) {\n                return {\n                    verified: true,\n                    result: root\n                };\n            }\n            if (inputSchema.name) {\n                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n                if (inputSchema.name) delete root[inputSchema.name];\n            }\n            root.error = \"Inconsistent object length\";\n            return {\n                verified: false,\n                result: root\n            };\n        }\n        for(let i = 0; i < maxLength; i++){\n            if (i - admission >= inputData.valueBlock.value.length) {\n                if (inputSchema.valueBlock.value[i].optional === false) {\n                    const _result = {\n                        verified: false,\n                        result: root\n                    };\n                    root.error = \"Inconsistent length between ASN.1 data and schema\";\n                    if (inputSchema.name) {\n                        inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n                        if (inputSchema.name) {\n                            delete root[inputSchema.name];\n                            _result.name = inputSchema.name;\n                        }\n                    }\n                    return _result;\n                }\n            } else {\n                if (inputSchema.valueBlock.value[0] instanceof Repeated) {\n                    result = compareSchema(root, inputData.valueBlock.value[i], inputSchema.valueBlock.value[0].value);\n                    if (result.verified === false) {\n                        if (inputSchema.valueBlock.value[0].optional) admission++;\n                        else {\n                            if (inputSchema.name) {\n                                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n                                if (inputSchema.name) delete root[inputSchema.name];\n                            }\n                            return result;\n                        }\n                    }\n                    if (NAME in inputSchema.valueBlock.value[0] && inputSchema.valueBlock.value[0].name.length > 0) {\n                        let arrayRoot = {};\n                        if (LOCAL in inputSchema.valueBlock.value[0] && inputSchema.valueBlock.value[0].local) arrayRoot = inputData;\n                        else arrayRoot = root;\n                        if (typeof arrayRoot[inputSchema.valueBlock.value[0].name] === \"undefined\") arrayRoot[inputSchema.valueBlock.value[0].name] = [];\n                        arrayRoot[inputSchema.valueBlock.value[0].name].push(inputData.valueBlock.value[i]);\n                    }\n                } else {\n                    result = compareSchema(root, inputData.valueBlock.value[i - admission], inputSchema.valueBlock.value[i]);\n                    if (result.verified === false) {\n                        if (inputSchema.valueBlock.value[i].optional) admission++;\n                        else {\n                            if (inputSchema.name) {\n                                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n                                if (inputSchema.name) delete root[inputSchema.name];\n                            }\n                            return result;\n                        }\n                    }\n                }\n            }\n        }\n        if (result.verified === false) {\n            const _result = {\n                verified: false,\n                result: root\n            };\n            if (inputSchema.name) {\n                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n                if (inputSchema.name) {\n                    delete root[inputSchema.name];\n                    _result.name = inputSchema.name;\n                }\n            }\n            return _result;\n        }\n        return {\n            verified: true,\n            result: root\n        };\n    }\n    if (inputSchema.primitiveSchema && VALUE_HEX_VIEW in inputData.valueBlock) {\n        const asn1 = localFromBER(inputData.valueBlock.valueHexView);\n        if (asn1.offset === -1) {\n            const _result = {\n                verified: false,\n                result: asn1.result\n            };\n            if (inputSchema.name) {\n                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n                if (inputSchema.name) {\n                    delete root[inputSchema.name];\n                    _result.name = inputSchema.name;\n                }\n            }\n            return _result;\n        }\n        return compareSchema(root, asn1.result, inputSchema.primitiveSchema);\n    }\n    return {\n        verified: true,\n        result: root\n    };\n}\nfunction verifySchema(inputBuffer, inputSchema) {\n    if (inputSchema instanceof Object === false) {\n        return {\n            verified: false,\n            result: {\n                error: \"Wrong ASN.1 schema type\"\n            }\n        };\n    }\n    const asn1 = localFromBER(pvtsutils__namespace.BufferSourceConverter.toUint8Array(inputBuffer));\n    if (asn1.offset === -1) {\n        return {\n            verified: false,\n            result: asn1.result\n        };\n    }\n    return compareSchema(asn1.result, asn1.result, inputSchema);\n}\nexports.Any = Any;\nexports.BaseBlock = BaseBlock;\nexports.BaseStringBlock = BaseStringBlock;\nexports.BitString = BitString;\nexports.BmpString = BmpString;\nexports.Boolean = Boolean;\nexports.CharacterString = CharacterString;\nexports.Choice = Choice;\nexports.Constructed = Constructed;\nexports.DATE = DATE;\nexports.DateTime = DateTime;\nexports.Duration = Duration;\nexports.EndOfContent = EndOfContent;\nexports.Enumerated = Enumerated;\nexports.GeneralString = GeneralString;\nexports.GeneralizedTime = GeneralizedTime;\nexports.GraphicString = GraphicString;\nexports.HexBlock = HexBlock;\nexports.IA5String = IA5String;\nexports.Integer = Integer;\nexports.Null = Null;\nexports.NumericString = NumericString;\nexports.ObjectIdentifier = ObjectIdentifier;\nexports.OctetString = OctetString;\nexports.Primitive = Primitive;\nexports.PrintableString = PrintableString;\nexports.RawData = RawData;\nexports.RelativeObjectIdentifier = RelativeObjectIdentifier;\nexports.Repeated = Repeated;\nexports.Sequence = Sequence;\nexports.Set = Set;\nexports.TIME = TIME;\nexports.TeletexString = TeletexString;\nexports.TimeOfDay = TimeOfDay;\nexports.UTCTime = UTCTime;\nexports.UniversalString = UniversalString;\nexports.Utf8String = Utf8String;\nexports.ValueBlock = ValueBlock;\nexports.VideotexString = VideotexString;\nexports.ViewWriter = ViewWriter;\nexports.VisibleString = VisibleString;\nexports.compareSchema = compareSchema;\nexports.fromBER = fromBER;\nexports.verifySchema = verifySchema;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYXNuMWpzL2J1aWxkL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQWdDQyxHQUVEO0FBRUFBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBRTdELElBQUlDLFlBQVlDLG1CQUFPQSxDQUFDO0FBQ3hCLElBQUlDLFVBQVVELG1CQUFPQSxDQUFDO0FBRXRCLFNBQVNFLGtCQUFrQkMsQ0FBQztJQUMxQixJQUFJQSxLQUFLQSxFQUFFQyxVQUFVLEVBQUUsT0FBT0Q7SUFDOUIsSUFBSUUsSUFBSVYsT0FBT1csTUFBTSxDQUFDO0lBQ3RCLElBQUlILEdBQUc7UUFDTFIsT0FBT1ksSUFBSSxDQUFDSixHQUFHSyxPQUFPLENBQUMsU0FBVUMsQ0FBQztZQUNoQyxJQUFJQSxNQUFNLFdBQVc7Z0JBQ25CLElBQUlDLElBQUlmLE9BQU9nQix3QkFBd0IsQ0FBQ1IsR0FBR007Z0JBQzNDZCxPQUFPQyxjQUFjLENBQUNTLEdBQUdJLEdBQUdDLEVBQUVFLEdBQUcsR0FBR0YsSUFBSTtvQkFDdENHLFlBQVk7b0JBQ1pELEtBQUs7d0JBQWMsT0FBT1QsQ0FBQyxDQUFDTSxFQUFFO29CQUFFO2dCQUNsQztZQUNGO1FBQ0Y7SUFDRjtJQUNBSixDQUFDLENBQUMsVUFBVSxHQUFHRjtJQUNmLE9BQU9SLE9BQU9tQixNQUFNLENBQUNUO0FBQ3ZCO0FBRUEsSUFBSVUsdUJBQXVCLFdBQVcsR0FBRWIsa0JBQWtCSDtBQUMxRCxJQUFJaUIscUJBQXFCLFdBQVcsR0FBRWQsa0JBQWtCRDtBQUV4RCxTQUFTZ0I7SUFDTCxJQUFJLE9BQU9DLFdBQVcsYUFBYTtRQUMvQixNQUFNLElBQUlDLE1BQU07SUFDcEI7QUFDSjtBQUNBLFNBQVNDLE9BQU9DLE9BQU87SUFDbkIsSUFBSUMsZUFBZTtJQUNuQixJQUFJQyxhQUFhO0lBQ2pCLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJSCxRQUFR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R2tNO0FBQzFCbE0sY0FBYyxHQUFHd1o7QUFDakJ4WixtQkFBbUIsR0FBR3NKO0FBQ3RCdEosWUFBWSxHQUFHb007QUFDZnBNLGdCQUFnQixHQUFHc007QUFDbkJ0TSxnQkFBZ0IsR0FBR3VNO0FBQ25Cdk0sb0JBQW9CLEdBQUcwSztBQUN2QjFLLGtCQUFrQixHQUFHaUw7QUFDckJqTCxxQkFBcUIsR0FBR2dNO0FBQ3hCaE0sdUJBQXVCLEdBQUc2TDtBQUMxQjdMLHFCQUFxQixHQUFHOEw7QUFDeEI5TCxnQkFBZ0IsR0FBR2tFO0FBQ25CbEUsaUJBQWlCLEdBQUcyTDtBQUNwQjNMLGVBQWUsR0FBRzRLO0FBQ2xCNUssWUFBWSxHQUFHK0s7QUFDZi9LLHFCQUFxQixHQUFHdUw7QUFDeEJ2TCx3QkFBd0IsR0FBR2dMO0FBQzNCaEwsbUJBQW1CLEdBQUc4SztBQUN0QjlLLGlCQUFpQixHQUFHK0o7QUFDcEIvSix1QkFBdUIsR0FBR3dMO0FBQzFCeEwsZUFBZSxHQUFHMlo7QUFDbEIzWixnQ0FBZ0MsR0FBR21MO0FBQ25DbkwsZ0JBQWdCLEdBQUd5WjtBQUNuQnpaLGdCQUFnQixHQUFHcUw7QUFDbkJyTCxXQUFXLEdBQUdzTDtBQUNkdEwsWUFBWSxHQUFHb0w7QUFDZnBMLHFCQUFxQixHQUFHeUw7QUFDeEJ6TCxpQkFBaUIsR0FBR3FNO0FBQ3BCck0sZUFBZSxHQUFHNEw7QUFDbEI1TCx1QkFBdUIsR0FBR2lNO0FBQzFCak0sa0JBQWtCLEdBQUdrTDtBQUNyQmxMLGtCQUFrQixHQUFHNkY7QUFDckI3RixzQkFBc0IsR0FBRzBMO0FBQ3pCMUwsa0JBQWtCLEdBQUd3QztBQUNyQnhDLHFCQUFxQixHQUFHK0w7QUFDeEIvTCxxQkFBcUIsR0FBRzhaO0FBQ3hCOVosZUFBZSxHQUFHOEU7QUFDbEI5RSxvQkFBb0IsR0FBRzZhIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmluaXgvLi9ub2RlX21vZHVsZXMvYXNuMWpzL2J1aWxkL2luZGV4LmpzP2NhODYiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQsIEdNTyBHbG9iYWxTaWduXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtMjAyMiwgUGVjdWxpYXIgVmVudHVyZXNcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBcbiAqIEF1dGhvciAyMDE0LTIwMTksIFl1cnkgU3Ryb3poZXZza3lcbiAqIFxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbixcbiAqIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbiAqIFxuICogKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiAqICAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKiBcbiAqICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4gKiAgIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vclxuICogICBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuICogXG4gKiAqIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIGNvcHlyaWdodCBob2xkZXIgbm9yIHRoZSBuYW1lcyBvZiBpdHNcbiAqICAgY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb21cbiAqICAgdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbiAqIFxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EXG4gKiBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRFxuICogV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRVxuICogRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1JcbiAqIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFU1xuICogKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTO1xuICogTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OXG4gKiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVFxuICogKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVNcbiAqIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG52YXIgcHZ0c3V0aWxzID0gcmVxdWlyZSgncHZ0c3V0aWxzJyk7XG52YXIgcHZ1dGlscyA9IHJlcXVpcmUoJ3B2dXRpbHMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BOYW1lc3BhY2UoZSkge1xuICBpZiAoZSAmJiBlLl9fZXNNb2R1bGUpIHJldHVybiBlO1xuICB2YXIgbiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGlmIChlKSB7XG4gICAgT2JqZWN0LmtleXMoZSkuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICAgICAgaWYgKGsgIT09ICdkZWZhdWx0Jykge1xuICAgICAgICB2YXIgZCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgayk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCBrLCBkLmdldCA/IGQgOiB7XG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVba107IH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgbltcImRlZmF1bHRcIl0gPSBlO1xuICByZXR1cm4gT2JqZWN0LmZyZWV6ZShuKTtcbn1cblxudmFyIHB2dHN1dGlsc19fbmFtZXNwYWNlID0gLyojX19QVVJFX18qL19pbnRlcm9wTmFtZXNwYWNlKHB2dHN1dGlscyk7XG52YXIgcHZ1dGlsc19fbmFtZXNwYWNlID0gLyojX19QVVJFX18qL19pbnRlcm9wTmFtZXNwYWNlKHB2dXRpbHMpO1xuXG5mdW5jdGlvbiBhc3NlcnRCaWdJbnQoKSB7XHJcbiAgICBpZiAodHlwZW9mIEJpZ0ludCA9PT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkJpZ0ludCBpcyBub3QgZGVmaW5lZC4gWW91ciBlbnZpcm9ubWVudCBkb2Vzbid0IGltcGxlbWVudCBCaWdJbnQuXCIpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGNvbmNhdChidWZmZXJzKSB7XHJcbiAgICBsZXQgb3V0cHV0TGVuZ3RoID0gMDtcclxuICAgIGxldCBwcmV2TGVuZ3RoID0gMDtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmZmVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IGJ1ZmZlcnNbaV07XHJcbiAgICAgICAgb3V0cHV0TGVuZ3RoICs9IGJ1ZmZlci5ieXRlTGVuZ3RoO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcmV0VmlldyA9IG5ldyBVaW50OEFycmF5KG91dHB1dExlbmd0aCk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1ZmZlcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBidWZmZXIgPSBidWZmZXJzW2ldO1xyXG4gICAgICAgIHJldFZpZXcuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZmZlciksIHByZXZMZW5ndGgpO1xyXG4gICAgICAgIHByZXZMZW5ndGggKz0gYnVmZmVyLmJ5dGVMZW5ndGg7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmV0Vmlldy5idWZmZXI7XHJcbn1cclxuZnVuY3Rpb24gY2hlY2tCdWZmZXJQYXJhbXMoYmFzZUJsb2NrLCBpbnB1dEJ1ZmZlciwgaW5wdXRPZmZzZXQsIGlucHV0TGVuZ3RoKSB7XHJcbiAgICBpZiAoIShpbnB1dEJ1ZmZlciBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKSB7XHJcbiAgICAgICAgYmFzZUJsb2NrLmVycm9yID0gXCJXcm9uZyBwYXJhbWV0ZXI6IGlucHV0QnVmZmVyIG11c3QgYmUgJ1VpbnQ4QXJyYXknXCI7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKCFpbnB1dEJ1ZmZlci5ieXRlTGVuZ3RoKSB7XHJcbiAgICAgICAgYmFzZUJsb2NrLmVycm9yID0gXCJXcm9uZyBwYXJhbWV0ZXI6IGlucHV0QnVmZmVyIGhhcyB6ZXJvIGxlbmd0aFwiO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmIChpbnB1dE9mZnNldCA8IDApIHtcclxuICAgICAgICBiYXNlQmxvY2suZXJyb3IgPSBcIldyb25nIHBhcmFtZXRlcjogaW5wdXRPZmZzZXQgbGVzcyB0aGFuIHplcm9cIjtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAoaW5wdXRMZW5ndGggPCAwKSB7XHJcbiAgICAgICAgYmFzZUJsb2NrLmVycm9yID0gXCJXcm9uZyBwYXJhbWV0ZXI6IGlucHV0TGVuZ3RoIGxlc3MgdGhhbiB6ZXJvXCI7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKChpbnB1dEJ1ZmZlci5ieXRlTGVuZ3RoIC0gaW5wdXRPZmZzZXQgLSBpbnB1dExlbmd0aCkgPCAwKSB7XHJcbiAgICAgICAgYmFzZUJsb2NrLmVycm9yID0gXCJFbmQgb2YgaW5wdXQgcmVhY2hlZCBiZWZvcmUgbWVzc2FnZSB3YXMgZnVsbHkgZGVjb2RlZCAoaW5jb25zaXN0ZW50IG9mZnNldCBhbmQgbGVuZ3RoIHZhbHVlcylcIjtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxuXG5jbGFzcyBWaWV3V3JpdGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuaXRlbXMgPSBbXTtcclxuICAgIH1cclxuICAgIHdyaXRlKGJ1Zikge1xyXG4gICAgICAgIHRoaXMuaXRlbXMucHVzaChidWYpO1xyXG4gICAgfVxyXG4gICAgZmluYWwoKSB7XHJcbiAgICAgICAgcmV0dXJuIGNvbmNhdCh0aGlzLml0ZW1zKTtcclxuICAgIH1cclxufVxuXG5jb25zdCBwb3dlcnMyID0gW25ldyBVaW50OEFycmF5KFsxXSldO1xyXG5jb25zdCBkaWdpdHNTdHJpbmcgPSBcIjAxMjM0NTY3ODlcIjtcclxuY29uc3QgTkFNRSA9IFwibmFtZVwiO1xyXG5jb25zdCBWQUxVRV9IRVhfVklFVyA9IFwidmFsdWVIZXhWaWV3XCI7XHJcbmNvbnN0IElTX0hFWF9PTkxZID0gXCJpc0hleE9ubHlcIjtcclxuY29uc3QgSURfQkxPQ0sgPSBcImlkQmxvY2tcIjtcclxuY29uc3QgVEFHX0NMQVNTID0gXCJ0YWdDbGFzc1wiO1xyXG5jb25zdCBUQUdfTlVNQkVSID0gXCJ0YWdOdW1iZXJcIjtcclxuY29uc3QgSVNfQ09OU1RSVUNURUQgPSBcImlzQ29uc3RydWN0ZWRcIjtcclxuY29uc3QgRlJPTV9CRVIgPSBcImZyb21CRVJcIjtcclxuY29uc3QgVE9fQkVSID0gXCJ0b0JFUlwiO1xyXG5jb25zdCBMT0NBTCA9IFwibG9jYWxcIjtcclxuY29uc3QgRU1QVFlfU1RSSU5HID0gXCJcIjtcclxuY29uc3QgRU1QVFlfQlVGRkVSID0gbmV3IEFycmF5QnVmZmVyKDApO1xyXG5jb25zdCBFTVBUWV9WSUVXID0gbmV3IFVpbnQ4QXJyYXkoMCk7XHJcbmNvbnN0IEVORF9PRl9DT05URU5UX05BTUUgPSBcIkVuZE9mQ29udGVudFwiO1xyXG5jb25zdCBPQ1RFVF9TVFJJTkdfTkFNRSA9IFwiT0NURVQgU1RSSU5HXCI7XHJcbmNvbnN0IEJJVF9TVFJJTkdfTkFNRSA9IFwiQklUIFNUUklOR1wiO1xuXG5mdW5jdGlvbiBIZXhCbG9jayhCYXNlQ2xhc3MpIHtcclxuICAgIHZhciBfYTtcclxuICAgIHJldHVybiBfYSA9IGNsYXNzIFNvbWUgZXh0ZW5kcyBCYXNlQ2xhc3Mge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgICAgICBzdXBlciguLi5hcmdzKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IGFyZ3NbMF0gfHwge307XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzSGV4T25seSA9IChfYSA9IHBhcmFtcy5pc0hleE9ubHkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZUhleFZpZXcgPSBwYXJhbXMudmFsdWVIZXggPyBwdnRzdXRpbHNfX25hbWVzcGFjZS5CdWZmZXJTb3VyY2VDb252ZXJ0ZXIudG9VaW50OEFycmF5KHBhcmFtcy52YWx1ZUhleCkgOiBFTVBUWV9WSUVXO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGdldCB2YWx1ZUhleCgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlSGV4Vmlldy5zbGljZSgpLmJ1ZmZlcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzZXQgdmFsdWVIZXgodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudmFsdWVIZXhWaWV3ID0gbmV3IFVpbnQ4QXJyYXkodmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZyb21CRVIoaW5wdXRCdWZmZXIsIGlucHV0T2Zmc2V0LCBpbnB1dExlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdmlldyA9IGlucHV0QnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgPyBuZXcgVWludDhBcnJheShpbnB1dEJ1ZmZlcikgOiBpbnB1dEJ1ZmZlcjtcclxuICAgICAgICAgICAgICAgIGlmICghY2hlY2tCdWZmZXJQYXJhbXModGhpcywgdmlldywgaW5wdXRPZmZzZXQsIGlucHV0TGVuZ3RoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGVuZExlbmd0aCA9IGlucHV0T2Zmc2V0ICsgaW5wdXRMZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlSGV4VmlldyA9IHZpZXcuc3ViYXJyYXkoaW5wdXRPZmZzZXQsIGVuZExlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMudmFsdWVIZXhWaWV3Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMud2FybmluZ3MucHVzaChcIlplcm8gYnVmZmVyIGxlbmd0aFwiKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXRPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJsb2NrTGVuZ3RoID0gaW5wdXRMZW5ndGg7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZW5kTGVuZ3RoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRvQkVSKHNpemVPbmx5ID0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc0hleE9ubHkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yID0gXCJGbGFnICdpc0hleE9ubHknIGlzIG5vdCBzZXQsIGFib3J0XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEVNUFRZX0JVRkZFUjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChzaXplT25seSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQXJyYXlCdWZmZXIodGhpcy52YWx1ZUhleFZpZXcuYnl0ZUxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMudmFsdWVIZXhWaWV3LmJ5dGVMZW5ndGggPT09IHRoaXMudmFsdWVIZXhWaWV3LmJ1ZmZlci5ieXRlTGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy52YWx1ZUhleFZpZXcuYnVmZmVyXHJcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLnZhbHVlSGV4Vmlldy5zbGljZSgpLmJ1ZmZlcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0b0pTT04oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC4uLnN1cGVyLnRvSlNPTigpLFxyXG4gICAgICAgICAgICAgICAgICAgIGlzSGV4T25seTogdGhpcy5pc0hleE9ubHksXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVIZXg6IHB2dHN1dGlsc19fbmFtZXNwYWNlLkNvbnZlcnQuVG9IZXgodGhpcy52YWx1ZUhleFZpZXcpLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX2EuTkFNRSA9IFwiaGV4QmxvY2tcIixcclxuICAgICAgICBfYTtcclxufVxuXG5jbGFzcyBMb2NhbEJhc2VCbG9jayB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7IGJsb2NrTGVuZ3RoID0gMCwgZXJyb3IgPSBFTVBUWV9TVFJJTkcsIHdhcm5pbmdzID0gW10sIHZhbHVlQmVmb3JlRGVjb2RlID0gRU1QVFlfVklFVywgfSA9IHt9KSB7XHJcbiAgICAgICAgdGhpcy5ibG9ja0xlbmd0aCA9IGJsb2NrTGVuZ3RoO1xyXG4gICAgICAgIHRoaXMuZXJyb3IgPSBlcnJvcjtcclxuICAgICAgICB0aGlzLndhcm5pbmdzID0gd2FybmluZ3M7XHJcbiAgICAgICAgdGhpcy52YWx1ZUJlZm9yZURlY29kZVZpZXcgPSBwdnRzdXRpbHNfX25hbWVzcGFjZS5CdWZmZXJTb3VyY2VDb252ZXJ0ZXIudG9VaW50OEFycmF5KHZhbHVlQmVmb3JlRGVjb2RlKTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBibG9ja05hbWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuTkFNRTtcclxuICAgIH1cclxuICAgIGdldCB2YWx1ZUJlZm9yZURlY29kZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZUJlZm9yZURlY29kZVZpZXcuc2xpY2UoKS5idWZmZXI7XHJcbiAgICB9XHJcbiAgICBzZXQgdmFsdWVCZWZvcmVEZWNvZGUodmFsdWUpIHtcclxuICAgICAgICB0aGlzLnZhbHVlQmVmb3JlRGVjb2RlVmlldyA9IG5ldyBVaW50OEFycmF5KHZhbHVlKTtcclxuICAgIH1cclxuICAgIHRvSlNPTigpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBibG9ja05hbWU6IHRoaXMuY29uc3RydWN0b3IuTkFNRSxcclxuICAgICAgICAgICAgYmxvY2tMZW5ndGg6IHRoaXMuYmxvY2tMZW5ndGgsXHJcbiAgICAgICAgICAgIGVycm9yOiB0aGlzLmVycm9yLFxyXG4gICAgICAgICAgICB3YXJuaW5nczogdGhpcy53YXJuaW5ncyxcclxuICAgICAgICAgICAgdmFsdWVCZWZvcmVEZWNvZGU6IHB2dHN1dGlsc19fbmFtZXNwYWNlLkNvbnZlcnQuVG9IZXgodGhpcy52YWx1ZUJlZm9yZURlY29kZVZpZXcpLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuTG9jYWxCYXNlQmxvY2suTkFNRSA9IFwiYmFzZUJsb2NrXCI7XG5cbmNsYXNzIFZhbHVlQmxvY2sgZXh0ZW5kcyBMb2NhbEJhc2VCbG9jayB7XHJcbiAgICBmcm9tQkVSKGlucHV0QnVmZmVyLCBpbnB1dE9mZnNldCwgaW5wdXRMZW5ndGgpIHtcclxuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJVc2VyIG5lZWQgdG8gbWFrZSBhIHNwZWNpZmljIGZ1bmN0aW9uIGluIGEgY2xhc3Mgd2hpY2ggZXh0ZW5kcyAnVmFsdWVCbG9jaydcIik7XHJcbiAgICB9XHJcbiAgICB0b0JFUihzaXplT25seSwgd3JpdGVyKSB7XHJcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiVXNlciBuZWVkIHRvIG1ha2UgYSBzcGVjaWZpYyBmdW5jdGlvbiBpbiBhIGNsYXNzIHdoaWNoIGV4dGVuZHMgJ1ZhbHVlQmxvY2snXCIpO1xyXG4gICAgfVxyXG59XHJcblZhbHVlQmxvY2suTkFNRSA9IFwidmFsdWVCbG9ja1wiO1xuXG5jbGFzcyBMb2NhbElkZW50aWZpY2F0aW9uQmxvY2sgZXh0ZW5kcyBIZXhCbG9jayhMb2NhbEJhc2VCbG9jaykge1xyXG4gICAgY29uc3RydWN0b3IoeyBpZEJsb2NrID0ge30sIH0gPSB7fSkge1xyXG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIGlmIChpZEJsb2NrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNIZXhPbmx5ID0gKF9hID0gaWRCbG9jay5pc0hleE9ubHkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlSGV4VmlldyA9IGlkQmxvY2sudmFsdWVIZXggPyBwdnRzdXRpbHNfX25hbWVzcGFjZS5CdWZmZXJTb3VyY2VDb252ZXJ0ZXIudG9VaW50OEFycmF5KGlkQmxvY2sudmFsdWVIZXgpIDogRU1QVFlfVklFVztcclxuICAgICAgICAgICAgdGhpcy50YWdDbGFzcyA9IChfYiA9IGlkQmxvY2sudGFnQ2xhc3MpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IC0xO1xyXG4gICAgICAgICAgICB0aGlzLnRhZ051bWJlciA9IChfYyA9IGlkQmxvY2sudGFnTnVtYmVyKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiAtMTtcclxuICAgICAgICAgICAgdGhpcy5pc0NvbnN0cnVjdGVkID0gKF9kID0gaWRCbG9jay5pc0NvbnN0cnVjdGVkKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudGFnQ2xhc3MgPSAtMTtcclxuICAgICAgICAgICAgdGhpcy50YWdOdW1iZXIgPSAtMTtcclxuICAgICAgICAgICAgdGhpcy5pc0NvbnN0cnVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdG9CRVIoc2l6ZU9ubHkgPSBmYWxzZSkge1xyXG4gICAgICAgIGxldCBmaXJzdE9jdGV0ID0gMDtcclxuICAgICAgICBzd2l0Y2ggKHRoaXMudGFnQ2xhc3MpIHtcclxuICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgZmlyc3RPY3RldCB8PSAweDAwO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgIGZpcnN0T2N0ZXQgfD0gMHg0MDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICBmaXJzdE9jdGV0IHw9IDB4ODA7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgZmlyc3RPY3RldCB8PSAweEMwO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yID0gXCJVbmtub3duIHRhZyBjbGFzc1wiO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEVNUFRZX0JVRkZFUjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuaXNDb25zdHJ1Y3RlZClcclxuICAgICAgICAgICAgZmlyc3RPY3RldCB8PSAweDIwO1xyXG4gICAgICAgIGlmICh0aGlzLnRhZ051bWJlciA8IDMxICYmICF0aGlzLmlzSGV4T25seSkge1xyXG4gICAgICAgICAgICBjb25zdCByZXRWaWV3ID0gbmV3IFVpbnQ4QXJyYXkoMSk7XHJcbiAgICAgICAgICAgIGlmICghc2l6ZU9ubHkpIHtcclxuICAgICAgICAgICAgICAgIGxldCBudW1iZXIgPSB0aGlzLnRhZ051bWJlcjtcclxuICAgICAgICAgICAgICAgIG51bWJlciAmPSAweDFGO1xyXG4gICAgICAgICAgICAgICAgZmlyc3RPY3RldCB8PSBudW1iZXI7XHJcbiAgICAgICAgICAgICAgICByZXRWaWV3WzBdID0gZmlyc3RPY3RldDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmV0Vmlldy5idWZmZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5pc0hleE9ubHkpIHtcclxuICAgICAgICAgICAgY29uc3QgZW5jb2RlZEJ1ZiA9IHB2dXRpbHNfX25hbWVzcGFjZS51dGlsVG9CYXNlKHRoaXMudGFnTnVtYmVyLCA3KTtcclxuICAgICAgICAgICAgY29uc3QgZW5jb2RlZFZpZXcgPSBuZXcgVWludDhBcnJheShlbmNvZGVkQnVmKTtcclxuICAgICAgICAgICAgY29uc3Qgc2l6ZSA9IGVuY29kZWRCdWYuYnl0ZUxlbmd0aDtcclxuICAgICAgICAgICAgY29uc3QgcmV0VmlldyA9IG5ldyBVaW50OEFycmF5KHNpemUgKyAxKTtcclxuICAgICAgICAgICAgcmV0Vmlld1swXSA9IChmaXJzdE9jdGV0IHwgMHgxRik7XHJcbiAgICAgICAgICAgIGlmICghc2l6ZU9ubHkpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgKHNpemUgLSAxKTsgaSsrKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldFZpZXdbaSArIDFdID0gZW5jb2RlZFZpZXdbaV0gfCAweDgwO1xyXG4gICAgICAgICAgICAgICAgcmV0Vmlld1tzaXplXSA9IGVuY29kZWRWaWV3W3NpemUgLSAxXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmV0Vmlldy5idWZmZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJldFZpZXcgPSBuZXcgVWludDhBcnJheSh0aGlzLnZhbHVlSGV4Vmlldy5ieXRlTGVuZ3RoICsgMSk7XHJcbiAgICAgICAgcmV0Vmlld1swXSA9IChmaXJzdE9jdGV0IHwgMHgxRik7XHJcbiAgICAgICAgaWYgKCFzaXplT25seSkge1xyXG4gICAgICAgICAgICBjb25zdCBjdXJWaWV3ID0gdGhpcy52YWx1ZUhleFZpZXc7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgKGN1clZpZXcubGVuZ3RoIC0gMSk7IGkrKylcclxuICAgICAgICAgICAgICAgIHJldFZpZXdbaSArIDFdID0gY3VyVmlld1tpXSB8IDB4ODA7XHJcbiAgICAgICAgICAgIHJldFZpZXdbdGhpcy52YWx1ZUhleFZpZXcuYnl0ZUxlbmd0aF0gPSBjdXJWaWV3W2N1clZpZXcubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXRWaWV3LmJ1ZmZlcjtcclxuICAgIH1cclxuICAgIGZyb21CRVIoaW5wdXRCdWZmZXIsIGlucHV0T2Zmc2V0LCBpbnB1dExlbmd0aCkge1xyXG4gICAgICAgIGNvbnN0IGlucHV0VmlldyA9IHB2dHN1dGlsc19fbmFtZXNwYWNlLkJ1ZmZlclNvdXJjZUNvbnZlcnRlci50b1VpbnQ4QXJyYXkoaW5wdXRCdWZmZXIpO1xyXG4gICAgICAgIGlmICghY2hlY2tCdWZmZXJQYXJhbXModGhpcywgaW5wdXRWaWV3LCBpbnB1dE9mZnNldCwgaW5wdXRMZW5ndGgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgaW50QnVmZmVyID0gaW5wdXRWaWV3LnN1YmFycmF5KGlucHV0T2Zmc2V0LCBpbnB1dE9mZnNldCArIGlucHV0TGVuZ3RoKTtcclxuICAgICAgICBpZiAoaW50QnVmZmVyLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmVycm9yID0gXCJaZXJvIGJ1ZmZlciBsZW5ndGhcIjtcclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB0YWdDbGFzc01hc2sgPSBpbnRCdWZmZXJbMF0gJiAweEMwO1xyXG4gICAgICAgIHN3aXRjaCAodGFnQ2xhc3NNYXNrKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMHgwMDpcclxuICAgICAgICAgICAgICAgIHRoaXMudGFnQ2xhc3MgPSAoMSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAweDQwOlxyXG4gICAgICAgICAgICAgICAgdGhpcy50YWdDbGFzcyA9ICgyKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDB4ODA6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRhZ0NsYXNzID0gKDMpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMHhDMDpcclxuICAgICAgICAgICAgICAgIHRoaXMudGFnQ2xhc3MgPSAoNCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IgPSBcIlVua25vd24gdGFnIGNsYXNzXCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaXNDb25zdHJ1Y3RlZCA9IChpbnRCdWZmZXJbMF0gJiAweDIwKSA9PT0gMHgyMDtcclxuICAgICAgICB0aGlzLmlzSGV4T25seSA9IGZhbHNlO1xyXG4gICAgICAgIGNvbnN0IHRhZ051bWJlck1hc2sgPSBpbnRCdWZmZXJbMF0gJiAweDFGO1xyXG4gICAgICAgIGlmICh0YWdOdW1iZXJNYXNrICE9PSAweDFGKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGFnTnVtYmVyID0gKHRhZ051bWJlck1hc2spO1xyXG4gICAgICAgICAgICB0aGlzLmJsb2NrTGVuZ3RoID0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCBjb3VudCA9IDE7XHJcbiAgICAgICAgICAgIGxldCBpbnRUYWdOdW1iZXJCdWZmZXIgPSB0aGlzLnZhbHVlSGV4VmlldyA9IG5ldyBVaW50OEFycmF5KDI1NSk7XHJcbiAgICAgICAgICAgIGxldCB0YWdOdW1iZXJCdWZmZXJNYXhMZW5ndGggPSAyNTU7XHJcbiAgICAgICAgICAgIHdoaWxlIChpbnRCdWZmZXJbY291bnRdICYgMHg4MCkge1xyXG4gICAgICAgICAgICAgICAgaW50VGFnTnVtYmVyQnVmZmVyW2NvdW50IC0gMV0gPSBpbnRCdWZmZXJbY291bnRdICYgMHg3RjtcclxuICAgICAgICAgICAgICAgIGNvdW50Kys7XHJcbiAgICAgICAgICAgICAgICBpZiAoY291bnQgPj0gaW50QnVmZmVyLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IgPSBcIkVuZCBvZiBpbnB1dCByZWFjaGVkIGJlZm9yZSBtZXNzYWdlIHdhcyBmdWxseSBkZWNvZGVkXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGNvdW50ID09PSB0YWdOdW1iZXJCdWZmZXJNYXhMZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0YWdOdW1iZXJCdWZmZXJNYXhMZW5ndGggKz0gMjU1O1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRlbXBCdWZmZXJWaWV3ID0gbmV3IFVpbnQ4QXJyYXkodGFnTnVtYmVyQnVmZmVyTWF4TGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGludFRhZ051bWJlckJ1ZmZlci5sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcEJ1ZmZlclZpZXdbaV0gPSBpbnRUYWdOdW1iZXJCdWZmZXJbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaW50VGFnTnVtYmVyQnVmZmVyID0gdGhpcy52YWx1ZUhleFZpZXcgPSBuZXcgVWludDhBcnJheSh0YWdOdW1iZXJCdWZmZXJNYXhMZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuYmxvY2tMZW5ndGggPSAoY291bnQgKyAxKTtcclxuICAgICAgICAgICAgaW50VGFnTnVtYmVyQnVmZmVyW2NvdW50IC0gMV0gPSBpbnRCdWZmZXJbY291bnRdICYgMHg3RjtcclxuICAgICAgICAgICAgY29uc3QgdGVtcEJ1ZmZlclZpZXcgPSBuZXcgVWludDhBcnJheShjb3VudCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKylcclxuICAgICAgICAgICAgICAgIHRlbXBCdWZmZXJWaWV3W2ldID0gaW50VGFnTnVtYmVyQnVmZmVyW2ldO1xyXG4gICAgICAgICAgICBpbnRUYWdOdW1iZXJCdWZmZXIgPSB0aGlzLnZhbHVlSGV4VmlldyA9IG5ldyBVaW50OEFycmF5KGNvdW50KTtcclxuICAgICAgICAgICAgaW50VGFnTnVtYmVyQnVmZmVyLnNldCh0ZW1wQnVmZmVyVmlldyk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmJsb2NrTGVuZ3RoIDw9IDkpXHJcbiAgICAgICAgICAgICAgICB0aGlzLnRhZ051bWJlciA9IHB2dXRpbHNfX25hbWVzcGFjZS51dGlsRnJvbUJhc2UoaW50VGFnTnVtYmVyQnVmZmVyLCA3KTtcclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzSGV4T25seSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLndhcm5pbmdzLnB1c2goXCJUYWcgdG9vIGxvbmcsIHJlcHJlc2VudGVkIGFzIGhleC1jb2RlZFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKCh0aGlzLnRhZ0NsYXNzID09PSAxKSkgJiZcclxuICAgICAgICAgICAgKHRoaXMuaXNDb25zdHJ1Y3RlZCkpIHtcclxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLnRhZ051bWJlcikge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgY2FzZSA2OlxyXG4gICAgICAgICAgICAgICAgY2FzZSA5OlxyXG4gICAgICAgICAgICAgICAgY2FzZSAxMzpcclxuICAgICAgICAgICAgICAgIGNhc2UgMTQ6XHJcbiAgICAgICAgICAgICAgICBjYXNlIDIzOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAyNDpcclxuICAgICAgICAgICAgICAgIGNhc2UgMzE6XHJcbiAgICAgICAgICAgICAgICBjYXNlIDMyOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAzMzpcclxuICAgICAgICAgICAgICAgIGNhc2UgMzQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvciA9IFwiQ29uc3RydWN0ZWQgZW5jb2RpbmcgdXNlZCBmb3IgcHJpbWl0aXZlIHR5cGVcIjtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIChpbnB1dE9mZnNldCArIHRoaXMuYmxvY2tMZW5ndGgpO1xyXG4gICAgfVxyXG4gICAgdG9KU09OKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIC4uLnN1cGVyLnRvSlNPTigpLFxyXG4gICAgICAgICAgICB0YWdDbGFzczogdGhpcy50YWdDbGFzcyxcclxuICAgICAgICAgICAgdGFnTnVtYmVyOiB0aGlzLnRhZ051bWJlcixcclxuICAgICAgICAgICAgaXNDb25zdHJ1Y3RlZDogdGhpcy5pc0NvbnN0cnVjdGVkLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuTG9jYWxJZGVudGlmaWNhdGlvbkJsb2NrLk5BTUUgPSBcImlkZW50aWZpY2F0aW9uQmxvY2tcIjtcblxuY2xhc3MgTG9jYWxMZW5ndGhCbG9jayBleHRlbmRzIExvY2FsQmFzZUJsb2NrIHtcclxuICAgIGNvbnN0cnVjdG9yKHsgbGVuQmxvY2sgPSB7fSwgfSA9IHt9KSB7XHJcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLmlzSW5kZWZpbml0ZUZvcm0gPSAoX2EgPSBsZW5CbG9jay5pc0luZGVmaW5pdGVGb3JtKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBmYWxzZTtcclxuICAgICAgICB0aGlzLmxvbmdGb3JtVXNlZCA9IChfYiA9IGxlbkJsb2NrLmxvbmdGb3JtVXNlZCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogZmFsc2U7XHJcbiAgICAgICAgdGhpcy5sZW5ndGggPSAoX2MgPSBsZW5CbG9jay5sZW5ndGgpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IDA7XHJcbiAgICB9XHJcbiAgICBmcm9tQkVSKGlucHV0QnVmZmVyLCBpbnB1dE9mZnNldCwgaW5wdXRMZW5ndGgpIHtcclxuICAgICAgICBjb25zdCB2aWV3ID0gcHZ0c3V0aWxzX19uYW1lc3BhY2UuQnVmZmVyU291cmNlQ29udmVydGVyLnRvVWludDhBcnJheShpbnB1dEJ1ZmZlcik7XHJcbiAgICAgICAgaWYgKCFjaGVja0J1ZmZlclBhcmFtcyh0aGlzLCB2aWV3LCBpbnB1dE9mZnNldCwgaW5wdXRMZW5ndGgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgaW50QnVmZmVyID0gdmlldy5zdWJhcnJheShpbnB1dE9mZnNldCwgaW5wdXRPZmZzZXQgKyBpbnB1dExlbmd0aCk7XHJcbiAgICAgICAgaWYgKGludEJ1ZmZlci5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5lcnJvciA9IFwiWmVybyBidWZmZXIgbGVuZ3RoXCI7XHJcbiAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGludEJ1ZmZlclswXSA9PT0gMHhGRikge1xyXG4gICAgICAgICAgICB0aGlzLmVycm9yID0gXCJMZW5ndGggYmxvY2sgMHhGRiBpcyByZXNlcnZlZCBieSBzdGFuZGFyZFwiO1xyXG4gICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaXNJbmRlZmluaXRlRm9ybSA9IGludEJ1ZmZlclswXSA9PT0gMHg4MDtcclxuICAgICAgICBpZiAodGhpcy5pc0luZGVmaW5pdGVGb3JtKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYmxvY2tMZW5ndGggPSAxO1xyXG4gICAgICAgICAgICByZXR1cm4gKGlucHV0T2Zmc2V0ICsgdGhpcy5ibG9ja0xlbmd0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubG9uZ0Zvcm1Vc2VkID0gISEoaW50QnVmZmVyWzBdICYgMHg4MCk7XHJcbiAgICAgICAgaWYgKHRoaXMubG9uZ0Zvcm1Vc2VkID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICB0aGlzLmxlbmd0aCA9IChpbnRCdWZmZXJbMF0pO1xyXG4gICAgICAgICAgICB0aGlzLmJsb2NrTGVuZ3RoID0gMTtcclxuICAgICAgICAgICAgcmV0dXJuIChpbnB1dE9mZnNldCArIHRoaXMuYmxvY2tMZW5ndGgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjb3VudCA9IGludEJ1ZmZlclswXSAmIDB4N0Y7XHJcbiAgICAgICAgaWYgKGNvdW50ID4gOCkge1xyXG4gICAgICAgICAgICB0aGlzLmVycm9yID0gXCJUb28gYmlnIGludGVnZXJcIjtcclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKGNvdW50ICsgMSkgPiBpbnRCdWZmZXIubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXJyb3IgPSBcIkVuZCBvZiBpbnB1dCByZWFjaGVkIGJlZm9yZSBtZXNzYWdlIHdhcyBmdWxseSBkZWNvZGVkXCI7XHJcbiAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbGVuT2Zmc2V0ID0gaW5wdXRPZmZzZXQgKyAxO1xyXG4gICAgICAgIGNvbnN0IGxlbmd0aEJ1ZmZlclZpZXcgPSB2aWV3LnN1YmFycmF5KGxlbk9mZnNldCwgbGVuT2Zmc2V0ICsgY291bnQpO1xyXG4gICAgICAgIGlmIChsZW5ndGhCdWZmZXJWaWV3W2NvdW50IC0gMV0gPT09IDB4MDApXHJcbiAgICAgICAgICAgIHRoaXMud2FybmluZ3MucHVzaChcIk5lZWRsZXNzbHkgbG9uZyBlbmNvZGVkIGxlbmd0aFwiKTtcclxuICAgICAgICB0aGlzLmxlbmd0aCA9IHB2dXRpbHNfX25hbWVzcGFjZS51dGlsRnJvbUJhc2UobGVuZ3RoQnVmZmVyVmlldywgOCk7XHJcbiAgICAgICAgaWYgKHRoaXMubG9uZ0Zvcm1Vc2VkICYmICh0aGlzLmxlbmd0aCA8PSAxMjcpKVxyXG4gICAgICAgICAgICB0aGlzLndhcm5pbmdzLnB1c2goXCJVbm5lY2Vzc2FyeSB1c2FnZSBvZiBsb25nIGxlbmd0aCBmb3JtXCIpO1xyXG4gICAgICAgIHRoaXMuYmxvY2tMZW5ndGggPSBjb3VudCArIDE7XHJcbiAgICAgICAgcmV0dXJuIChpbnB1dE9mZnNldCArIHRoaXMuYmxvY2tMZW5ndGgpO1xyXG4gICAgfVxyXG4gICAgdG9CRVIoc2l6ZU9ubHkgPSBmYWxzZSkge1xyXG4gICAgICAgIGxldCByZXRCdWY7XHJcbiAgICAgICAgbGV0IHJldFZpZXc7XHJcbiAgICAgICAgaWYgKHRoaXMubGVuZ3RoID4gMTI3KVxyXG4gICAgICAgICAgICB0aGlzLmxvbmdGb3JtVXNlZCA9IHRydWU7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNJbmRlZmluaXRlRm9ybSkge1xyXG4gICAgICAgICAgICByZXRCdWYgPSBuZXcgQXJyYXlCdWZmZXIoMSk7XHJcbiAgICAgICAgICAgIGlmIChzaXplT25seSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIHJldFZpZXcgPSBuZXcgVWludDhBcnJheShyZXRCdWYpO1xyXG4gICAgICAgICAgICAgICAgcmV0Vmlld1swXSA9IDB4ODA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJldEJ1ZjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMubG9uZ0Zvcm1Vc2VkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVuY29kZWRCdWYgPSBwdnV0aWxzX19uYW1lc3BhY2UudXRpbFRvQmFzZSh0aGlzLmxlbmd0aCwgOCk7XHJcbiAgICAgICAgICAgIGlmIChlbmNvZGVkQnVmLmJ5dGVMZW5ndGggPiAxMjcpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IgPSBcIlRvbyBiaWcgbGVuZ3RoXCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKEVNUFRZX0JVRkZFUik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0QnVmID0gbmV3IEFycmF5QnVmZmVyKGVuY29kZWRCdWYuYnl0ZUxlbmd0aCArIDEpO1xyXG4gICAgICAgICAgICBpZiAoc2l6ZU9ubHkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmV0QnVmO1xyXG4gICAgICAgICAgICBjb25zdCBlbmNvZGVkVmlldyA9IG5ldyBVaW50OEFycmF5KGVuY29kZWRCdWYpO1xyXG4gICAgICAgICAgICByZXRWaWV3ID0gbmV3IFVpbnQ4QXJyYXkocmV0QnVmKTtcclxuICAgICAgICAgICAgcmV0Vmlld1swXSA9IGVuY29kZWRCdWYuYnl0ZUxlbmd0aCB8IDB4ODA7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZW5jb2RlZEJ1Zi5ieXRlTGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgICAgICByZXRWaWV3W2kgKyAxXSA9IGVuY29kZWRWaWV3W2ldO1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0QnVmO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXRCdWYgPSBuZXcgQXJyYXlCdWZmZXIoMSk7XHJcbiAgICAgICAgaWYgKHNpemVPbmx5ID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICByZXRWaWV3ID0gbmV3IFVpbnQ4QXJyYXkocmV0QnVmKTtcclxuICAgICAgICAgICAgcmV0Vmlld1swXSA9IHRoaXMubGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmV0QnVmO1xyXG4gICAgfVxyXG4gICAgdG9KU09OKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIC4uLnN1cGVyLnRvSlNPTigpLFxyXG4gICAgICAgICAgICBpc0luZGVmaW5pdGVGb3JtOiB0aGlzLmlzSW5kZWZpbml0ZUZvcm0sXHJcbiAgICAgICAgICAgIGxvbmdGb3JtVXNlZDogdGhpcy5sb25nRm9ybVVzZWQsXHJcbiAgICAgICAgICAgIGxlbmd0aDogdGhpcy5sZW5ndGgsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5Mb2NhbExlbmd0aEJsb2NrLk5BTUUgPSBcImxlbmd0aEJsb2NrXCI7XG5cbmNvbnN0IHR5cGVTdG9yZSA9IHt9O1xuXG5jbGFzcyBCYXNlQmxvY2sgZXh0ZW5kcyBMb2NhbEJhc2VCbG9jayB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7IG5hbWUgPSBFTVBUWV9TVFJJTkcsIG9wdGlvbmFsID0gZmFsc2UsIHByaW1pdGl2ZVNjaGVtYSwgLi4ucGFyYW1ldGVycyB9ID0ge30sIHZhbHVlQmxvY2tUeXBlKSB7XHJcbiAgICAgICAgc3VwZXIocGFyYW1ldGVycyk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLm9wdGlvbmFsID0gb3B0aW9uYWw7XHJcbiAgICAgICAgaWYgKHByaW1pdGl2ZVNjaGVtYSkge1xyXG4gICAgICAgICAgICB0aGlzLnByaW1pdGl2ZVNjaGVtYSA9IHByaW1pdGl2ZVNjaGVtYTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5pZEJsb2NrID0gbmV3IExvY2FsSWRlbnRpZmljYXRpb25CbG9jayhwYXJhbWV0ZXJzKTtcclxuICAgICAgICB0aGlzLmxlbkJsb2NrID0gbmV3IExvY2FsTGVuZ3RoQmxvY2socGFyYW1ldGVycyk7XHJcbiAgICAgICAgdGhpcy52YWx1ZUJsb2NrID0gdmFsdWVCbG9ja1R5cGUgPyBuZXcgdmFsdWVCbG9ja1R5cGUocGFyYW1ldGVycykgOiBuZXcgVmFsdWVCbG9jayhwYXJhbWV0ZXJzKTtcclxuICAgIH1cclxuICAgIGZyb21CRVIoaW5wdXRCdWZmZXIsIGlucHV0T2Zmc2V0LCBpbnB1dExlbmd0aCkge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdE9mZnNldCA9IHRoaXMudmFsdWVCbG9jay5mcm9tQkVSKGlucHV0QnVmZmVyLCBpbnB1dE9mZnNldCwgKHRoaXMubGVuQmxvY2suaXNJbmRlZmluaXRlRm9ybSkgPyBpbnB1dExlbmd0aCA6IHRoaXMubGVuQmxvY2subGVuZ3RoKTtcclxuICAgICAgICBpZiAocmVzdWx0T2Zmc2V0ID09PSAtMSkge1xyXG4gICAgICAgICAgICB0aGlzLmVycm9yID0gdGhpcy52YWx1ZUJsb2NrLmVycm9yO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0T2Zmc2V0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMuaWRCbG9jay5lcnJvci5sZW5ndGgpXHJcbiAgICAgICAgICAgIHRoaXMuYmxvY2tMZW5ndGggKz0gdGhpcy5pZEJsb2NrLmJsb2NrTGVuZ3RoO1xyXG4gICAgICAgIGlmICghdGhpcy5sZW5CbG9jay5lcnJvci5sZW5ndGgpXHJcbiAgICAgICAgICAgIHRoaXMuYmxvY2tMZW5ndGggKz0gdGhpcy5sZW5CbG9jay5ibG9ja0xlbmd0aDtcclxuICAgICAgICBpZiAoIXRoaXMudmFsdWVCbG9jay5lcnJvci5sZW5ndGgpXHJcbiAgICAgICAgICAgIHRoaXMuYmxvY2tMZW5ndGggKz0gdGhpcy52YWx1ZUJsb2NrLmJsb2NrTGVuZ3RoO1xyXG4gICAgICAgIHJldHVybiByZXN1bHRPZmZzZXQ7XHJcbiAgICB9XHJcbiAgICB0b0JFUihzaXplT25seSwgd3JpdGVyKSB7XHJcbiAgICAgICAgY29uc3QgX3dyaXRlciA9IHdyaXRlciB8fCBuZXcgVmlld1dyaXRlcigpO1xyXG4gICAgICAgIGlmICghd3JpdGVyKSB7XHJcbiAgICAgICAgICAgIHByZXBhcmVJbmRlZmluaXRlRm9ybSh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgaWRCbG9ja0J1ZiA9IHRoaXMuaWRCbG9jay50b0JFUihzaXplT25seSk7XHJcbiAgICAgICAgX3dyaXRlci53cml0ZShpZEJsb2NrQnVmKTtcclxuICAgICAgICBpZiAodGhpcy5sZW5CbG9jay5pc0luZGVmaW5pdGVGb3JtKSB7XHJcbiAgICAgICAgICAgIF93cml0ZXIud3JpdGUobmV3IFVpbnQ4QXJyYXkoWzB4ODBdKS5idWZmZXIpO1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlQmxvY2sudG9CRVIoc2l6ZU9ubHksIF93cml0ZXIpO1xyXG4gICAgICAgICAgICBfd3JpdGVyLndyaXRlKG5ldyBBcnJheUJ1ZmZlcigyKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCB2YWx1ZUJsb2NrQnVmID0gdGhpcy52YWx1ZUJsb2NrLnRvQkVSKHNpemVPbmx5KTtcclxuICAgICAgICAgICAgdGhpcy5sZW5CbG9jay5sZW5ndGggPSB2YWx1ZUJsb2NrQnVmLmJ5dGVMZW5ndGg7XHJcbiAgICAgICAgICAgIGNvbnN0IGxlbkJsb2NrQnVmID0gdGhpcy5sZW5CbG9jay50b0JFUihzaXplT25seSk7XHJcbiAgICAgICAgICAgIF93cml0ZXIud3JpdGUobGVuQmxvY2tCdWYpO1xyXG4gICAgICAgICAgICBfd3JpdGVyLndyaXRlKHZhbHVlQmxvY2tCdWYpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXdyaXRlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gX3dyaXRlci5maW5hbCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gRU1QVFlfQlVGRkVSO1xyXG4gICAgfVxyXG4gICAgdG9KU09OKCkge1xyXG4gICAgICAgIGNvbnN0IG9iamVjdCA9IHtcclxuICAgICAgICAgICAgLi4uc3VwZXIudG9KU09OKCksXHJcbiAgICAgICAgICAgIGlkQmxvY2s6IHRoaXMuaWRCbG9jay50b0pTT04oKSxcclxuICAgICAgICAgICAgbGVuQmxvY2s6IHRoaXMubGVuQmxvY2sudG9KU09OKCksXHJcbiAgICAgICAgICAgIHZhbHVlQmxvY2s6IHRoaXMudmFsdWVCbG9jay50b0pTT04oKSxcclxuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxyXG4gICAgICAgICAgICBvcHRpb25hbDogdGhpcy5vcHRpb25hbCxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmICh0aGlzLnByaW1pdGl2ZVNjaGVtYSlcclxuICAgICAgICAgICAgb2JqZWN0LnByaW1pdGl2ZVNjaGVtYSA9IHRoaXMucHJpbWl0aXZlU2NoZW1hLnRvSlNPTigpO1xyXG4gICAgICAgIHJldHVybiBvYmplY3Q7XHJcbiAgICB9XHJcbiAgICB0b1N0cmluZyhlbmNvZGluZyA9IFwiYXNjaWlcIikge1xyXG4gICAgICAgIGlmIChlbmNvZGluZyA9PT0gXCJhc2NpaVwiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9uQXNjaWlFbmNvZGluZygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcHZ0c3V0aWxzX19uYW1lc3BhY2UuQ29udmVydC5Ub0hleCh0aGlzLnRvQkVSKCkpO1xyXG4gICAgfVxyXG4gICAgb25Bc2NpaUVuY29kaW5nKCkge1xyXG4gICAgICAgIHJldHVybiBgJHt0aGlzLmNvbnN0cnVjdG9yLk5BTUV9IDogJHtwdnRzdXRpbHNfX25hbWVzcGFjZS5Db252ZXJ0LlRvSGV4KHRoaXMudmFsdWVCbG9jay52YWx1ZUJlZm9yZURlY29kZVZpZXcpfWA7XHJcbiAgICB9XHJcbiAgICBpc0VxdWFsKG90aGVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMgPT09IG90aGVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIShvdGhlciBpbnN0YW5jZW9mIHRoaXMuY29uc3RydWN0b3IpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdGhpc1JhdyA9IHRoaXMudG9CRVIoKTtcclxuICAgICAgICBjb25zdCBvdGhlclJhdyA9IG90aGVyLnRvQkVSKCk7XHJcbiAgICAgICAgcmV0dXJuIHB2dXRpbHNfX25hbWVzcGFjZS5pc0VxdWFsQnVmZmVyKHRoaXNSYXcsIG90aGVyUmF3KTtcclxuICAgIH1cclxufVxyXG5CYXNlQmxvY2suTkFNRSA9IFwiQmFzZUJsb2NrXCI7XHJcbmZ1bmN0aW9uIHByZXBhcmVJbmRlZmluaXRlRm9ybShiYXNlQmxvY2spIHtcclxuICAgIGlmIChiYXNlQmxvY2sgaW5zdGFuY2VvZiB0eXBlU3RvcmUuQ29uc3RydWN0ZWQpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIGJhc2VCbG9jay52YWx1ZUJsb2NrLnZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmIChwcmVwYXJlSW5kZWZpbml0ZUZvcm0odmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICBiYXNlQmxvY2subGVuQmxvY2suaXNJbmRlZmluaXRlRm9ybSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gISFiYXNlQmxvY2subGVuQmxvY2suaXNJbmRlZmluaXRlRm9ybTtcclxufVxuXG5jbGFzcyBCYXNlU3RyaW5nQmxvY2sgZXh0ZW5kcyBCYXNlQmxvY2sge1xyXG4gICAgY29uc3RydWN0b3IoeyB2YWx1ZSA9IEVNUFRZX1NUUklORywgLi4ucGFyYW1ldGVycyB9ID0ge30sIHN0cmluZ1ZhbHVlQmxvY2tUeXBlKSB7XHJcbiAgICAgICAgc3VwZXIocGFyYW1ldGVycywgc3RyaW5nVmFsdWVCbG9ja1R5cGUpO1xyXG4gICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmZyb21TdHJpbmcodmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldFZhbHVlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlQmxvY2sudmFsdWU7XHJcbiAgICB9XHJcbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMudmFsdWVCbG9jay52YWx1ZSA9IHZhbHVlO1xyXG4gICAgfVxyXG4gICAgZnJvbUJFUihpbnB1dEJ1ZmZlciwgaW5wdXRPZmZzZXQsIGlucHV0TGVuZ3RoKSB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0T2Zmc2V0ID0gdGhpcy52YWx1ZUJsb2NrLmZyb21CRVIoaW5wdXRCdWZmZXIsIGlucHV0T2Zmc2V0LCAodGhpcy5sZW5CbG9jay5pc0luZGVmaW5pdGVGb3JtKSA/IGlucHV0TGVuZ3RoIDogdGhpcy5sZW5CbG9jay5sZW5ndGgpO1xyXG4gICAgICAgIGlmIChyZXN1bHRPZmZzZXQgPT09IC0xKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXJyb3IgPSB0aGlzLnZhbHVlQmxvY2suZXJyb3I7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRPZmZzZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZnJvbUJ1ZmZlcih0aGlzLnZhbHVlQmxvY2sudmFsdWVIZXhWaWV3KTtcclxuICAgICAgICBpZiAoIXRoaXMuaWRCbG9jay5lcnJvci5sZW5ndGgpXHJcbiAgICAgICAgICAgIHRoaXMuYmxvY2tMZW5ndGggKz0gdGhpcy5pZEJsb2NrLmJsb2NrTGVuZ3RoO1xyXG4gICAgICAgIGlmICghdGhpcy5sZW5CbG9jay5lcnJvci5sZW5ndGgpXHJcbiAgICAgICAgICAgIHRoaXMuYmxvY2tMZW5ndGggKz0gdGhpcy5sZW5CbG9jay5ibG9ja0xlbmd0aDtcclxuICAgICAgICBpZiAoIXRoaXMudmFsdWVCbG9jay5lcnJvci5sZW5ndGgpXHJcbiAgICAgICAgICAgIHRoaXMuYmxvY2tMZW5ndGggKz0gdGhpcy52YWx1ZUJsb2NrLmJsb2NrTGVuZ3RoO1xyXG4gICAgICAgIHJldHVybiByZXN1bHRPZmZzZXQ7XHJcbiAgICB9XHJcbiAgICBvbkFzY2lpRW5jb2RpbmcoKSB7XHJcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuY29uc3RydWN0b3IuTkFNRX0gOiAnJHt0aGlzLnZhbHVlQmxvY2sudmFsdWV9J2A7XHJcbiAgICB9XHJcbn1cclxuQmFzZVN0cmluZ0Jsb2NrLk5BTUUgPSBcIkJhc2VTdHJpbmdCbG9ja1wiO1xuXG5jbGFzcyBMb2NhbFByaW1pdGl2ZVZhbHVlQmxvY2sgZXh0ZW5kcyBIZXhCbG9jayhWYWx1ZUJsb2NrKSB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7IGlzSGV4T25seSA9IHRydWUsIC4uLnBhcmFtZXRlcnMgfSA9IHt9KSB7XHJcbiAgICAgICAgc3VwZXIocGFyYW1ldGVycyk7XHJcbiAgICAgICAgdGhpcy5pc0hleE9ubHkgPSBpc0hleE9ubHk7XHJcbiAgICB9XHJcbn1cclxuTG9jYWxQcmltaXRpdmVWYWx1ZUJsb2NrLk5BTUUgPSBcIlByaW1pdGl2ZVZhbHVlQmxvY2tcIjtcblxudmFyIF9hJHc7XHJcbmNsYXNzIFByaW1pdGl2ZSBleHRlbmRzIEJhc2VCbG9jayB7XHJcbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzID0ge30pIHtcclxuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzLCBMb2NhbFByaW1pdGl2ZVZhbHVlQmxvY2spO1xyXG4gICAgICAgIHRoaXMuaWRCbG9jay5pc0NvbnN0cnVjdGVkID0gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuX2EkdyA9IFByaW1pdGl2ZTtcclxuKCgpID0+IHtcclxuICAgIHR5cGVTdG9yZS5QcmltaXRpdmUgPSBfYSR3O1xyXG59KSgpO1xyXG5QcmltaXRpdmUuTkFNRSA9IFwiUFJJTUlUSVZFXCI7XG5cbmZ1bmN0aW9uIGxvY2FsQ2hhbmdlVHlwZShpbnB1dE9iamVjdCwgbmV3VHlwZSkge1xyXG4gICAgaWYgKGlucHV0T2JqZWN0IGluc3RhbmNlb2YgbmV3VHlwZSkge1xyXG4gICAgICAgIHJldHVybiBpbnB1dE9iamVjdDtcclxuICAgIH1cclxuICAgIGNvbnN0IG5ld09iamVjdCA9IG5ldyBuZXdUeXBlKCk7XHJcbiAgICBuZXdPYmplY3QuaWRCbG9jayA9IGlucHV0T2JqZWN0LmlkQmxvY2s7XHJcbiAgICBuZXdPYmplY3QubGVuQmxvY2sgPSBpbnB1dE9iamVjdC5sZW5CbG9jaztcclxuICAgIG5ld09iamVjdC53YXJuaW5ncyA9IGlucHV0T2JqZWN0Lndhcm5pbmdzO1xyXG4gICAgbmV3T2JqZWN0LnZhbHVlQmVmb3JlRGVjb2RlVmlldyA9IGlucHV0T2JqZWN0LnZhbHVlQmVmb3JlRGVjb2RlVmlldztcclxuICAgIHJldHVybiBuZXdPYmplY3Q7XHJcbn1cclxuZnVuY3Rpb24gbG9jYWxGcm9tQkVSKGlucHV0QnVmZmVyLCBpbnB1dE9mZnNldCA9IDAsIGlucHV0TGVuZ3RoID0gaW5wdXRCdWZmZXIubGVuZ3RoKSB7XHJcbiAgICBjb25zdCBpbmNvbWluZ09mZnNldCA9IGlucHV0T2Zmc2V0O1xyXG4gICAgbGV0IHJldHVybk9iamVjdCA9IG5ldyBCYXNlQmxvY2soe30sIFZhbHVlQmxvY2spO1xyXG4gICAgY29uc3QgYmFzZUJsb2NrID0gbmV3IExvY2FsQmFzZUJsb2NrKCk7XHJcbiAgICBpZiAoIWNoZWNrQnVmZmVyUGFyYW1zKGJhc2VCbG9jaywgaW5wdXRCdWZmZXIsIGlucHV0T2Zmc2V0LCBpbnB1dExlbmd0aCkpIHtcclxuICAgICAgICByZXR1cm5PYmplY3QuZXJyb3IgPSBiYXNlQmxvY2suZXJyb3I7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgb2Zmc2V0OiAtMSxcclxuICAgICAgICAgICAgcmVzdWx0OiByZXR1cm5PYmplY3RcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgY29uc3QgaW50QnVmZmVyID0gaW5wdXRCdWZmZXIuc3ViYXJyYXkoaW5wdXRPZmZzZXQsIGlucHV0T2Zmc2V0ICsgaW5wdXRMZW5ndGgpO1xyXG4gICAgaWYgKCFpbnRCdWZmZXIubGVuZ3RoKSB7XHJcbiAgICAgICAgcmV0dXJuT2JqZWN0LmVycm9yID0gXCJaZXJvIGJ1ZmZlciBsZW5ndGhcIjtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBvZmZzZXQ6IC0xLFxyXG4gICAgICAgICAgICByZXN1bHQ6IHJldHVybk9iamVjdFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBsZXQgcmVzdWx0T2Zmc2V0ID0gcmV0dXJuT2JqZWN0LmlkQmxvY2suZnJvbUJFUihpbnB1dEJ1ZmZlciwgaW5wdXRPZmZzZXQsIGlucHV0TGVuZ3RoKTtcclxuICAgIGlmIChyZXR1cm5PYmplY3QuaWRCbG9jay53YXJuaW5ncy5sZW5ndGgpIHtcclxuICAgICAgICByZXR1cm5PYmplY3Qud2FybmluZ3MuY29uY2F0KHJldHVybk9iamVjdC5pZEJsb2NrLndhcm5pbmdzKTtcclxuICAgIH1cclxuICAgIGlmIChyZXN1bHRPZmZzZXQgPT09IC0xKSB7XHJcbiAgICAgICAgcmV0dXJuT2JqZWN0LmVycm9yID0gcmV0dXJuT2JqZWN0LmlkQmxvY2suZXJyb3I7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgb2Zmc2V0OiAtMSxcclxuICAgICAgICAgICAgcmVzdWx0OiByZXR1cm5PYmplY3RcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgaW5wdXRPZmZzZXQgPSByZXN1bHRPZmZzZXQ7XHJcbiAgICBpbnB1dExlbmd0aCAtPSByZXR1cm5PYmplY3QuaWRCbG9jay5ibG9ja0xlbmd0aDtcclxuICAgIHJlc3VsdE9mZnNldCA9IHJldHVybk9iamVjdC5sZW5CbG9jay5mcm9tQkVSKGlucHV0QnVmZmVyLCBpbnB1dE9mZnNldCwgaW5wdXRMZW5ndGgpO1xyXG4gICAgaWYgKHJldHVybk9iamVjdC5sZW5CbG9jay53YXJuaW5ncy5sZW5ndGgpIHtcclxuICAgICAgICByZXR1cm5PYmplY3Qud2FybmluZ3MuY29uY2F0KHJldHVybk9iamVjdC5sZW5CbG9jay53YXJuaW5ncyk7XHJcbiAgICB9XHJcbiAgICBpZiAocmVzdWx0T2Zmc2V0ID09PSAtMSkge1xyXG4gICAgICAgIHJldHVybk9iamVjdC5lcnJvciA9IHJldHVybk9iamVjdC5sZW5CbG9jay5lcnJvcjtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBvZmZzZXQ6IC0xLFxyXG4gICAgICAgICAgICByZXN1bHQ6IHJldHVybk9iamVjdFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBpbnB1dE9mZnNldCA9IHJlc3VsdE9mZnNldDtcclxuICAgIGlucHV0TGVuZ3RoIC09IHJldHVybk9iamVjdC5sZW5CbG9jay5ibG9ja0xlbmd0aDtcclxuICAgIGlmICghcmV0dXJuT2JqZWN0LmlkQmxvY2suaXNDb25zdHJ1Y3RlZCAmJlxyXG4gICAgICAgIHJldHVybk9iamVjdC5sZW5CbG9jay5pc0luZGVmaW5pdGVGb3JtKSB7XHJcbiAgICAgICAgcmV0dXJuT2JqZWN0LmVycm9yID0gXCJJbmRlZmluaXRlIGxlbmd0aCBmb3JtIHVzZWQgZm9yIHByaW1pdGl2ZSBlbmNvZGluZyBmb3JtXCI7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgb2Zmc2V0OiAtMSxcclxuICAgICAgICAgICAgcmVzdWx0OiByZXR1cm5PYmplY3RcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgbGV0IG5ld0FTTjFUeXBlID0gQmFzZUJsb2NrO1xyXG4gICAgc3dpdGNoIChyZXR1cm5PYmplY3QuaWRCbG9jay50YWdDbGFzcykge1xyXG4gICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgaWYgKChyZXR1cm5PYmplY3QuaWRCbG9jay50YWdOdW1iZXIgPj0gMzcpICYmXHJcbiAgICAgICAgICAgICAgICAocmV0dXJuT2JqZWN0LmlkQmxvY2suaXNIZXhPbmx5ID09PSBmYWxzZSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybk9iamVjdC5lcnJvciA9IFwiVU5JVkVSU0FMIDM3IGFuZCB1cHBlciB0YWdzIGFyZSByZXNlcnZlZCBieSBBU04uMSBzdGFuZGFyZFwiO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IC0xLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdDogcmV0dXJuT2JqZWN0XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHN3aXRjaCAocmV0dXJuT2JqZWN0LmlkQmxvY2sudGFnTnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChyZXR1cm5PYmplY3QuaWRCbG9jay5pc0NvbnN0cnVjdGVkKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAocmV0dXJuT2JqZWN0LmxlbkJsb2NrLmxlbmd0aCA+IDApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybk9iamVjdC5lcnJvciA9IFwiVHlwZSBbVU5JVkVSU0FMIDBdIGlzIHJlc2VydmVkXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IC0xLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiByZXR1cm5PYmplY3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3QVNOMVR5cGUgPSB0eXBlU3RvcmUuRW5kT2ZDb250ZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIG5ld0FTTjFUeXBlID0gdHlwZVN0b3JlLkJvb2xlYW47XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3QVNOMVR5cGUgPSB0eXBlU3RvcmUuSW50ZWdlcjtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICBuZXdBU04xVHlwZSA9IHR5cGVTdG9yZS5CaXRTdHJpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3QVNOMVR5cGUgPSB0eXBlU3RvcmUuT2N0ZXRTdHJpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3QVNOMVR5cGUgPSB0eXBlU3RvcmUuTnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNjpcclxuICAgICAgICAgICAgICAgICAgICBuZXdBU04xVHlwZSA9IHR5cGVTdG9yZS5PYmplY3RJZGVudGlmaWVyO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxMDpcclxuICAgICAgICAgICAgICAgICAgICBuZXdBU04xVHlwZSA9IHR5cGVTdG9yZS5FbnVtZXJhdGVkO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxMjpcclxuICAgICAgICAgICAgICAgICAgICBuZXdBU04xVHlwZSA9IHR5cGVTdG9yZS5VdGY4U3RyaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxMzpcclxuICAgICAgICAgICAgICAgICAgICBuZXdBU04xVHlwZSA9IHR5cGVTdG9yZS5SZWxhdGl2ZU9iamVjdElkZW50aWZpZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE0OlxyXG4gICAgICAgICAgICAgICAgICAgIG5ld0FTTjFUeXBlID0gdHlwZVN0b3JlLlRJTUU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE1OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybk9iamVjdC5lcnJvciA9IFwiW1VOSVZFUlNBTCAxNV0gaXMgcmVzZXJ2ZWQgYnkgQVNOLjEgc3RhbmRhcmRcIjtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IC0xLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IHJldHVybk9iamVjdFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE2OlxyXG4gICAgICAgICAgICAgICAgICAgIG5ld0FTTjFUeXBlID0gdHlwZVN0b3JlLlNlcXVlbmNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxNzpcclxuICAgICAgICAgICAgICAgICAgICBuZXdBU04xVHlwZSA9IHR5cGVTdG9yZS5TZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE4OlxyXG4gICAgICAgICAgICAgICAgICAgIG5ld0FTTjFUeXBlID0gdHlwZVN0b3JlLk51bWVyaWNTdHJpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE5OlxyXG4gICAgICAgICAgICAgICAgICAgIG5ld0FTTjFUeXBlID0gdHlwZVN0b3JlLlByaW50YWJsZVN0cmluZztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMjA6XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3QVNOMVR5cGUgPSB0eXBlU3RvcmUuVGVsZXRleFN0cmluZztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMjE6XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3QVNOMVR5cGUgPSB0eXBlU3RvcmUuVmlkZW90ZXhTdHJpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDIyOlxyXG4gICAgICAgICAgICAgICAgICAgIG5ld0FTTjFUeXBlID0gdHlwZVN0b3JlLklBNVN0cmluZztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMjM6XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3QVNOMVR5cGUgPSB0eXBlU3RvcmUuVVRDVGltZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMjQ6XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3QVNOMVR5cGUgPSB0eXBlU3RvcmUuR2VuZXJhbGl6ZWRUaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyNTpcclxuICAgICAgICAgICAgICAgICAgICBuZXdBU04xVHlwZSA9IHR5cGVTdG9yZS5HcmFwaGljU3RyaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyNjpcclxuICAgICAgICAgICAgICAgICAgICBuZXdBU04xVHlwZSA9IHR5cGVTdG9yZS5WaXNpYmxlU3RyaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyNzpcclxuICAgICAgICAgICAgICAgICAgICBuZXdBU04xVHlwZSA9IHR5cGVTdG9yZS5HZW5lcmFsU3RyaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyODpcclxuICAgICAgICAgICAgICAgICAgICBuZXdBU04xVHlwZSA9IHR5cGVTdG9yZS5Vbml2ZXJzYWxTdHJpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI5OlxyXG4gICAgICAgICAgICAgICAgICAgIG5ld0FTTjFUeXBlID0gdHlwZVN0b3JlLkNoYXJhY3RlclN0cmluZztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMzA6XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3QVNOMVR5cGUgPSB0eXBlU3RvcmUuQm1wU3RyaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzMTpcclxuICAgICAgICAgICAgICAgICAgICBuZXdBU04xVHlwZSA9IHR5cGVTdG9yZS5EQVRFO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzMjpcclxuICAgICAgICAgICAgICAgICAgICBuZXdBU04xVHlwZSA9IHR5cGVTdG9yZS5UaW1lT2ZEYXk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDMzOlxyXG4gICAgICAgICAgICAgICAgICAgIG5ld0FTTjFUeXBlID0gdHlwZVN0b3JlLkRhdGVUaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzNDpcclxuICAgICAgICAgICAgICAgICAgICBuZXdBU04xVHlwZSA9IHR5cGVTdG9yZS5EdXJhdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdPYmplY3QgPSByZXR1cm5PYmplY3QuaWRCbG9jay5pc0NvbnN0cnVjdGVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gbmV3IHR5cGVTdG9yZS5Db25zdHJ1Y3RlZCgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbmV3IHR5cGVTdG9yZS5QcmltaXRpdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICBuZXdPYmplY3QuaWRCbG9jayA9IHJldHVybk9iamVjdC5pZEJsb2NrO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld09iamVjdC5sZW5CbG9jayA9IHJldHVybk9iamVjdC5sZW5CbG9jaztcclxuICAgICAgICAgICAgICAgICAgICBuZXdPYmplY3Qud2FybmluZ3MgPSByZXR1cm5PYmplY3Qud2FybmluZ3M7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuT2JqZWN0ID0gbmV3T2JqZWN0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgMjpcclxuICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgIGRlZmF1bHQ6IHtcclxuICAgICAgICAgICAgbmV3QVNOMVR5cGUgPSByZXR1cm5PYmplY3QuaWRCbG9jay5pc0NvbnN0cnVjdGVkXHJcbiAgICAgICAgICAgICAgICA/IHR5cGVTdG9yZS5Db25zdHJ1Y3RlZFxyXG4gICAgICAgICAgICAgICAgOiB0eXBlU3RvcmUuUHJpbWl0aXZlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybk9iamVjdCA9IGxvY2FsQ2hhbmdlVHlwZShyZXR1cm5PYmplY3QsIG5ld0FTTjFUeXBlKTtcclxuICAgIHJlc3VsdE9mZnNldCA9IHJldHVybk9iamVjdC5mcm9tQkVSKGlucHV0QnVmZmVyLCBpbnB1dE9mZnNldCwgcmV0dXJuT2JqZWN0LmxlbkJsb2NrLmlzSW5kZWZpbml0ZUZvcm0gPyBpbnB1dExlbmd0aCA6IHJldHVybk9iamVjdC5sZW5CbG9jay5sZW5ndGgpO1xyXG4gICAgcmV0dXJuT2JqZWN0LnZhbHVlQmVmb3JlRGVjb2RlVmlldyA9IGlucHV0QnVmZmVyLnN1YmFycmF5KGluY29taW5nT2Zmc2V0LCBpbmNvbWluZ09mZnNldCArIHJldHVybk9iamVjdC5ibG9ja0xlbmd0aCk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG9mZnNldDogcmVzdWx0T2Zmc2V0LFxyXG4gICAgICAgIHJlc3VsdDogcmV0dXJuT2JqZWN0XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGZyb21CRVIoaW5wdXRCdWZmZXIpIHtcclxuICAgIGlmICghaW5wdXRCdWZmZXIuYnl0ZUxlbmd0aCkge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBCYXNlQmxvY2soe30sIFZhbHVlQmxvY2spO1xyXG4gICAgICAgIHJlc3VsdC5lcnJvciA9IFwiSW5wdXQgYnVmZmVyIGhhcyB6ZXJvIGxlbmd0aFwiO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG9mZnNldDogLTEsXHJcbiAgICAgICAgICAgIHJlc3VsdFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbG9jYWxGcm9tQkVSKHB2dHN1dGlsc19fbmFtZXNwYWNlLkJ1ZmZlclNvdXJjZUNvbnZlcnRlci50b1VpbnQ4QXJyYXkoaW5wdXRCdWZmZXIpLnNsaWNlKCksIDAsIGlucHV0QnVmZmVyLmJ5dGVMZW5ndGgpO1xyXG59XG5cbmZ1bmN0aW9uIGNoZWNrTGVuKGluZGVmaW5pdGVMZW5ndGgsIGxlbmd0aCkge1xyXG4gICAgaWYgKGluZGVmaW5pdGVMZW5ndGgpIHtcclxuICAgICAgICByZXR1cm4gMTtcclxuICAgIH1cclxuICAgIHJldHVybiBsZW5ndGg7XHJcbn1cclxuY2xhc3MgTG9jYWxDb25zdHJ1Y3RlZFZhbHVlQmxvY2sgZXh0ZW5kcyBWYWx1ZUJsb2NrIHtcclxuICAgIGNvbnN0cnVjdG9yKHsgdmFsdWUgPSBbXSwgaXNJbmRlZmluaXRlRm9ybSA9IGZhbHNlLCAuLi5wYXJhbWV0ZXJzIH0gPSB7fSkge1xyXG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMpO1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLmlzSW5kZWZpbml0ZUZvcm0gPSBpc0luZGVmaW5pdGVGb3JtO1xyXG4gICAgfVxyXG4gICAgZnJvbUJFUihpbnB1dEJ1ZmZlciwgaW5wdXRPZmZzZXQsIGlucHV0TGVuZ3RoKSB7XHJcbiAgICAgICAgY29uc3QgdmlldyA9IHB2dHN1dGlsc19fbmFtZXNwYWNlLkJ1ZmZlclNvdXJjZUNvbnZlcnRlci50b1VpbnQ4QXJyYXkoaW5wdXRCdWZmZXIpO1xyXG4gICAgICAgIGlmICghY2hlY2tCdWZmZXJQYXJhbXModGhpcywgdmlldywgaW5wdXRPZmZzZXQsIGlucHV0TGVuZ3RoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudmFsdWVCZWZvcmVEZWNvZGVWaWV3ID0gdmlldy5zdWJhcnJheShpbnB1dE9mZnNldCwgaW5wdXRPZmZzZXQgKyBpbnB1dExlbmd0aCk7XHJcbiAgICAgICAgaWYgKHRoaXMudmFsdWVCZWZvcmVEZWNvZGVWaWV3Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLndhcm5pbmdzLnB1c2goXCJaZXJvIGJ1ZmZlciBsZW5ndGhcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBpbnB1dE9mZnNldDtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGN1cnJlbnRPZmZzZXQgPSBpbnB1dE9mZnNldDtcclxuICAgICAgICB3aGlsZSAoY2hlY2tMZW4odGhpcy5pc0luZGVmaW5pdGVGb3JtLCBpbnB1dExlbmd0aCkgPiAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJldHVybk9iamVjdCA9IGxvY2FsRnJvbUJFUih2aWV3LCBjdXJyZW50T2Zmc2V0LCBpbnB1dExlbmd0aCk7XHJcbiAgICAgICAgICAgIGlmIChyZXR1cm5PYmplY3Qub2Zmc2V0ID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvciA9IHJldHVybk9iamVjdC5yZXN1bHQuZXJyb3I7XHJcbiAgICAgICAgICAgICAgICB0aGlzLndhcm5pbmdzLmNvbmNhdChyZXR1cm5PYmplY3QucmVzdWx0Lndhcm5pbmdzKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjdXJyZW50T2Zmc2V0ID0gcmV0dXJuT2JqZWN0Lm9mZnNldDtcclxuICAgICAgICAgICAgdGhpcy5ibG9ja0xlbmd0aCArPSByZXR1cm5PYmplY3QucmVzdWx0LmJsb2NrTGVuZ3RoO1xyXG4gICAgICAgICAgICBpbnB1dExlbmd0aCAtPSByZXR1cm5PYmplY3QucmVzdWx0LmJsb2NrTGVuZ3RoO1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlLnB1c2gocmV0dXJuT2JqZWN0LnJlc3VsdCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzSW5kZWZpbml0ZUZvcm0gJiYgcmV0dXJuT2JqZWN0LnJlc3VsdC5jb25zdHJ1Y3Rvci5OQU1FID09PSBFTkRfT0ZfQ09OVEVOVF9OQU1FKSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5pc0luZGVmaW5pdGVGb3JtKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlW3RoaXMudmFsdWUubGVuZ3RoIC0gMV0uY29uc3RydWN0b3IuTkFNRSA9PT0gRU5EX09GX0NPTlRFTlRfTkFNRSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZS5wb3AoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMud2FybmluZ3MucHVzaChcIk5vIEVuZE9mQ29udGVudCBibG9jayBlbmNvZGVkXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjdXJyZW50T2Zmc2V0O1xyXG4gICAgfVxyXG4gICAgdG9CRVIoc2l6ZU9ubHksIHdyaXRlcikge1xyXG4gICAgICAgIGNvbnN0IF93cml0ZXIgPSB3cml0ZXIgfHwgbmV3IFZpZXdXcml0ZXIoKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudmFsdWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy52YWx1ZVtpXS50b0JFUihzaXplT25seSwgX3dyaXRlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghd3JpdGVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfd3JpdGVyLmZpbmFsKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBFTVBUWV9CVUZGRVI7XHJcbiAgICB9XHJcbiAgICB0b0pTT04oKSB7XHJcbiAgICAgICAgY29uc3Qgb2JqZWN0ID0ge1xyXG4gICAgICAgICAgICAuLi5zdXBlci50b0pTT04oKSxcclxuICAgICAgICAgICAgaXNJbmRlZmluaXRlRm9ybTogdGhpcy5pc0luZGVmaW5pdGVGb3JtLFxyXG4gICAgICAgICAgICB2YWx1ZTogW10sXHJcbiAgICAgICAgfTtcclxuICAgICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHRoaXMudmFsdWUpIHtcclxuICAgICAgICAgICAgb2JqZWN0LnZhbHVlLnB1c2godmFsdWUudG9KU09OKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb2JqZWN0O1xyXG4gICAgfVxyXG59XHJcbkxvY2FsQ29uc3RydWN0ZWRWYWx1ZUJsb2NrLk5BTUUgPSBcIkNvbnN0cnVjdGVkVmFsdWVCbG9ja1wiO1xuXG52YXIgX2EkdjtcclxuY2xhc3MgQ29uc3RydWN0ZWQgZXh0ZW5kcyBCYXNlQmxvY2sge1xyXG4gICAgY29uc3RydWN0b3IocGFyYW1ldGVycyA9IHt9KSB7XHJcbiAgICAgICAgc3VwZXIocGFyYW1ldGVycywgTG9jYWxDb25zdHJ1Y3RlZFZhbHVlQmxvY2spO1xyXG4gICAgICAgIHRoaXMuaWRCbG9jay5pc0NvbnN0cnVjdGVkID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGZyb21CRVIoaW5wdXRCdWZmZXIsIGlucHV0T2Zmc2V0LCBpbnB1dExlbmd0aCkge1xyXG4gICAgICAgIHRoaXMudmFsdWVCbG9jay5pc0luZGVmaW5pdGVGb3JtID0gdGhpcy5sZW5CbG9jay5pc0luZGVmaW5pdGVGb3JtO1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdE9mZnNldCA9IHRoaXMudmFsdWVCbG9jay5mcm9tQkVSKGlucHV0QnVmZmVyLCBpbnB1dE9mZnNldCwgKHRoaXMubGVuQmxvY2suaXNJbmRlZmluaXRlRm9ybSkgPyBpbnB1dExlbmd0aCA6IHRoaXMubGVuQmxvY2subGVuZ3RoKTtcclxuICAgICAgICBpZiAocmVzdWx0T2Zmc2V0ID09PSAtMSkge1xyXG4gICAgICAgICAgICB0aGlzLmVycm9yID0gdGhpcy52YWx1ZUJsb2NrLmVycm9yO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0T2Zmc2V0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMuaWRCbG9jay5lcnJvci5sZW5ndGgpXHJcbiAgICAgICAgICAgIHRoaXMuYmxvY2tMZW5ndGggKz0gdGhpcy5pZEJsb2NrLmJsb2NrTGVuZ3RoO1xyXG4gICAgICAgIGlmICghdGhpcy5sZW5CbG9jay5lcnJvci5sZW5ndGgpXHJcbiAgICAgICAgICAgIHRoaXMuYmxvY2tMZW5ndGggKz0gdGhpcy5sZW5CbG9jay5ibG9ja0xlbmd0aDtcclxuICAgICAgICBpZiAoIXRoaXMudmFsdWVCbG9jay5lcnJvci5sZW5ndGgpXHJcbiAgICAgICAgICAgIHRoaXMuYmxvY2tMZW5ndGggKz0gdGhpcy52YWx1ZUJsb2NrLmJsb2NrTGVuZ3RoO1xyXG4gICAgICAgIHJldHVybiByZXN1bHRPZmZzZXQ7XHJcbiAgICB9XHJcbiAgICBvbkFzY2lpRW5jb2RpbmcoKSB7XHJcbiAgICAgICAgY29uc3QgdmFsdWVzID0gW107XHJcbiAgICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiB0aGlzLnZhbHVlQmxvY2sudmFsdWUpIHtcclxuICAgICAgICAgICAgdmFsdWVzLnB1c2godmFsdWUudG9TdHJpbmcoXCJhc2NpaVwiKS5zcGxpdChcIlxcblwiKS5tYXAobyA9PiBgICAke299YCkuam9pbihcIlxcblwiKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGJsb2NrTmFtZSA9IHRoaXMuaWRCbG9jay50YWdDbGFzcyA9PT0gM1xyXG4gICAgICAgICAgICA/IGBbJHt0aGlzLmlkQmxvY2sudGFnTnVtYmVyfV1gXHJcbiAgICAgICAgICAgIDogdGhpcy5jb25zdHJ1Y3Rvci5OQU1FO1xyXG4gICAgICAgIHJldHVybiB2YWx1ZXMubGVuZ3RoXHJcbiAgICAgICAgICAgID8gYCR7YmxvY2tOYW1lfSA6XFxuJHt2YWx1ZXMuam9pbihcIlxcblwiKX1gXHJcbiAgICAgICAgICAgIDogYCR7YmxvY2tOYW1lfSA6YDtcclxuICAgIH1cclxufVxyXG5fYSR2ID0gQ29uc3RydWN0ZWQ7XHJcbigoKSA9PiB7XHJcbiAgICB0eXBlU3RvcmUuQ29uc3RydWN0ZWQgPSBfYSR2O1xyXG59KSgpO1xyXG5Db25zdHJ1Y3RlZC5OQU1FID0gXCJDT05TVFJVQ1RFRFwiO1xuXG5jbGFzcyBMb2NhbEVuZE9mQ29udGVudFZhbHVlQmxvY2sgZXh0ZW5kcyBWYWx1ZUJsb2NrIHtcclxuICAgIGZyb21CRVIoaW5wdXRCdWZmZXIsIGlucHV0T2Zmc2V0LCBpbnB1dExlbmd0aCkge1xyXG4gICAgICAgIHJldHVybiBpbnB1dE9mZnNldDtcclxuICAgIH1cclxuICAgIHRvQkVSKHNpemVPbmx5KSB7XHJcbiAgICAgICAgcmV0dXJuIEVNUFRZX0JVRkZFUjtcclxuICAgIH1cclxufVxyXG5Mb2NhbEVuZE9mQ29udGVudFZhbHVlQmxvY2sub3ZlcnJpZGUgPSBcIkVuZE9mQ29udGVudFZhbHVlQmxvY2tcIjtcblxudmFyIF9hJHU7XHJcbmNsYXNzIEVuZE9mQ29udGVudCBleHRlbmRzIEJhc2VCbG9jayB7XHJcbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzID0ge30pIHtcclxuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzLCBMb2NhbEVuZE9mQ29udGVudFZhbHVlQmxvY2spO1xyXG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdDbGFzcyA9IDE7XHJcbiAgICAgICAgdGhpcy5pZEJsb2NrLnRhZ051bWJlciA9IDA7XHJcbiAgICB9XHJcbn1cclxuX2EkdSA9IEVuZE9mQ29udGVudDtcclxuKCgpID0+IHtcclxuICAgIHR5cGVTdG9yZS5FbmRPZkNvbnRlbnQgPSBfYSR1O1xyXG59KSgpO1xyXG5FbmRPZkNvbnRlbnQuTkFNRSA9IEVORF9PRl9DT05URU5UX05BTUU7XG5cbnZhciBfYSR0O1xyXG5jbGFzcyBOdWxsIGV4dGVuZHMgQmFzZUJsb2NrIHtcclxuICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMgPSB7fSkge1xyXG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMsIFZhbHVlQmxvY2spO1xyXG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdDbGFzcyA9IDE7XHJcbiAgICAgICAgdGhpcy5pZEJsb2NrLnRhZ051bWJlciA9IDU7XHJcbiAgICB9XHJcbiAgICBmcm9tQkVSKGlucHV0QnVmZmVyLCBpbnB1dE9mZnNldCwgaW5wdXRMZW5ndGgpIHtcclxuICAgICAgICBpZiAodGhpcy5sZW5CbG9jay5sZW5ndGggPiAwKVxyXG4gICAgICAgICAgICB0aGlzLndhcm5pbmdzLnB1c2goXCJOb24temVybyBsZW5ndGggb2YgdmFsdWUgYmxvY2sgZm9yIE51bGwgdHlwZVwiKTtcclxuICAgICAgICBpZiAoIXRoaXMuaWRCbG9jay5lcnJvci5sZW5ndGgpXHJcbiAgICAgICAgICAgIHRoaXMuYmxvY2tMZW5ndGggKz0gdGhpcy5pZEJsb2NrLmJsb2NrTGVuZ3RoO1xyXG4gICAgICAgIGlmICghdGhpcy5sZW5CbG9jay5lcnJvci5sZW5ndGgpXHJcbiAgICAgICAgICAgIHRoaXMuYmxvY2tMZW5ndGggKz0gdGhpcy5sZW5CbG9jay5ibG9ja0xlbmd0aDtcclxuICAgICAgICB0aGlzLmJsb2NrTGVuZ3RoICs9IGlucHV0TGVuZ3RoO1xyXG4gICAgICAgIGlmICgoaW5wdXRPZmZzZXQgKyBpbnB1dExlbmd0aCkgPiBpbnB1dEJ1ZmZlci5ieXRlTGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXJyb3IgPSBcIkVuZCBvZiBpbnB1dCByZWFjaGVkIGJlZm9yZSBtZXNzYWdlIHdhcyBmdWxseSBkZWNvZGVkIChpbmNvbnNpc3RlbnQgb2Zmc2V0IGFuZCBsZW5ndGggdmFsdWVzKVwiO1xyXG4gICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAoaW5wdXRPZmZzZXQgKyBpbnB1dExlbmd0aCk7XHJcbiAgICB9XHJcbiAgICB0b0JFUihzaXplT25seSwgd3JpdGVyKSB7XHJcbiAgICAgICAgY29uc3QgcmV0QnVmID0gbmV3IEFycmF5QnVmZmVyKDIpO1xyXG4gICAgICAgIGlmICghc2l6ZU9ubHkpIHtcclxuICAgICAgICAgICAgY29uc3QgcmV0VmlldyA9IG5ldyBVaW50OEFycmF5KHJldEJ1Zik7XHJcbiAgICAgICAgICAgIHJldFZpZXdbMF0gPSAweDA1O1xyXG4gICAgICAgICAgICByZXRWaWV3WzFdID0gMHgwMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHdyaXRlcikge1xyXG4gICAgICAgICAgICB3cml0ZXIud3JpdGUocmV0QnVmKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJldEJ1ZjtcclxuICAgIH1cclxuICAgIG9uQXNjaWlFbmNvZGluZygpIHtcclxuICAgICAgICByZXR1cm4gYCR7dGhpcy5jb25zdHJ1Y3Rvci5OQU1FfWA7XHJcbiAgICB9XHJcbn1cclxuX2EkdCA9IE51bGw7XHJcbigoKSA9PiB7XHJcbiAgICB0eXBlU3RvcmUuTnVsbCA9IF9hJHQ7XHJcbn0pKCk7XHJcbk51bGwuTkFNRSA9IFwiTlVMTFwiO1xuXG5jbGFzcyBMb2NhbEJvb2xlYW5WYWx1ZUJsb2NrIGV4dGVuZHMgSGV4QmxvY2soVmFsdWVCbG9jaykge1xyXG4gICAgY29uc3RydWN0b3IoeyB2YWx1ZSwgLi4ucGFyYW1ldGVycyB9ID0ge30pIHtcclxuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcclxuICAgICAgICBpZiAocGFyYW1ldGVycy52YWx1ZUhleCkge1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlSGV4VmlldyA9IHB2dHN1dGlsc19fbmFtZXNwYWNlLkJ1ZmZlclNvdXJjZUNvbnZlcnRlci50b1VpbnQ4QXJyYXkocGFyYW1ldGVycy52YWx1ZUhleCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlSGV4VmlldyA9IG5ldyBVaW50OEFycmF5KDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldCB2YWx1ZSgpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IG9jdGV0IG9mIHRoaXMudmFsdWVIZXhWaWV3KSB7XHJcbiAgICAgICAgICAgIGlmIChvY3RldCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHNldCB2YWx1ZSh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMudmFsdWVIZXhWaWV3WzBdID0gdmFsdWUgPyAweEZGIDogMHgwMDtcclxuICAgIH1cclxuICAgIGZyb21CRVIoaW5wdXRCdWZmZXIsIGlucHV0T2Zmc2V0LCBpbnB1dExlbmd0aCkge1xyXG4gICAgICAgIGNvbnN0IGlucHV0VmlldyA9IHB2dHN1dGlsc19fbmFtZXNwYWNlLkJ1ZmZlclNvdXJjZUNvbnZlcnRlci50b1VpbnQ4QXJyYXkoaW5wdXRCdWZmZXIpO1xyXG4gICAgICAgIGlmICghY2hlY2tCdWZmZXJQYXJhbXModGhpcywgaW5wdXRWaWV3LCBpbnB1dE9mZnNldCwgaW5wdXRMZW5ndGgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy52YWx1ZUhleFZpZXcgPSBpbnB1dFZpZXcuc3ViYXJyYXkoaW5wdXRPZmZzZXQsIGlucHV0T2Zmc2V0ICsgaW5wdXRMZW5ndGgpO1xyXG4gICAgICAgIGlmIChpbnB1dExlbmd0aCA+IDEpXHJcbiAgICAgICAgICAgIHRoaXMud2FybmluZ3MucHVzaChcIkJvb2xlYW4gdmFsdWUgZW5jb2RlZCBpbiBtb3JlIHRoZW4gMSBvY3RldFwiKTtcclxuICAgICAgICB0aGlzLmlzSGV4T25seSA9IHRydWU7XHJcbiAgICAgICAgcHZ1dGlsc19fbmFtZXNwYWNlLnV0aWxEZWNvZGVUQy5jYWxsKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuYmxvY2tMZW5ndGggPSBpbnB1dExlbmd0aDtcclxuICAgICAgICByZXR1cm4gKGlucHV0T2Zmc2V0ICsgaW5wdXRMZW5ndGgpO1xyXG4gICAgfVxyXG4gICAgdG9CRVIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVIZXhWaWV3LnNsaWNlKCk7XHJcbiAgICB9XHJcbiAgICB0b0pTT04oKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgLi4uc3VwZXIudG9KU09OKCksXHJcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLnZhbHVlLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuTG9jYWxCb29sZWFuVmFsdWVCbG9jay5OQU1FID0gXCJCb29sZWFuVmFsdWVCbG9ja1wiO1xuXG52YXIgX2EkcztcclxuY2xhc3MgQm9vbGVhbiBleHRlbmRzIEJhc2VCbG9jayB7XHJcbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzID0ge30pIHtcclxuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzLCBMb2NhbEJvb2xlYW5WYWx1ZUJsb2NrKTtcclxuICAgICAgICB0aGlzLmlkQmxvY2sudGFnQ2xhc3MgPSAxO1xyXG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdOdW1iZXIgPSAxO1xyXG4gICAgfVxyXG4gICAgZ2V0VmFsdWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVCbG9jay52YWx1ZTtcclxuICAgIH1cclxuICAgIHNldFZhbHVlKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy52YWx1ZUJsb2NrLnZhbHVlID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBvbkFzY2lpRW5jb2RpbmcoKSB7XHJcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuY29uc3RydWN0b3IuTkFNRX0gOiAke3RoaXMuZ2V0VmFsdWV9YDtcclxuICAgIH1cclxufVxyXG5fYSRzID0gQm9vbGVhbjtcclxuKCgpID0+IHtcclxuICAgIHR5cGVTdG9yZS5Cb29sZWFuID0gX2EkcztcclxufSkoKTtcclxuQm9vbGVhbi5OQU1FID0gXCJCT09MRUFOXCI7XG5cbmNsYXNzIExvY2FsT2N0ZXRTdHJpbmdWYWx1ZUJsb2NrIGV4dGVuZHMgSGV4QmxvY2soTG9jYWxDb25zdHJ1Y3RlZFZhbHVlQmxvY2spIHtcclxuICAgIGNvbnN0cnVjdG9yKHsgaXNDb25zdHJ1Y3RlZCA9IGZhbHNlLCAuLi5wYXJhbWV0ZXJzIH0gPSB7fSkge1xyXG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMpO1xyXG4gICAgICAgIHRoaXMuaXNDb25zdHJ1Y3RlZCA9IGlzQ29uc3RydWN0ZWQ7XHJcbiAgICB9XHJcbiAgICBmcm9tQkVSKGlucHV0QnVmZmVyLCBpbnB1dE9mZnNldCwgaW5wdXRMZW5ndGgpIHtcclxuICAgICAgICBsZXQgcmVzdWx0T2Zmc2V0ID0gMDtcclxuICAgICAgICBpZiAodGhpcy5pc0NvbnN0cnVjdGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNIZXhPbmx5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJlc3VsdE9mZnNldCA9IExvY2FsQ29uc3RydWN0ZWRWYWx1ZUJsb2NrLnByb3RvdHlwZS5mcm9tQkVSLmNhbGwodGhpcywgaW5wdXRCdWZmZXIsIGlucHV0T2Zmc2V0LCBpbnB1dExlbmd0aCk7XHJcbiAgICAgICAgICAgIGlmIChyZXN1bHRPZmZzZXQgPT09IC0xKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdE9mZnNldDtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnZhbHVlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50QmxvY2tOYW1lID0gdGhpcy52YWx1ZVtpXS5jb25zdHJ1Y3Rvci5OQU1FO1xyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRCbG9ja05hbWUgPT09IEVORF9PRl9DT05URU5UX05BTUUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0luZGVmaW5pdGVGb3JtKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvciA9IFwiRW5kT2ZDb250ZW50IGlzIHVuZXhwZWN0ZWQsIE9DVEVUIFNUUklORyBtYXkgY29uc2lzdHMgb2YgT0NURVQgU1RSSU5HcyBvbmx5XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudEJsb2NrTmFtZSAhPT0gT0NURVRfU1RSSU5HX05BTUUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yID0gXCJPQ1RFVCBTVFJJTkcgbWF5IGNvbnNpc3RzIG9mIE9DVEVUIFNUUklOR3Mgb25seVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5pc0hleE9ubHkgPSB0cnVlO1xyXG4gICAgICAgICAgICByZXN1bHRPZmZzZXQgPSBzdXBlci5mcm9tQkVSKGlucHV0QnVmZmVyLCBpbnB1dE9mZnNldCwgaW5wdXRMZW5ndGgpO1xyXG4gICAgICAgICAgICB0aGlzLmJsb2NrTGVuZ3RoID0gaW5wdXRMZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHRPZmZzZXQ7XHJcbiAgICB9XHJcbiAgICB0b0JFUihzaXplT25seSwgd3JpdGVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNDb25zdHJ1Y3RlZClcclxuICAgICAgICAgICAgcmV0dXJuIExvY2FsQ29uc3RydWN0ZWRWYWx1ZUJsb2NrLnByb3RvdHlwZS50b0JFUi5jYWxsKHRoaXMsIHNpemVPbmx5LCB3cml0ZXIpO1xyXG4gICAgICAgIHJldHVybiBzaXplT25seVxyXG4gICAgICAgICAgICA/IG5ldyBBcnJheUJ1ZmZlcih0aGlzLnZhbHVlSGV4Vmlldy5ieXRlTGVuZ3RoKVxyXG4gICAgICAgICAgICA6IHRoaXMudmFsdWVIZXhWaWV3LnNsaWNlKCkuYnVmZmVyO1xyXG4gICAgfVxyXG4gICAgdG9KU09OKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIC4uLnN1cGVyLnRvSlNPTigpLFxyXG4gICAgICAgICAgICBpc0NvbnN0cnVjdGVkOiB0aGlzLmlzQ29uc3RydWN0ZWQsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5Mb2NhbE9jdGV0U3RyaW5nVmFsdWVCbG9jay5OQU1FID0gXCJPY3RldFN0cmluZ1ZhbHVlQmxvY2tcIjtcblxudmFyIF9hJHI7XHJcbmNsYXNzIE9jdGV0U3RyaW5nIGV4dGVuZHMgQmFzZUJsb2NrIHtcclxuICAgIGNvbnN0cnVjdG9yKHsgaWRCbG9jayA9IHt9LCBsZW5CbG9jayA9IHt9LCAuLi5wYXJhbWV0ZXJzIH0gPSB7fSkge1xyXG4gICAgICAgIHZhciBfYiwgX2M7XHJcbiAgICAgICAgKF9iID0gcGFyYW1ldGVycy5pc0NvbnN0cnVjdGVkKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAocGFyYW1ldGVycy5pc0NvbnN0cnVjdGVkID0gISEoKF9jID0gcGFyYW1ldGVycy52YWx1ZSkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmxlbmd0aCkpO1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgaWRCbG9jazoge1xyXG4gICAgICAgICAgICAgICAgaXNDb25zdHJ1Y3RlZDogcGFyYW1ldGVycy5pc0NvbnN0cnVjdGVkLFxyXG4gICAgICAgICAgICAgICAgLi4uaWRCbG9jayxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbGVuQmxvY2s6IHtcclxuICAgICAgICAgICAgICAgIC4uLmxlbkJsb2NrLFxyXG4gICAgICAgICAgICAgICAgaXNJbmRlZmluaXRlRm9ybTogISFwYXJhbWV0ZXJzLmlzSW5kZWZpbml0ZUZvcm0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC4uLnBhcmFtZXRlcnMsXHJcbiAgICAgICAgfSwgTG9jYWxPY3RldFN0cmluZ1ZhbHVlQmxvY2spO1xyXG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdDbGFzcyA9IDE7XHJcbiAgICAgICAgdGhpcy5pZEJsb2NrLnRhZ051bWJlciA9IDQ7XHJcbiAgICB9XHJcbiAgICBmcm9tQkVSKGlucHV0QnVmZmVyLCBpbnB1dE9mZnNldCwgaW5wdXRMZW5ndGgpIHtcclxuICAgICAgICB0aGlzLnZhbHVlQmxvY2suaXNDb25zdHJ1Y3RlZCA9IHRoaXMuaWRCbG9jay5pc0NvbnN0cnVjdGVkO1xyXG4gICAgICAgIHRoaXMudmFsdWVCbG9jay5pc0luZGVmaW5pdGVGb3JtID0gdGhpcy5sZW5CbG9jay5pc0luZGVmaW5pdGVGb3JtO1xyXG4gICAgICAgIGlmIChpbnB1dExlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pZEJsb2NrLmVycm9yLmxlbmd0aCA9PT0gMClcclxuICAgICAgICAgICAgICAgIHRoaXMuYmxvY2tMZW5ndGggKz0gdGhpcy5pZEJsb2NrLmJsb2NrTGVuZ3RoO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5sZW5CbG9jay5lcnJvci5sZW5ndGggPT09IDApXHJcbiAgICAgICAgICAgICAgICB0aGlzLmJsb2NrTGVuZ3RoICs9IHRoaXMubGVuQmxvY2suYmxvY2tMZW5ndGg7XHJcbiAgICAgICAgICAgIHJldHVybiBpbnB1dE9mZnNldDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLnZhbHVlQmxvY2suaXNDb25zdHJ1Y3RlZCkge1xyXG4gICAgICAgICAgICBjb25zdCB2aWV3ID0gaW5wdXRCdWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciA/IG5ldyBVaW50OEFycmF5KGlucHV0QnVmZmVyKSA6IGlucHV0QnVmZmVyO1xyXG4gICAgICAgICAgICBjb25zdCBidWYgPSB2aWV3LnN1YmFycmF5KGlucHV0T2Zmc2V0LCBpbnB1dE9mZnNldCArIGlucHV0TGVuZ3RoKTtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGlmIChidWYuYnl0ZUxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFzbiA9IGxvY2FsRnJvbUJFUihidWYsIDAsIGJ1Zi5ieXRlTGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXNuLm9mZnNldCAhPT0gLTEgJiYgYXNuLm9mZnNldCA9PT0gaW5wdXRMZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZUJsb2NrLnZhbHVlID0gW2Fzbi5yZXN1bHRdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzdXBlci5mcm9tQkVSKGlucHV0QnVmZmVyLCBpbnB1dE9mZnNldCwgaW5wdXRMZW5ndGgpO1xyXG4gICAgfVxyXG4gICAgb25Bc2NpaUVuY29kaW5nKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnZhbHVlQmxvY2suaXNDb25zdHJ1Y3RlZCB8fCAodGhpcy52YWx1ZUJsb2NrLnZhbHVlICYmIHRoaXMudmFsdWVCbG9jay52YWx1ZS5sZW5ndGgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBDb25zdHJ1Y3RlZC5wcm90b3R5cGUub25Bc2NpaUVuY29kaW5nLmNhbGwodGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBgJHt0aGlzLmNvbnN0cnVjdG9yLk5BTUV9IDogJHtwdnRzdXRpbHNfX25hbWVzcGFjZS5Db252ZXJ0LlRvSGV4KHRoaXMudmFsdWVCbG9jay52YWx1ZUhleFZpZXcpfWA7XHJcbiAgICB9XHJcbiAgICBnZXRWYWx1ZSgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaWRCbG9jay5pc0NvbnN0cnVjdGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlQmxvY2sudmFsdWVIZXhWaWV3LnNsaWNlKCkuYnVmZmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBhcnJheSA9IFtdO1xyXG4gICAgICAgIGZvciAoY29uc3QgY29udGVudCBvZiB0aGlzLnZhbHVlQmxvY2sudmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKGNvbnRlbnQgaW5zdGFuY2VvZiBPY3RldFN0cmluZykge1xyXG4gICAgICAgICAgICAgICAgYXJyYXkucHVzaChjb250ZW50LnZhbHVlQmxvY2sudmFsdWVIZXhWaWV3KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcHZ0c3V0aWxzX19uYW1lc3BhY2UuQnVmZmVyU291cmNlQ29udmVydGVyLmNvbmNhdChhcnJheSk7XHJcbiAgICB9XHJcbn1cclxuX2EkciA9IE9jdGV0U3RyaW5nO1xyXG4oKCkgPT4ge1xyXG4gICAgdHlwZVN0b3JlLk9jdGV0U3RyaW5nID0gX2EkcjtcclxufSkoKTtcclxuT2N0ZXRTdHJpbmcuTkFNRSA9IE9DVEVUX1NUUklOR19OQU1FO1xuXG5jbGFzcyBMb2NhbEJpdFN0cmluZ1ZhbHVlQmxvY2sgZXh0ZW5kcyBIZXhCbG9jayhMb2NhbENvbnN0cnVjdGVkVmFsdWVCbG9jaykge1xyXG4gICAgY29uc3RydWN0b3IoeyB1bnVzZWRCaXRzID0gMCwgaXNDb25zdHJ1Y3RlZCA9IGZhbHNlLCAuLi5wYXJhbWV0ZXJzIH0gPSB7fSkge1xyXG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMpO1xyXG4gICAgICAgIHRoaXMudW51c2VkQml0cyA9IHVudXNlZEJpdHM7XHJcbiAgICAgICAgdGhpcy5pc0NvbnN0cnVjdGVkID0gaXNDb25zdHJ1Y3RlZDtcclxuICAgICAgICB0aGlzLmJsb2NrTGVuZ3RoID0gdGhpcy52YWx1ZUhleFZpZXcuYnl0ZUxlbmd0aDtcclxuICAgIH1cclxuICAgIGZyb21CRVIoaW5wdXRCdWZmZXIsIGlucHV0T2Zmc2V0LCBpbnB1dExlbmd0aCkge1xyXG4gICAgICAgIGlmICghaW5wdXRMZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGlucHV0T2Zmc2V0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgcmVzdWx0T2Zmc2V0ID0gLTE7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNDb25zdHJ1Y3RlZCkge1xyXG4gICAgICAgICAgICByZXN1bHRPZmZzZXQgPSBMb2NhbENvbnN0cnVjdGVkVmFsdWVCbG9jay5wcm90b3R5cGUuZnJvbUJFUi5jYWxsKHRoaXMsIGlucHV0QnVmZmVyLCBpbnB1dE9mZnNldCwgaW5wdXRMZW5ndGgpO1xyXG4gICAgICAgICAgICBpZiAocmVzdWx0T2Zmc2V0ID09PSAtMSlcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRPZmZzZXQ7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgdmFsdWUgb2YgdGhpcy52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudEJsb2NrTmFtZSA9IHZhbHVlLmNvbnN0cnVjdG9yLk5BTUU7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudEJsb2NrTmFtZSA9PT0gRU5EX09GX0NPTlRFTlRfTkFNRSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzSW5kZWZpbml0ZUZvcm0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yID0gXCJFbmRPZkNvbnRlbnQgaXMgdW5leHBlY3RlZCwgQklUIFNUUklORyBtYXkgY29uc2lzdHMgb2YgQklUIFNUUklOR3Mgb25seVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRCbG9ja05hbWUgIT09IEJJVF9TVFJJTkdfTkFNRSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IgPSBcIkJJVCBTVFJJTkcgbWF5IGNvbnNpc3RzIG9mIEJJVCBTVFJJTkdzIG9ubHlcIjtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZUJsb2NrID0gdmFsdWUudmFsdWVCbG9jaztcclxuICAgICAgICAgICAgICAgIGlmICgodGhpcy51bnVzZWRCaXRzID4gMCkgJiYgKHZhbHVlQmxvY2sudW51c2VkQml0cyA+IDApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvciA9IFwiVXNpbmcgb2YgXFxcInVudXNlZCBiaXRzXFxcIiBpbnNpZGUgY29uc3RydWN0aXZlIEJJVCBTVFJJTkcgYWxsb3dlZCBmb3IgbGVhc3Qgb25lIG9ubHlcIjtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVudXNlZEJpdHMgPSB2YWx1ZUJsb2NrLnVudXNlZEJpdHM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdE9mZnNldDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgaW5wdXRWaWV3ID0gcHZ0c3V0aWxzX19uYW1lc3BhY2UuQnVmZmVyU291cmNlQ29udmVydGVyLnRvVWludDhBcnJheShpbnB1dEJ1ZmZlcik7XHJcbiAgICAgICAgaWYgKCFjaGVja0J1ZmZlclBhcmFtcyh0aGlzLCBpbnB1dFZpZXcsIGlucHV0T2Zmc2V0LCBpbnB1dExlbmd0aCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBpbnRCdWZmZXIgPSBpbnB1dFZpZXcuc3ViYXJyYXkoaW5wdXRPZmZzZXQsIGlucHV0T2Zmc2V0ICsgaW5wdXRMZW5ndGgpO1xyXG4gICAgICAgIHRoaXMudW51c2VkQml0cyA9IGludEJ1ZmZlclswXTtcclxuICAgICAgICBpZiAodGhpcy51bnVzZWRCaXRzID4gNykge1xyXG4gICAgICAgICAgICB0aGlzLmVycm9yID0gXCJVbnVzZWQgYml0cyBmb3IgQml0U3RyaW5nIG11c3QgYmUgaW4gcmFuZ2UgMC03XCI7XHJcbiAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLnVudXNlZEJpdHMpIHtcclxuICAgICAgICAgICAgY29uc3QgYnVmID0gaW50QnVmZmVyLnN1YmFycmF5KDEpO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGJ1Zi5ieXRlTGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXNuID0gbG9jYWxGcm9tQkVSKGJ1ZiwgMCwgYnVmLmJ5dGVMZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhc24ub2Zmc2V0ICE9PSAtMSAmJiBhc24ub2Zmc2V0ID09PSAoaW5wdXRMZW5ndGggLSAxKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gW2Fzbi5yZXN1bHRdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudmFsdWVIZXhWaWV3ID0gaW50QnVmZmVyLnN1YmFycmF5KDEpO1xyXG4gICAgICAgIHRoaXMuYmxvY2tMZW5ndGggPSBpbnRCdWZmZXIubGVuZ3RoO1xyXG4gICAgICAgIHJldHVybiAoaW5wdXRPZmZzZXQgKyBpbnB1dExlbmd0aCk7XHJcbiAgICB9XHJcbiAgICB0b0JFUihzaXplT25seSwgd3JpdGVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNDb25zdHJ1Y3RlZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gTG9jYWxDb25zdHJ1Y3RlZFZhbHVlQmxvY2sucHJvdG90eXBlLnRvQkVSLmNhbGwodGhpcywgc2l6ZU9ubHksIHdyaXRlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzaXplT25seSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEFycmF5QnVmZmVyKHRoaXMudmFsdWVIZXhWaWV3LmJ5dGVMZW5ndGggKyAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLnZhbHVlSGV4Vmlldy5ieXRlTGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBFTVBUWV9CVUZGRVI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJldFZpZXcgPSBuZXcgVWludDhBcnJheSh0aGlzLnZhbHVlSGV4Vmlldy5sZW5ndGggKyAxKTtcclxuICAgICAgICByZXRWaWV3WzBdID0gdGhpcy51bnVzZWRCaXRzO1xyXG4gICAgICAgIHJldFZpZXcuc2V0KHRoaXMudmFsdWVIZXhWaWV3LCAxKTtcclxuICAgICAgICByZXR1cm4gcmV0Vmlldy5idWZmZXI7XHJcbiAgICB9XHJcbiAgICB0b0pTT04oKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgLi4uc3VwZXIudG9KU09OKCksXHJcbiAgICAgICAgICAgIHVudXNlZEJpdHM6IHRoaXMudW51c2VkQml0cyxcclxuICAgICAgICAgICAgaXNDb25zdHJ1Y3RlZDogdGhpcy5pc0NvbnN0cnVjdGVkLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuTG9jYWxCaXRTdHJpbmdWYWx1ZUJsb2NrLk5BTUUgPSBcIkJpdFN0cmluZ1ZhbHVlQmxvY2tcIjtcblxudmFyIF9hJHE7XHJcbmNsYXNzIEJpdFN0cmluZyBleHRlbmRzIEJhc2VCbG9jayB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7IGlkQmxvY2sgPSB7fSwgbGVuQmxvY2sgPSB7fSwgLi4ucGFyYW1ldGVycyB9ID0ge30pIHtcclxuICAgICAgICB2YXIgX2IsIF9jO1xyXG4gICAgICAgIChfYiA9IHBhcmFtZXRlcnMuaXNDb25zdHJ1Y3RlZCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogKHBhcmFtZXRlcnMuaXNDb25zdHJ1Y3RlZCA9ICEhKChfYyA9IHBhcmFtZXRlcnMudmFsdWUpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5sZW5ndGgpKTtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGlkQmxvY2s6IHtcclxuICAgICAgICAgICAgICAgIGlzQ29uc3RydWN0ZWQ6IHBhcmFtZXRlcnMuaXNDb25zdHJ1Y3RlZCxcclxuICAgICAgICAgICAgICAgIC4uLmlkQmxvY2ssXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxlbkJsb2NrOiB7XHJcbiAgICAgICAgICAgICAgICAuLi5sZW5CbG9jayxcclxuICAgICAgICAgICAgICAgIGlzSW5kZWZpbml0ZUZvcm06ICEhcGFyYW1ldGVycy5pc0luZGVmaW5pdGVGb3JtLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAuLi5wYXJhbWV0ZXJzLFxyXG4gICAgICAgIH0sIExvY2FsQml0U3RyaW5nVmFsdWVCbG9jayk7XHJcbiAgICAgICAgdGhpcy5pZEJsb2NrLnRhZ0NsYXNzID0gMTtcclxuICAgICAgICB0aGlzLmlkQmxvY2sudGFnTnVtYmVyID0gMztcclxuICAgIH1cclxuICAgIGZyb21CRVIoaW5wdXRCdWZmZXIsIGlucHV0T2Zmc2V0LCBpbnB1dExlbmd0aCkge1xyXG4gICAgICAgIHRoaXMudmFsdWVCbG9jay5pc0NvbnN0cnVjdGVkID0gdGhpcy5pZEJsb2NrLmlzQ29uc3RydWN0ZWQ7XHJcbiAgICAgICAgdGhpcy52YWx1ZUJsb2NrLmlzSW5kZWZpbml0ZUZvcm0gPSB0aGlzLmxlbkJsb2NrLmlzSW5kZWZpbml0ZUZvcm07XHJcbiAgICAgICAgcmV0dXJuIHN1cGVyLmZyb21CRVIoaW5wdXRCdWZmZXIsIGlucHV0T2Zmc2V0LCBpbnB1dExlbmd0aCk7XHJcbiAgICB9XHJcbiAgICBvbkFzY2lpRW5jb2RpbmcoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudmFsdWVCbG9jay5pc0NvbnN0cnVjdGVkIHx8ICh0aGlzLnZhbHVlQmxvY2sudmFsdWUgJiYgdGhpcy52YWx1ZUJsb2NrLnZhbHVlLmxlbmd0aCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIENvbnN0cnVjdGVkLnByb3RvdHlwZS5vbkFzY2lpRW5jb2RpbmcuY2FsbCh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJpdHMgPSBbXTtcclxuICAgICAgICAgICAgY29uc3QgdmFsdWVIZXggPSB0aGlzLnZhbHVlQmxvY2sudmFsdWVIZXhWaWV3O1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGJ5dGUgb2YgdmFsdWVIZXgpIHtcclxuICAgICAgICAgICAgICAgIGJpdHMucHVzaChieXRlLnRvU3RyaW5nKDIpLnBhZFN0YXJ0KDgsIFwiMFwiKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgYml0c1N0ciA9IGJpdHMuam9pbihcIlwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIGAke3RoaXMuY29uc3RydWN0b3IuTkFNRX0gOiAke2JpdHNTdHIuc3Vic3RyaW5nKDAsIGJpdHNTdHIubGVuZ3RoIC0gdGhpcy52YWx1ZUJsb2NrLnVudXNlZEJpdHMpfWA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbl9hJHEgPSBCaXRTdHJpbmc7XHJcbigoKSA9PiB7XHJcbiAgICB0eXBlU3RvcmUuQml0U3RyaW5nID0gX2EkcTtcclxufSkoKTtcclxuQml0U3RyaW5nLk5BTUUgPSBCSVRfU1RSSU5HX05BTUU7XG5cbnZhciBfYSRwO1xyXG5mdW5jdGlvbiB2aWV3QWRkKGZpcnN0LCBzZWNvbmQpIHtcclxuICAgIGNvbnN0IGMgPSBuZXcgVWludDhBcnJheShbMF0pO1xyXG4gICAgY29uc3QgZmlyc3RWaWV3ID0gbmV3IFVpbnQ4QXJyYXkoZmlyc3QpO1xyXG4gICAgY29uc3Qgc2Vjb25kVmlldyA9IG5ldyBVaW50OEFycmF5KHNlY29uZCk7XHJcbiAgICBsZXQgZmlyc3RWaWV3Q29weSA9IGZpcnN0Vmlldy5zbGljZSgwKTtcclxuICAgIGNvbnN0IGZpcnN0Vmlld0NvcHlMZW5ndGggPSBmaXJzdFZpZXdDb3B5Lmxlbmd0aCAtIDE7XHJcbiAgICBjb25zdCBzZWNvbmRWaWV3Q29weSA9IHNlY29uZFZpZXcuc2xpY2UoMCk7XHJcbiAgICBjb25zdCBzZWNvbmRWaWV3Q29weUxlbmd0aCA9IHNlY29uZFZpZXdDb3B5Lmxlbmd0aCAtIDE7XHJcbiAgICBsZXQgdmFsdWUgPSAwO1xyXG4gICAgY29uc3QgbWF4ID0gKHNlY29uZFZpZXdDb3B5TGVuZ3RoIDwgZmlyc3RWaWV3Q29weUxlbmd0aCkgPyBmaXJzdFZpZXdDb3B5TGVuZ3RoIDogc2Vjb25kVmlld0NvcHlMZW5ndGg7XHJcbiAgICBsZXQgY291bnRlciA9IDA7XHJcbiAgICBmb3IgKGxldCBpID0gbWF4OyBpID49IDA7IGktLSwgY291bnRlcisrKSB7XHJcbiAgICAgICAgc3dpdGNoICh0cnVlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgKGNvdW50ZXIgPCBzZWNvbmRWaWV3Q29weS5sZW5ndGgpOlxyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBmaXJzdFZpZXdDb3B5W2ZpcnN0Vmlld0NvcHlMZW5ndGggLSBjb3VudGVyXSArIHNlY29uZFZpZXdDb3B5W3NlY29uZFZpZXdDb3B5TGVuZ3RoIC0gY291bnRlcl0gKyBjWzBdO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGZpcnN0Vmlld0NvcHlbZmlyc3RWaWV3Q29weUxlbmd0aCAtIGNvdW50ZXJdICsgY1swXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY1swXSA9IHZhbHVlIC8gMTA7XHJcbiAgICAgICAgc3dpdGNoICh0cnVlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgKGNvdW50ZXIgPj0gZmlyc3RWaWV3Q29weS5sZW5ndGgpOlxyXG4gICAgICAgICAgICAgICAgZmlyc3RWaWV3Q29weSA9IHB2dXRpbHNfX25hbWVzcGFjZS51dGlsQ29uY2F0VmlldyhuZXcgVWludDhBcnJheShbdmFsdWUgJSAxMF0pLCBmaXJzdFZpZXdDb3B5KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgZmlyc3RWaWV3Q29weVtmaXJzdFZpZXdDb3B5TGVuZ3RoIC0gY291bnRlcl0gPSB2YWx1ZSAlIDEwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChjWzBdID4gMClcclxuICAgICAgICBmaXJzdFZpZXdDb3B5ID0gcHZ1dGlsc19fbmFtZXNwYWNlLnV0aWxDb25jYXRWaWV3KGMsIGZpcnN0Vmlld0NvcHkpO1xyXG4gICAgcmV0dXJuIGZpcnN0Vmlld0NvcHk7XHJcbn1cclxuZnVuY3Rpb24gcG93ZXIyKG4pIHtcclxuICAgIGlmIChuID49IHBvd2VyczIubGVuZ3RoKSB7XHJcbiAgICAgICAgZm9yIChsZXQgcCA9IHBvd2VyczIubGVuZ3RoOyBwIDw9IG47IHArKykge1xyXG4gICAgICAgICAgICBjb25zdCBjID0gbmV3IFVpbnQ4QXJyYXkoWzBdKTtcclxuICAgICAgICAgICAgbGV0IGRpZ2l0cyA9IChwb3dlcnMyW3AgLSAxXSkuc2xpY2UoMCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAoZGlnaXRzLmxlbmd0aCAtIDEpOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV3VmFsdWUgPSBuZXcgVWludDhBcnJheShbKGRpZ2l0c1tpXSA8PCAxKSArIGNbMF1dKTtcclxuICAgICAgICAgICAgICAgIGNbMF0gPSBuZXdWYWx1ZVswXSAvIDEwO1xyXG4gICAgICAgICAgICAgICAgZGlnaXRzW2ldID0gbmV3VmFsdWVbMF0gJSAxMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY1swXSA+IDApXHJcbiAgICAgICAgICAgICAgICBkaWdpdHMgPSBwdnV0aWxzX19uYW1lc3BhY2UudXRpbENvbmNhdFZpZXcoYywgZGlnaXRzKTtcclxuICAgICAgICAgICAgcG93ZXJzMi5wdXNoKGRpZ2l0cyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBvd2VyczJbbl07XHJcbn1cclxuZnVuY3Rpb24gdmlld1N1YihmaXJzdCwgc2Vjb25kKSB7XHJcbiAgICBsZXQgYiA9IDA7XHJcbiAgICBjb25zdCBmaXJzdFZpZXcgPSBuZXcgVWludDhBcnJheShmaXJzdCk7XHJcbiAgICBjb25zdCBzZWNvbmRWaWV3ID0gbmV3IFVpbnQ4QXJyYXkoc2Vjb25kKTtcclxuICAgIGNvbnN0IGZpcnN0Vmlld0NvcHkgPSBmaXJzdFZpZXcuc2xpY2UoMCk7XHJcbiAgICBjb25zdCBmaXJzdFZpZXdDb3B5TGVuZ3RoID0gZmlyc3RWaWV3Q29weS5sZW5ndGggLSAxO1xyXG4gICAgY29uc3Qgc2Vjb25kVmlld0NvcHkgPSBzZWNvbmRWaWV3LnNsaWNlKDApO1xyXG4gICAgY29uc3Qgc2Vjb25kVmlld0NvcHlMZW5ndGggPSBzZWNvbmRWaWV3Q29weS5sZW5ndGggLSAxO1xyXG4gICAgbGV0IHZhbHVlO1xyXG4gICAgbGV0IGNvdW50ZXIgPSAwO1xyXG4gICAgZm9yIChsZXQgaSA9IHNlY29uZFZpZXdDb3B5TGVuZ3RoOyBpID49IDA7IGktLSwgY291bnRlcisrKSB7XHJcbiAgICAgICAgdmFsdWUgPSBmaXJzdFZpZXdDb3B5W2ZpcnN0Vmlld0NvcHlMZW5ndGggLSBjb3VudGVyXSAtIHNlY29uZFZpZXdDb3B5W3NlY29uZFZpZXdDb3B5TGVuZ3RoIC0gY291bnRlcl0gLSBiO1xyXG4gICAgICAgIHN3aXRjaCAodHJ1ZSkge1xyXG4gICAgICAgICAgICBjYXNlICh2YWx1ZSA8IDApOlxyXG4gICAgICAgICAgICAgICAgYiA9IDE7XHJcbiAgICAgICAgICAgICAgICBmaXJzdFZpZXdDb3B5W2ZpcnN0Vmlld0NvcHlMZW5ndGggLSBjb3VudGVyXSA9IHZhbHVlICsgMTA7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGIgPSAwO1xyXG4gICAgICAgICAgICAgICAgZmlyc3RWaWV3Q29weVtmaXJzdFZpZXdDb3B5TGVuZ3RoIC0gY291bnRlcl0gPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoYiA+IDApIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gKGZpcnN0Vmlld0NvcHlMZW5ndGggLSBzZWNvbmRWaWV3Q29weUxlbmd0aCArIDEpOyBpID49IDA7IGktLSwgY291bnRlcisrKSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gZmlyc3RWaWV3Q29weVtmaXJzdFZpZXdDb3B5TGVuZ3RoIC0gY291bnRlcl0gLSBiO1xyXG4gICAgICAgICAgICBpZiAodmFsdWUgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICBiID0gMTtcclxuICAgICAgICAgICAgICAgIGZpcnN0Vmlld0NvcHlbZmlyc3RWaWV3Q29weUxlbmd0aCAtIGNvdW50ZXJdID0gdmFsdWUgKyAxMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGIgPSAwO1xyXG4gICAgICAgICAgICAgICAgZmlyc3RWaWV3Q29weVtmaXJzdFZpZXdDb3B5TGVuZ3RoIC0gY291bnRlcl0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZpcnN0Vmlld0NvcHkuc2xpY2UoKTtcclxufVxyXG5jbGFzcyBMb2NhbEludGVnZXJWYWx1ZUJsb2NrIGV4dGVuZHMgSGV4QmxvY2soVmFsdWVCbG9jaykge1xyXG4gICAgY29uc3RydWN0b3IoeyB2YWx1ZSwgLi4ucGFyYW1ldGVycyB9ID0ge30pIHtcclxuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcclxuICAgICAgICB0aGlzLl92YWx1ZURlYyA9IDA7XHJcbiAgICAgICAgaWYgKHBhcmFtZXRlcnMudmFsdWVIZXgpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZUhleCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlRGVjID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2V0VmFsdWVIZXgoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudmFsdWVIZXhWaWV3Lmxlbmd0aCA+PSA0KSB7XHJcbiAgICAgICAgICAgIHRoaXMud2FybmluZ3MucHVzaChcIlRvbyBiaWcgSW50ZWdlciBmb3IgZGVjb2RpbmcsIGhleCBvbmx5XCIpO1xyXG4gICAgICAgICAgICB0aGlzLmlzSGV4T25seSA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlRGVjID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNIZXhPbmx5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlSGV4Vmlldy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZURlYyA9IHB2dXRpbHNfX25hbWVzcGFjZS51dGlsRGVjb2RlVEMuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHNldCB2YWx1ZURlYyh2KSB7XHJcbiAgICAgICAgdGhpcy5fdmFsdWVEZWMgPSB2O1xyXG4gICAgICAgIHRoaXMuaXNIZXhPbmx5ID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy52YWx1ZUhleFZpZXcgPSBuZXcgVWludDhBcnJheShwdnV0aWxzX19uYW1lc3BhY2UudXRpbEVuY29kZVRDKHYpKTtcclxuICAgIH1cclxuICAgIGdldCB2YWx1ZURlYygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWVEZWM7XHJcbiAgICB9XHJcbiAgICBmcm9tREVSKGlucHV0QnVmZmVyLCBpbnB1dE9mZnNldCwgaW5wdXRMZW5ndGgsIGV4cGVjdGVkTGVuZ3RoID0gMCkge1xyXG4gICAgICAgIGNvbnN0IG9mZnNldCA9IHRoaXMuZnJvbUJFUihpbnB1dEJ1ZmZlciwgaW5wdXRPZmZzZXQsIGlucHV0TGVuZ3RoKTtcclxuICAgICAgICBpZiAob2Zmc2V0ID09PSAtMSlcclxuICAgICAgICAgICAgcmV0dXJuIG9mZnNldDtcclxuICAgICAgICBjb25zdCB2aWV3ID0gdGhpcy52YWx1ZUhleFZpZXc7XHJcbiAgICAgICAgaWYgKCh2aWV3WzBdID09PSAweDAwKSAmJiAoKHZpZXdbMV0gJiAweDgwKSAhPT0gMCkpIHtcclxuICAgICAgICAgICAgdGhpcy52YWx1ZUhleFZpZXcgPSB2aWV3LnN1YmFycmF5KDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGV4cGVjdGVkTGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodmlldy5sZW5ndGggPCBleHBlY3RlZExlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgoZXhwZWN0ZWRMZW5ndGggLSB2aWV3Lmxlbmd0aCkgPiAxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlY3RlZExlbmd0aCA9IHZpZXcubGVuZ3RoICsgMTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlSGV4VmlldyA9IHZpZXcuc3ViYXJyYXkoZXhwZWN0ZWRMZW5ndGggLSB2aWV3Lmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG9mZnNldDtcclxuICAgIH1cclxuICAgIHRvREVSKHNpemVPbmx5ID0gZmFsc2UpIHtcclxuICAgICAgICBjb25zdCB2aWV3ID0gdGhpcy52YWx1ZUhleFZpZXc7XHJcbiAgICAgICAgc3dpdGNoICh0cnVlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgKCh2aWV3WzBdICYgMHg4MCkgIT09IDApOlxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRWaWV3ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy52YWx1ZUhleFZpZXcubGVuZ3RoICsgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlZFZpZXdbMF0gPSAweDAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRWaWV3LnNldCh2aWV3LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlSGV4VmlldyA9IHVwZGF0ZWRWaWV3O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgKCh2aWV3WzBdID09PSAweDAwKSAmJiAoKHZpZXdbMV0gJiAweDgwKSA9PT0gMCkpOlxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWVIZXhWaWV3ID0gdGhpcy52YWx1ZUhleFZpZXcuc3ViYXJyYXkoMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudG9CRVIoc2l6ZU9ubHkpO1xyXG4gICAgfVxyXG4gICAgZnJvbUJFUihpbnB1dEJ1ZmZlciwgaW5wdXRPZmZzZXQsIGlucHV0TGVuZ3RoKSB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0T2Zmc2V0ID0gc3VwZXIuZnJvbUJFUihpbnB1dEJ1ZmZlciwgaW5wdXRPZmZzZXQsIGlucHV0TGVuZ3RoKTtcclxuICAgICAgICBpZiAocmVzdWx0T2Zmc2V0ID09PSAtMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0T2Zmc2V0O1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNldFZhbHVlSGV4KCk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdE9mZnNldDtcclxuICAgIH1cclxuICAgIHRvQkVSKHNpemVPbmx5KSB7XHJcbiAgICAgICAgcmV0dXJuIHNpemVPbmx5XHJcbiAgICAgICAgICAgID8gbmV3IEFycmF5QnVmZmVyKHRoaXMudmFsdWVIZXhWaWV3Lmxlbmd0aClcclxuICAgICAgICAgICAgOiB0aGlzLnZhbHVlSGV4Vmlldy5zbGljZSgpLmJ1ZmZlcjtcclxuICAgIH1cclxuICAgIHRvSlNPTigpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAuLi5zdXBlci50b0pTT04oKSxcclxuICAgICAgICAgICAgdmFsdWVEZWM6IHRoaXMudmFsdWVEZWMsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIHRvU3RyaW5nKCkge1xyXG4gICAgICAgIGNvbnN0IGZpcnN0Qml0ID0gKHRoaXMudmFsdWVIZXhWaWV3Lmxlbmd0aCAqIDgpIC0gMTtcclxuICAgICAgICBsZXQgZGlnaXRzID0gbmV3IFVpbnQ4QXJyYXkoKHRoaXMudmFsdWVIZXhWaWV3Lmxlbmd0aCAqIDgpIC8gMyk7XHJcbiAgICAgICAgbGV0IGJpdE51bWJlciA9IDA7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRCeXRlO1xyXG4gICAgICAgIGNvbnN0IGFzbjFWaWV3ID0gdGhpcy52YWx1ZUhleFZpZXc7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IFwiXCI7XHJcbiAgICAgICAgbGV0IGZsYWcgPSBmYWxzZTtcclxuICAgICAgICBmb3IgKGxldCBieXRlTnVtYmVyID0gKGFzbjFWaWV3LmJ5dGVMZW5ndGggLSAxKTsgYnl0ZU51bWJlciA+PSAwOyBieXRlTnVtYmVyLS0pIHtcclxuICAgICAgICAgICAgY3VycmVudEJ5dGUgPSBhc24xVmlld1tieXRlTnVtYmVyXTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA4OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmICgoY3VycmVudEJ5dGUgJiAxKSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoYml0TnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgZmlyc3RCaXQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWdpdHMgPSB2aWV3U3ViKHBvd2VyMihiaXROdW1iZXIpLCBkaWdpdHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gXCItXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpZ2l0cyA9IHZpZXdBZGQoZGlnaXRzLCBwb3dlcjIoYml0TnVtYmVyKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYml0TnVtYmVyKys7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50Qnl0ZSA+Pj0gMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRpZ2l0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZGlnaXRzW2ldKVxyXG4gICAgICAgICAgICAgICAgZmxhZyA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmIChmbGFnKVxyXG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IGRpZ2l0c1N0cmluZy5jaGFyQXQoZGlnaXRzW2ldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGZsYWcgPT09IGZhbHNlKVxyXG4gICAgICAgICAgICByZXN1bHQgKz0gZGlnaXRzU3RyaW5nLmNoYXJBdCgwKTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG59XHJcbl9hJHAgPSBMb2NhbEludGVnZXJWYWx1ZUJsb2NrO1xyXG5Mb2NhbEludGVnZXJWYWx1ZUJsb2NrLk5BTUUgPSBcIkludGVnZXJWYWx1ZUJsb2NrXCI7XHJcbigoKSA9PiB7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX2EkcC5wcm90b3R5cGUsIFwidmFsdWVIZXhcIiwge1xyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICAgICAgdGhpcy52YWx1ZUhleFZpZXcgPSBuZXcgVWludDhBcnJheSh2KTtcclxuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZUhleCgpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlSGV4Vmlldy5zbGljZSgpLmJ1ZmZlcjtcclxuICAgICAgICB9LFxyXG4gICAgfSk7XHJcbn0pKCk7XG5cbnZhciBfYSRvO1xyXG5jbGFzcyBJbnRlZ2VyIGV4dGVuZHMgQmFzZUJsb2NrIHtcclxuICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMgPSB7fSkge1xyXG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMsIExvY2FsSW50ZWdlclZhbHVlQmxvY2spO1xyXG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdDbGFzcyA9IDE7XHJcbiAgICAgICAgdGhpcy5pZEJsb2NrLnRhZ051bWJlciA9IDI7XHJcbiAgICB9XHJcbiAgICB0b0JpZ0ludCgpIHtcclxuICAgICAgICBhc3NlcnRCaWdJbnQoKTtcclxuICAgICAgICByZXR1cm4gQmlnSW50KHRoaXMudmFsdWVCbG9jay50b1N0cmluZygpKTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBmcm9tQmlnSW50KHZhbHVlKSB7XHJcbiAgICAgICAgYXNzZXJ0QmlnSW50KCk7XHJcbiAgICAgICAgY29uc3QgYmlnSW50VmFsdWUgPSBCaWdJbnQodmFsdWUpO1xyXG4gICAgICAgIGNvbnN0IHdyaXRlciA9IG5ldyBWaWV3V3JpdGVyKCk7XHJcbiAgICAgICAgY29uc3QgaGV4ID0gYmlnSW50VmFsdWUudG9TdHJpbmcoMTYpLnJlcGxhY2UoL14tLywgXCJcIik7XHJcbiAgICAgICAgY29uc3QgdmlldyA9IG5ldyBVaW50OEFycmF5KHB2dHN1dGlsc19fbmFtZXNwYWNlLkNvbnZlcnQuRnJvbUhleChoZXgpKTtcclxuICAgICAgICBpZiAoYmlnSW50VmFsdWUgPCAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpcnN0ID0gbmV3IFVpbnQ4QXJyYXkodmlldy5sZW5ndGggKyAodmlld1swXSAmIDB4ODAgPyAxIDogMCkpO1xyXG4gICAgICAgICAgICBmaXJzdFswXSB8PSAweDgwO1xyXG4gICAgICAgICAgICBjb25zdCBmaXJzdEludCA9IEJpZ0ludChgMHgke3B2dHN1dGlsc19fbmFtZXNwYWNlLkNvbnZlcnQuVG9IZXgoZmlyc3QpfWApO1xyXG4gICAgICAgICAgICBjb25zdCBzZWNvbmRJbnQgPSBmaXJzdEludCArIGJpZ0ludFZhbHVlO1xyXG4gICAgICAgICAgICBjb25zdCBzZWNvbmQgPSBwdnRzdXRpbHNfX25hbWVzcGFjZS5CdWZmZXJTb3VyY2VDb252ZXJ0ZXIudG9VaW50OEFycmF5KHB2dHN1dGlsc19fbmFtZXNwYWNlLkNvbnZlcnQuRnJvbUhleChzZWNvbmRJbnQudG9TdHJpbmcoMTYpKSk7XHJcbiAgICAgICAgICAgIHNlY29uZFswXSB8PSAweDgwO1xyXG4gICAgICAgICAgICB3cml0ZXIud3JpdGUoc2Vjb25kKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh2aWV3WzBdICYgMHg4MCkge1xyXG4gICAgICAgICAgICAgICAgd3JpdGVyLndyaXRlKG5ldyBVaW50OEFycmF5KFswXSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHdyaXRlci53cml0ZSh2aWV3KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmVzID0gbmV3IEludGVnZXIoe1xyXG4gICAgICAgICAgICB2YWx1ZUhleDogd3JpdGVyLmZpbmFsKCksXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuICAgIGNvbnZlcnRUb0RFUigpIHtcclxuICAgICAgICBjb25zdCBpbnRlZ2VyID0gbmV3IEludGVnZXIoeyB2YWx1ZUhleDogdGhpcy52YWx1ZUJsb2NrLnZhbHVlSGV4VmlldyB9KTtcclxuICAgICAgICBpbnRlZ2VyLnZhbHVlQmxvY2sudG9ERVIoKTtcclxuICAgICAgICByZXR1cm4gaW50ZWdlcjtcclxuICAgIH1cclxuICAgIGNvbnZlcnRGcm9tREVSKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgSW50ZWdlcih7XHJcbiAgICAgICAgICAgIHZhbHVlSGV4OiB0aGlzLnZhbHVlQmxvY2sudmFsdWVIZXhWaWV3WzBdID09PSAwXHJcbiAgICAgICAgICAgICAgICA/IHRoaXMudmFsdWVCbG9jay52YWx1ZUhleFZpZXcuc3ViYXJyYXkoMSlcclxuICAgICAgICAgICAgICAgIDogdGhpcy52YWx1ZUJsb2NrLnZhbHVlSGV4VmlldyxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIG9uQXNjaWlFbmNvZGluZygpIHtcclxuICAgICAgICByZXR1cm4gYCR7dGhpcy5jb25zdHJ1Y3Rvci5OQU1FfSA6ICR7dGhpcy52YWx1ZUJsb2NrLnRvU3RyaW5nKCl9YDtcclxuICAgIH1cclxufVxyXG5fYSRvID0gSW50ZWdlcjtcclxuKCgpID0+IHtcclxuICAgIHR5cGVTdG9yZS5JbnRlZ2VyID0gX2EkbztcclxufSkoKTtcclxuSW50ZWdlci5OQU1FID0gXCJJTlRFR0VSXCI7XG5cbnZhciBfYSRuO1xyXG5jbGFzcyBFbnVtZXJhdGVkIGV4dGVuZHMgSW50ZWdlciB7XHJcbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzID0ge30pIHtcclxuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcclxuICAgICAgICB0aGlzLmlkQmxvY2sudGFnQ2xhc3MgPSAxO1xyXG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdOdW1iZXIgPSAxMDtcclxuICAgIH1cclxufVxyXG5fYSRuID0gRW51bWVyYXRlZDtcclxuKCgpID0+IHtcclxuICAgIHR5cGVTdG9yZS5FbnVtZXJhdGVkID0gX2EkbjtcclxufSkoKTtcclxuRW51bWVyYXRlZC5OQU1FID0gXCJFTlVNRVJBVEVEXCI7XG5cbmNsYXNzIExvY2FsU2lkVmFsdWVCbG9jayBleHRlbmRzIEhleEJsb2NrKFZhbHVlQmxvY2spIHtcclxuICAgIGNvbnN0cnVjdG9yKHsgdmFsdWVEZWMgPSAtMSwgaXNGaXJzdFNpZCA9IGZhbHNlLCAuLi5wYXJhbWV0ZXJzIH0gPSB7fSkge1xyXG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMpO1xyXG4gICAgICAgIHRoaXMudmFsdWVEZWMgPSB2YWx1ZURlYztcclxuICAgICAgICB0aGlzLmlzRmlyc3RTaWQgPSBpc0ZpcnN0U2lkO1xyXG4gICAgfVxyXG4gICAgZnJvbUJFUihpbnB1dEJ1ZmZlciwgaW5wdXRPZmZzZXQsIGlucHV0TGVuZ3RoKSB7XHJcbiAgICAgICAgaWYgKCFpbnB1dExlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gaW5wdXRPZmZzZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGlucHV0VmlldyA9IHB2dHN1dGlsc19fbmFtZXNwYWNlLkJ1ZmZlclNvdXJjZUNvbnZlcnRlci50b1VpbnQ4QXJyYXkoaW5wdXRCdWZmZXIpO1xyXG4gICAgICAgIGlmICghY2hlY2tCdWZmZXJQYXJhbXModGhpcywgaW5wdXRWaWV3LCBpbnB1dE9mZnNldCwgaW5wdXRMZW5ndGgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgaW50QnVmZmVyID0gaW5wdXRWaWV3LnN1YmFycmF5KGlucHV0T2Zmc2V0LCBpbnB1dE9mZnNldCArIGlucHV0TGVuZ3RoKTtcclxuICAgICAgICB0aGlzLnZhbHVlSGV4VmlldyA9IG5ldyBVaW50OEFycmF5KGlucHV0TGVuZ3RoKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0TGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy52YWx1ZUhleFZpZXdbaV0gPSBpbnRCdWZmZXJbaV0gJiAweDdGO1xyXG4gICAgICAgICAgICB0aGlzLmJsb2NrTGVuZ3RoKys7XHJcbiAgICAgICAgICAgIGlmICgoaW50QnVmZmVyW2ldICYgMHg4MCkgPT09IDB4MDApXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdGVtcFZpZXcgPSBuZXcgVWludDhBcnJheSh0aGlzLmJsb2NrTGVuZ3RoKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYmxvY2tMZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0ZW1wVmlld1tpXSA9IHRoaXMudmFsdWVIZXhWaWV3W2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnZhbHVlSGV4VmlldyA9IHRlbXBWaWV3O1xyXG4gICAgICAgIGlmICgoaW50QnVmZmVyW3RoaXMuYmxvY2tMZW5ndGggLSAxXSAmIDB4ODApICE9PSAweDAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXJyb3IgPSBcIkVuZCBvZiBpbnB1dCByZWFjaGVkIGJlZm9yZSBtZXNzYWdlIHdhcyBmdWxseSBkZWNvZGVkXCI7XHJcbiAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMudmFsdWVIZXhWaWV3WzBdID09PSAweDAwKVxyXG4gICAgICAgICAgICB0aGlzLndhcm5pbmdzLnB1c2goXCJOZWVkbGVzc2x5IGxvbmcgZm9ybWF0IG9mIFNJRCBlbmNvZGluZ1wiKTtcclxuICAgICAgICBpZiAodGhpcy5ibG9ja0xlbmd0aCA8PSA4KVxyXG4gICAgICAgICAgICB0aGlzLnZhbHVlRGVjID0gcHZ1dGlsc19fbmFtZXNwYWNlLnV0aWxGcm9tQmFzZSh0aGlzLnZhbHVlSGV4VmlldywgNyk7XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNIZXhPbmx5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy53YXJuaW5ncy5wdXNoKFwiVG9vIGJpZyBTSUQgZm9yIGRlY29kaW5nLCBoZXggb25seVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIChpbnB1dE9mZnNldCArIHRoaXMuYmxvY2tMZW5ndGgpO1xyXG4gICAgfVxyXG4gICAgc2V0IHZhbHVlQmlnSW50KHZhbHVlKSB7XHJcbiAgICAgICAgYXNzZXJ0QmlnSW50KCk7XHJcbiAgICAgICAgbGV0IGJpdHMgPSBCaWdJbnQodmFsdWUpLnRvU3RyaW5nKDIpO1xyXG4gICAgICAgIHdoaWxlIChiaXRzLmxlbmd0aCAlIDcpIHtcclxuICAgICAgICAgICAgYml0cyA9IFwiMFwiICsgYml0cztcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheShiaXRzLmxlbmd0aCAvIDcpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgYnl0ZXNbaV0gPSBwYXJzZUludChiaXRzLnNsaWNlKGkgKiA3LCBpICogNyArIDcpLCAyKSArIChpICsgMSA8IGJ5dGVzLmxlbmd0aCA/IDB4ODAgOiAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5mcm9tQkVSKGJ5dGVzLmJ1ZmZlciwgMCwgYnl0ZXMubGVuZ3RoKTtcclxuICAgIH1cclxuICAgIHRvQkVSKHNpemVPbmx5KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNIZXhPbmx5KSB7XHJcbiAgICAgICAgICAgIGlmIChzaXplT25seSlcclxuICAgICAgICAgICAgICAgIHJldHVybiAobmV3IEFycmF5QnVmZmVyKHRoaXMudmFsdWVIZXhWaWV3LmJ5dGVMZW5ndGgpKTtcclxuICAgICAgICAgICAgY29uc3QgY3VyVmlldyA9IHRoaXMudmFsdWVIZXhWaWV3O1xyXG4gICAgICAgICAgICBjb25zdCByZXRWaWV3ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5ibG9ja0xlbmd0aCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgKHRoaXMuYmxvY2tMZW5ndGggLSAxKTsgaSsrKVxyXG4gICAgICAgICAgICAgICAgcmV0Vmlld1tpXSA9IGN1clZpZXdbaV0gfCAweDgwO1xyXG4gICAgICAgICAgICByZXRWaWV3W3RoaXMuYmxvY2tMZW5ndGggLSAxXSA9IGN1clZpZXdbdGhpcy5ibG9ja0xlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0Vmlldy5idWZmZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGVuY29kZWRCdWYgPSBwdnV0aWxzX19uYW1lc3BhY2UudXRpbFRvQmFzZSh0aGlzLnZhbHVlRGVjLCA3KTtcclxuICAgICAgICBpZiAoZW5jb2RlZEJ1Zi5ieXRlTGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXJyb3IgPSBcIkVycm9yIGR1cmluZyBlbmNvZGluZyBTSUQgdmFsdWVcIjtcclxuICAgICAgICAgICAgcmV0dXJuIEVNUFRZX0JVRkZFUjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmV0VmlldyA9IG5ldyBVaW50OEFycmF5KGVuY29kZWRCdWYuYnl0ZUxlbmd0aCk7XHJcbiAgICAgICAgaWYgKCFzaXplT25seSkge1xyXG4gICAgICAgICAgICBjb25zdCBlbmNvZGVkVmlldyA9IG5ldyBVaW50OEFycmF5KGVuY29kZWRCdWYpO1xyXG4gICAgICAgICAgICBjb25zdCBsZW4gPSBlbmNvZGVkQnVmLmJ5dGVMZW5ndGggLSAxO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKVxyXG4gICAgICAgICAgICAgICAgcmV0Vmlld1tpXSA9IGVuY29kZWRWaWV3W2ldIHwgMHg4MDtcclxuICAgICAgICAgICAgcmV0Vmlld1tsZW5dID0gZW5jb2RlZFZpZXdbbGVuXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJldFZpZXc7XHJcbiAgICB9XHJcbiAgICB0b1N0cmluZygpIHtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gXCJcIjtcclxuICAgICAgICBpZiAodGhpcy5pc0hleE9ubHkpXHJcbiAgICAgICAgICAgIHJlc3VsdCA9IHB2dHN1dGlsc19fbmFtZXNwYWNlLkNvbnZlcnQuVG9IZXgodGhpcy52YWx1ZUhleFZpZXcpO1xyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0ZpcnN0U2lkKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgc2lkVmFsdWUgPSB0aGlzLnZhbHVlRGVjO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudmFsdWVEZWMgPD0gMzkpXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gXCIwLlwiO1xyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudmFsdWVEZWMgPD0gNzkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gXCIxLlwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaWRWYWx1ZSAtPSA0MDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IFwiMi5cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2lkVmFsdWUgLT0gODA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHNpZFZhbHVlLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy52YWx1ZURlYy50b1N0cmluZygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgdG9KU09OKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIC4uLnN1cGVyLnRvSlNPTigpLFxyXG4gICAgICAgICAgICB2YWx1ZURlYzogdGhpcy52YWx1ZURlYyxcclxuICAgICAgICAgICAgaXNGaXJzdFNpZDogdGhpcy5pc0ZpcnN0U2lkLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuTG9jYWxTaWRWYWx1ZUJsb2NrLk5BTUUgPSBcInNpZEJsb2NrXCI7XG5cbmNsYXNzIExvY2FsT2JqZWN0SWRlbnRpZmllclZhbHVlQmxvY2sgZXh0ZW5kcyBWYWx1ZUJsb2NrIHtcclxuICAgIGNvbnN0cnVjdG9yKHsgdmFsdWUgPSBFTVBUWV9TVFJJTkcsIC4uLnBhcmFtZXRlcnMgfSA9IHt9KSB7XHJcbiAgICAgICAgc3VwZXIocGFyYW1ldGVycyk7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IFtdO1xyXG4gICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmZyb21TdHJpbmcodmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZyb21CRVIoaW5wdXRCdWZmZXIsIGlucHV0T2Zmc2V0LCBpbnB1dExlbmd0aCkge1xyXG4gICAgICAgIGxldCByZXN1bHRPZmZzZXQgPSBpbnB1dE9mZnNldDtcclxuICAgICAgICB3aGlsZSAoaW5wdXRMZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNpZEJsb2NrID0gbmV3IExvY2FsU2lkVmFsdWVCbG9jaygpO1xyXG4gICAgICAgICAgICByZXN1bHRPZmZzZXQgPSBzaWRCbG9jay5mcm9tQkVSKGlucHV0QnVmZmVyLCByZXN1bHRPZmZzZXQsIGlucHV0TGVuZ3RoKTtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdE9mZnNldCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYmxvY2tMZW5ndGggPSAwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvciA9IHNpZEJsb2NrLmVycm9yO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdE9mZnNldDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy52YWx1ZS5sZW5ndGggPT09IDApXHJcbiAgICAgICAgICAgICAgICBzaWRCbG9jay5pc0ZpcnN0U2lkID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5ibG9ja0xlbmd0aCArPSBzaWRCbG9jay5ibG9ja0xlbmd0aDtcclxuICAgICAgICAgICAgaW5wdXRMZW5ndGggLT0gc2lkQmxvY2suYmxvY2tMZW5ndGg7XHJcbiAgICAgICAgICAgIHRoaXMudmFsdWUucHVzaChzaWRCbG9jayk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHRPZmZzZXQ7XHJcbiAgICB9XHJcbiAgICB0b0JFUihzaXplT25seSkge1xyXG4gICAgICAgIGNvbnN0IHJldEJ1ZmZlcnMgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudmFsdWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgdmFsdWVCdWYgPSB0aGlzLnZhbHVlW2ldLnRvQkVSKHNpemVPbmx5KTtcclxuICAgICAgICAgICAgaWYgKHZhbHVlQnVmLmJ5dGVMZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IgPSB0aGlzLnZhbHVlW2ldLmVycm9yO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEVNUFRZX0JVRkZFUjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXRCdWZmZXJzLnB1c2godmFsdWVCdWYpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY29uY2F0KHJldEJ1ZmZlcnMpO1xyXG4gICAgfVxyXG4gICAgZnJvbVN0cmluZyhzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLnZhbHVlID0gW107XHJcbiAgICAgICAgbGV0IHBvczEgPSAwO1xyXG4gICAgICAgIGxldCBwb3MyID0gMDtcclxuICAgICAgICBsZXQgc2lkID0gXCJcIjtcclxuICAgICAgICBsZXQgZmxhZyA9IGZhbHNlO1xyXG4gICAgICAgIGRvIHtcclxuICAgICAgICAgICAgcG9zMiA9IHN0cmluZy5pbmRleE9mKFwiLlwiLCBwb3MxKTtcclxuICAgICAgICAgICAgaWYgKHBvczIgPT09IC0xKVxyXG4gICAgICAgICAgICAgICAgc2lkID0gc3RyaW5nLnN1YnN0cmluZyhwb3MxKTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgc2lkID0gc3RyaW5nLnN1YnN0cmluZyhwb3MxLCBwb3MyKTtcclxuICAgICAgICAgICAgcG9zMSA9IHBvczIgKyAxO1xyXG4gICAgICAgICAgICBpZiAoZmxhZykge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2lkQmxvY2sgPSB0aGlzLnZhbHVlWzBdO1xyXG4gICAgICAgICAgICAgICAgbGV0IHBsdXMgPSAwO1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChzaWRCbG9jay52YWx1ZURlYykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbHVzID0gNDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGx1cyA9IDgwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZFNJRCA9IHBhcnNlSW50KHNpZCwgMTApO1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzTmFOKHBhcnNlZFNJRCkpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgc2lkQmxvY2sudmFsdWVEZWMgPSBwYXJzZWRTSUQgKyBwbHVzO1xyXG4gICAgICAgICAgICAgICAgZmxhZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2lkQmxvY2sgPSBuZXcgTG9jYWxTaWRWYWx1ZUJsb2NrKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2lkID4gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpIHtcclxuICAgICAgICAgICAgICAgICAgICBhc3NlcnRCaWdJbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzaWRWYWx1ZSA9IEJpZ0ludChzaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNpZEJsb2NrLnZhbHVlQmlnSW50ID0gc2lkVmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzaWRCbG9jay52YWx1ZURlYyA9IHBhcnNlSW50KHNpZCwgMTApO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc05hTihzaWRCbG9jay52YWx1ZURlYykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy52YWx1ZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBzaWRCbG9jay5pc0ZpcnN0U2lkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBmbGFnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMudmFsdWUucHVzaChzaWRCbG9jayk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IHdoaWxlIChwb3MyICE9PSAtMSk7XHJcbiAgICB9XHJcbiAgICB0b1N0cmluZygpIHtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gXCJcIjtcclxuICAgICAgICBsZXQgaXNIZXhPbmx5ID0gZmFsc2U7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnZhbHVlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlzSGV4T25seSA9IHRoaXMudmFsdWVbaV0uaXNIZXhPbmx5O1xyXG4gICAgICAgICAgICBsZXQgc2lkU3RyID0gdGhpcy52YWx1ZVtpXS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICBpZiAoaSAhPT0gMClcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGAke3Jlc3VsdH0uYDtcclxuICAgICAgICAgICAgaWYgKGlzSGV4T25seSkge1xyXG4gICAgICAgICAgICAgICAgc2lkU3RyID0gYHske3NpZFN0cn19YDtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlW2ldLmlzRmlyc3RTaWQpXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gYDIueyR7c2lkU3RyfSAtIDgwfWA7XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHNpZFN0cjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gc2lkU3RyO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgdG9KU09OKCkge1xyXG4gICAgICAgIGNvbnN0IG9iamVjdCA9IHtcclxuICAgICAgICAgICAgLi4uc3VwZXIudG9KU09OKCksXHJcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLnRvU3RyaW5nKCksXHJcbiAgICAgICAgICAgIHNpZEFycmF5OiBbXSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy52YWx1ZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBvYmplY3Quc2lkQXJyYXkucHVzaCh0aGlzLnZhbHVlW2ldLnRvSlNPTigpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG9iamVjdDtcclxuICAgIH1cclxufVxyXG5Mb2NhbE9iamVjdElkZW50aWZpZXJWYWx1ZUJsb2NrLk5BTUUgPSBcIk9iamVjdElkZW50aWZpZXJWYWx1ZUJsb2NrXCI7XG5cbnZhciBfYSRtO1xyXG5jbGFzcyBPYmplY3RJZGVudGlmaWVyIGV4dGVuZHMgQmFzZUJsb2NrIHtcclxuICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMgPSB7fSkge1xyXG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMsIExvY2FsT2JqZWN0SWRlbnRpZmllclZhbHVlQmxvY2spO1xyXG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdDbGFzcyA9IDE7XHJcbiAgICAgICAgdGhpcy5pZEJsb2NrLnRhZ051bWJlciA9IDY7XHJcbiAgICB9XHJcbiAgICBnZXRWYWx1ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZUJsb2NrLnRvU3RyaW5nKCk7XHJcbiAgICB9XHJcbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMudmFsdWVCbG9jay5mcm9tU3RyaW5nKHZhbHVlKTtcclxuICAgIH1cclxuICAgIG9uQXNjaWlFbmNvZGluZygpIHtcclxuICAgICAgICByZXR1cm4gYCR7dGhpcy5jb25zdHJ1Y3Rvci5OQU1FfSA6ICR7dGhpcy52YWx1ZUJsb2NrLnRvU3RyaW5nKCkgfHwgXCJlbXB0eVwifWA7XHJcbiAgICB9XHJcbiAgICB0b0pTT04oKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgLi4uc3VwZXIudG9KU09OKCksXHJcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLmdldFZhbHVlKCksXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5fYSRtID0gT2JqZWN0SWRlbnRpZmllcjtcclxuKCgpID0+IHtcclxuICAgIHR5cGVTdG9yZS5PYmplY3RJZGVudGlmaWVyID0gX2EkbTtcclxufSkoKTtcclxuT2JqZWN0SWRlbnRpZmllci5OQU1FID0gXCJPQkpFQ1QgSURFTlRJRklFUlwiO1xuXG5jbGFzcyBMb2NhbFJlbGF0aXZlU2lkVmFsdWVCbG9jayBleHRlbmRzIEhleEJsb2NrKExvY2FsQmFzZUJsb2NrKSB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7IHZhbHVlRGVjID0gMCwgLi4ucGFyYW1ldGVycyB9ID0ge30pIHtcclxuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcclxuICAgICAgICB0aGlzLnZhbHVlRGVjID0gdmFsdWVEZWM7XHJcbiAgICB9XHJcbiAgICBmcm9tQkVSKGlucHV0QnVmZmVyLCBpbnB1dE9mZnNldCwgaW5wdXRMZW5ndGgpIHtcclxuICAgICAgICBpZiAoaW5wdXRMZW5ndGggPT09IDApXHJcbiAgICAgICAgICAgIHJldHVybiBpbnB1dE9mZnNldDtcclxuICAgICAgICBjb25zdCBpbnB1dFZpZXcgPSBwdnRzdXRpbHNfX25hbWVzcGFjZS5CdWZmZXJTb3VyY2VDb252ZXJ0ZXIudG9VaW50OEFycmF5KGlucHV0QnVmZmVyKTtcclxuICAgICAgICBpZiAoIWNoZWNrQnVmZmVyUGFyYW1zKHRoaXMsIGlucHV0VmlldywgaW5wdXRPZmZzZXQsIGlucHV0TGVuZ3RoKSlcclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIGNvbnN0IGludEJ1ZmZlciA9IGlucHV0Vmlldy5zdWJhcnJheShpbnB1dE9mZnNldCwgaW5wdXRPZmZzZXQgKyBpbnB1dExlbmd0aCk7XHJcbiAgICAgICAgdGhpcy52YWx1ZUhleFZpZXcgPSBuZXcgVWludDhBcnJheShpbnB1dExlbmd0aCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dExlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmFsdWVIZXhWaWV3W2ldID0gaW50QnVmZmVyW2ldICYgMHg3RjtcclxuICAgICAgICAgICAgdGhpcy5ibG9ja0xlbmd0aCsrO1xyXG4gICAgICAgICAgICBpZiAoKGludEJ1ZmZlcltpXSAmIDB4ODApID09PSAweDAwKVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHRlbXBWaWV3ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5ibG9ja0xlbmd0aCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmJsb2NrTGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgIHRlbXBWaWV3W2ldID0gdGhpcy52YWx1ZUhleFZpZXdbaV07XHJcbiAgICAgICAgdGhpcy52YWx1ZUhleFZpZXcgPSB0ZW1wVmlldztcclxuICAgICAgICBpZiAoKGludEJ1ZmZlclt0aGlzLmJsb2NrTGVuZ3RoIC0gMV0gJiAweDgwKSAhPT0gMHgwMCkge1xyXG4gICAgICAgICAgICB0aGlzLmVycm9yID0gXCJFbmQgb2YgaW5wdXQgcmVhY2hlZCBiZWZvcmUgbWVzc2FnZSB3YXMgZnVsbHkgZGVjb2RlZFwiO1xyXG4gICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnZhbHVlSGV4Vmlld1swXSA9PT0gMHgwMClcclxuICAgICAgICAgICAgdGhpcy53YXJuaW5ncy5wdXNoKFwiTmVlZGxlc3NseSBsb25nIGZvcm1hdCBvZiBTSUQgZW5jb2RpbmdcIik7XHJcbiAgICAgICAgaWYgKHRoaXMuYmxvY2tMZW5ndGggPD0gOClcclxuICAgICAgICAgICAgdGhpcy52YWx1ZURlYyA9IHB2dXRpbHNfX25hbWVzcGFjZS51dGlsRnJvbUJhc2UodGhpcy52YWx1ZUhleFZpZXcsIDcpO1xyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmlzSGV4T25seSA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMud2FybmluZ3MucHVzaChcIlRvbyBiaWcgU0lEIGZvciBkZWNvZGluZywgaGV4IG9ubHlcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAoaW5wdXRPZmZzZXQgKyB0aGlzLmJsb2NrTGVuZ3RoKTtcclxuICAgIH1cclxuICAgIHRvQkVSKHNpemVPbmx5KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNIZXhPbmx5KSB7XHJcbiAgICAgICAgICAgIGlmIChzaXplT25seSlcclxuICAgICAgICAgICAgICAgIHJldHVybiAobmV3IEFycmF5QnVmZmVyKHRoaXMudmFsdWVIZXhWaWV3LmJ5dGVMZW5ndGgpKTtcclxuICAgICAgICAgICAgY29uc3QgY3VyVmlldyA9IHRoaXMudmFsdWVIZXhWaWV3O1xyXG4gICAgICAgICAgICBjb25zdCByZXRWaWV3ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5ibG9ja0xlbmd0aCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgKHRoaXMuYmxvY2tMZW5ndGggLSAxKTsgaSsrKVxyXG4gICAgICAgICAgICAgICAgcmV0Vmlld1tpXSA9IGN1clZpZXdbaV0gfCAweDgwO1xyXG4gICAgICAgICAgICByZXRWaWV3W3RoaXMuYmxvY2tMZW5ndGggLSAxXSA9IGN1clZpZXdbdGhpcy5ibG9ja0xlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0Vmlldy5idWZmZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGVuY29kZWRCdWYgPSBwdnV0aWxzX19uYW1lc3BhY2UudXRpbFRvQmFzZSh0aGlzLnZhbHVlRGVjLCA3KTtcclxuICAgICAgICBpZiAoZW5jb2RlZEJ1Zi5ieXRlTGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXJyb3IgPSBcIkVycm9yIGR1cmluZyBlbmNvZGluZyBTSUQgdmFsdWVcIjtcclxuICAgICAgICAgICAgcmV0dXJuIEVNUFRZX0JVRkZFUjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmV0VmlldyA9IG5ldyBVaW50OEFycmF5KGVuY29kZWRCdWYuYnl0ZUxlbmd0aCk7XHJcbiAgICAgICAgaWYgKCFzaXplT25seSkge1xyXG4gICAgICAgICAgICBjb25zdCBlbmNvZGVkVmlldyA9IG5ldyBVaW50OEFycmF5KGVuY29kZWRCdWYpO1xyXG4gICAgICAgICAgICBjb25zdCBsZW4gPSBlbmNvZGVkQnVmLmJ5dGVMZW5ndGggLSAxO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKVxyXG4gICAgICAgICAgICAgICAgcmV0Vmlld1tpXSA9IGVuY29kZWRWaWV3W2ldIHwgMHg4MDtcclxuICAgICAgICAgICAgcmV0Vmlld1tsZW5dID0gZW5jb2RlZFZpZXdbbGVuXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJldFZpZXcuYnVmZmVyO1xyXG4gICAgfVxyXG4gICAgdG9TdHJpbmcoKSB7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IFwiXCI7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNIZXhPbmx5KVxyXG4gICAgICAgICAgICByZXN1bHQgPSBwdnRzdXRpbHNfX25hbWVzcGFjZS5Db252ZXJ0LlRvSGV4KHRoaXMudmFsdWVIZXhWaWV3KTtcclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy52YWx1ZURlYy50b1N0cmluZygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgdG9KU09OKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIC4uLnN1cGVyLnRvSlNPTigpLFxyXG4gICAgICAgICAgICB2YWx1ZURlYzogdGhpcy52YWx1ZURlYyxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbkxvY2FsUmVsYXRpdmVTaWRWYWx1ZUJsb2NrLk5BTUUgPSBcInJlbGF0aXZlU2lkQmxvY2tcIjtcblxuY2xhc3MgTG9jYWxSZWxhdGl2ZU9iamVjdElkZW50aWZpZXJWYWx1ZUJsb2NrIGV4dGVuZHMgVmFsdWVCbG9jayB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7IHZhbHVlID0gRU1QVFlfU1RSSU5HLCAuLi5wYXJhbWV0ZXJzIH0gPSB7fSkge1xyXG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMpO1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSBbXTtcclxuICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5mcm9tU3RyaW5nKHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmcm9tQkVSKGlucHV0QnVmZmVyLCBpbnB1dE9mZnNldCwgaW5wdXRMZW5ndGgpIHtcclxuICAgICAgICBsZXQgcmVzdWx0T2Zmc2V0ID0gaW5wdXRPZmZzZXQ7XHJcbiAgICAgICAgd2hpbGUgKGlucHV0TGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBjb25zdCBzaWRCbG9jayA9IG5ldyBMb2NhbFJlbGF0aXZlU2lkVmFsdWVCbG9jaygpO1xyXG4gICAgICAgICAgICByZXN1bHRPZmZzZXQgPSBzaWRCbG9jay5mcm9tQkVSKGlucHV0QnVmZmVyLCByZXN1bHRPZmZzZXQsIGlucHV0TGVuZ3RoKTtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdE9mZnNldCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYmxvY2tMZW5ndGggPSAwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvciA9IHNpZEJsb2NrLmVycm9yO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdE9mZnNldDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmJsb2NrTGVuZ3RoICs9IHNpZEJsb2NrLmJsb2NrTGVuZ3RoO1xyXG4gICAgICAgICAgICBpbnB1dExlbmd0aCAtPSBzaWRCbG9jay5ibG9ja0xlbmd0aDtcclxuICAgICAgICAgICAgdGhpcy52YWx1ZS5wdXNoKHNpZEJsb2NrKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdE9mZnNldDtcclxuICAgIH1cclxuICAgIHRvQkVSKHNpemVPbmx5LCB3cml0ZXIpIHtcclxuICAgICAgICBjb25zdCByZXRCdWZmZXJzID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnZhbHVlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlQnVmID0gdGhpcy52YWx1ZVtpXS50b0JFUihzaXplT25seSk7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZUJ1Zi5ieXRlTGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yID0gdGhpcy52YWx1ZVtpXS5lcnJvcjtcclxuICAgICAgICAgICAgICAgIHJldHVybiBFTVBUWV9CVUZGRVI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0QnVmZmVycy5wdXNoKHZhbHVlQnVmKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNvbmNhdChyZXRCdWZmZXJzKTtcclxuICAgIH1cclxuICAgIGZyb21TdHJpbmcoc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IFtdO1xyXG4gICAgICAgIGxldCBwb3MxID0gMDtcclxuICAgICAgICBsZXQgcG9zMiA9IDA7XHJcbiAgICAgICAgbGV0IHNpZCA9IFwiXCI7XHJcbiAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICBwb3MyID0gc3RyaW5nLmluZGV4T2YoXCIuXCIsIHBvczEpO1xyXG4gICAgICAgICAgICBpZiAocG9zMiA9PT0gLTEpXHJcbiAgICAgICAgICAgICAgICBzaWQgPSBzdHJpbmcuc3Vic3RyaW5nKHBvczEpO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBzaWQgPSBzdHJpbmcuc3Vic3RyaW5nKHBvczEsIHBvczIpO1xyXG4gICAgICAgICAgICBwb3MxID0gcG9zMiArIDE7XHJcbiAgICAgICAgICAgIGNvbnN0IHNpZEJsb2NrID0gbmV3IExvY2FsUmVsYXRpdmVTaWRWYWx1ZUJsb2NrKCk7XHJcbiAgICAgICAgICAgIHNpZEJsb2NrLnZhbHVlRGVjID0gcGFyc2VJbnQoc2lkLCAxMCk7XHJcbiAgICAgICAgICAgIGlmIChpc05hTihzaWRCbG9jay52YWx1ZURlYykpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy52YWx1ZS5wdXNoKHNpZEJsb2NrKTtcclxuICAgICAgICB9IHdoaWxlIChwb3MyICE9PSAtMSk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICB0b1N0cmluZygpIHtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gXCJcIjtcclxuICAgICAgICBsZXQgaXNIZXhPbmx5ID0gZmFsc2U7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnZhbHVlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlzSGV4T25seSA9IHRoaXMudmFsdWVbaV0uaXNIZXhPbmx5O1xyXG4gICAgICAgICAgICBsZXQgc2lkU3RyID0gdGhpcy52YWx1ZVtpXS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICBpZiAoaSAhPT0gMClcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGAke3Jlc3VsdH0uYDtcclxuICAgICAgICAgICAgaWYgKGlzSGV4T25seSkge1xyXG4gICAgICAgICAgICAgICAgc2lkU3RyID0gYHske3NpZFN0cn19YDtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBzaWRTdHI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHNpZFN0cjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIHRvSlNPTigpIHtcclxuICAgICAgICBjb25zdCBvYmplY3QgPSB7XHJcbiAgICAgICAgICAgIC4uLnN1cGVyLnRvSlNPTigpLFxyXG4gICAgICAgICAgICB2YWx1ZTogdGhpcy50b1N0cmluZygpLFxyXG4gICAgICAgICAgICBzaWRBcnJheTogW10sXHJcbiAgICAgICAgfTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudmFsdWUubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgIG9iamVjdC5zaWRBcnJheS5wdXNoKHRoaXMudmFsdWVbaV0udG9KU09OKCkpO1xyXG4gICAgICAgIHJldHVybiBvYmplY3Q7XHJcbiAgICB9XHJcbn1cclxuTG9jYWxSZWxhdGl2ZU9iamVjdElkZW50aWZpZXJWYWx1ZUJsb2NrLk5BTUUgPSBcIlJlbGF0aXZlT2JqZWN0SWRlbnRpZmllclZhbHVlQmxvY2tcIjtcblxudmFyIF9hJGw7XHJcbmNsYXNzIFJlbGF0aXZlT2JqZWN0SWRlbnRpZmllciBleHRlbmRzIEJhc2VCbG9jayB7XHJcbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzID0ge30pIHtcclxuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzLCBMb2NhbFJlbGF0aXZlT2JqZWN0SWRlbnRpZmllclZhbHVlQmxvY2spO1xyXG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdDbGFzcyA9IDE7XHJcbiAgICAgICAgdGhpcy5pZEJsb2NrLnRhZ051bWJlciA9IDEzO1xyXG4gICAgfVxyXG4gICAgZ2V0VmFsdWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVCbG9jay50b1N0cmluZygpO1xyXG4gICAgfVxyXG4gICAgc2V0VmFsdWUodmFsdWUpIHtcclxuICAgICAgICB0aGlzLnZhbHVlQmxvY2suZnJvbVN0cmluZyh2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBvbkFzY2lpRW5jb2RpbmcoKSB7XHJcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuY29uc3RydWN0b3IuTkFNRX0gOiAke3RoaXMudmFsdWVCbG9jay50b1N0cmluZygpIHx8IFwiZW1wdHlcIn1gO1xyXG4gICAgfVxyXG4gICAgdG9KU09OKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIC4uLnN1cGVyLnRvSlNPTigpLFxyXG4gICAgICAgICAgICB2YWx1ZTogdGhpcy5nZXRWYWx1ZSgpLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuX2EkbCA9IFJlbGF0aXZlT2JqZWN0SWRlbnRpZmllcjtcclxuKCgpID0+IHtcclxuICAgIHR5cGVTdG9yZS5SZWxhdGl2ZU9iamVjdElkZW50aWZpZXIgPSBfYSRsO1xyXG59KSgpO1xyXG5SZWxhdGl2ZU9iamVjdElkZW50aWZpZXIuTkFNRSA9IFwiUmVsYXRpdmVPYmplY3RJZGVudGlmaWVyXCI7XG5cbnZhciBfYSRrO1xyXG5jbGFzcyBTZXF1ZW5jZSBleHRlbmRzIENvbnN0cnVjdGVkIHtcclxuICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMgPSB7fSkge1xyXG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMpO1xyXG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdDbGFzcyA9IDE7XHJcbiAgICAgICAgdGhpcy5pZEJsb2NrLnRhZ051bWJlciA9IDE2O1xyXG4gICAgfVxyXG59XHJcbl9hJGsgPSBTZXF1ZW5jZTtcclxuKCgpID0+IHtcclxuICAgIHR5cGVTdG9yZS5TZXF1ZW5jZSA9IF9hJGs7XHJcbn0pKCk7XHJcblNlcXVlbmNlLk5BTUUgPSBcIlNFUVVFTkNFXCI7XG5cbnZhciBfYSRqO1xyXG5jbGFzcyBTZXQgZXh0ZW5kcyBDb25zdHJ1Y3RlZCB7XHJcbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzID0ge30pIHtcclxuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcclxuICAgICAgICB0aGlzLmlkQmxvY2sudGFnQ2xhc3MgPSAxO1xyXG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdOdW1iZXIgPSAxNztcclxuICAgIH1cclxufVxyXG5fYSRqID0gU2V0O1xyXG4oKCkgPT4ge1xyXG4gICAgdHlwZVN0b3JlLlNldCA9IF9hJGo7XHJcbn0pKCk7XHJcblNldC5OQU1FID0gXCJTRVRcIjtcblxuY2xhc3MgTG9jYWxTdHJpbmdWYWx1ZUJsb2NrIGV4dGVuZHMgSGV4QmxvY2soVmFsdWVCbG9jaykge1xyXG4gICAgY29uc3RydWN0b3IoeyAuLi5wYXJhbWV0ZXJzIH0gPSB7fSkge1xyXG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMpO1xyXG4gICAgICAgIHRoaXMuaXNIZXhPbmx5ID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnZhbHVlID0gRU1QVFlfU1RSSU5HO1xyXG4gICAgfVxyXG4gICAgdG9KU09OKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIC4uLnN1cGVyLnRvSlNPTigpLFxyXG4gICAgICAgICAgICB2YWx1ZTogdGhpcy52YWx1ZSxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbkxvY2FsU3RyaW5nVmFsdWVCbG9jay5OQU1FID0gXCJTdHJpbmdWYWx1ZUJsb2NrXCI7XG5cbmNsYXNzIExvY2FsU2ltcGxlU3RyaW5nVmFsdWVCbG9jayBleHRlbmRzIExvY2FsU3RyaW5nVmFsdWVCbG9jayB7XHJcbn1cclxuTG9jYWxTaW1wbGVTdHJpbmdWYWx1ZUJsb2NrLk5BTUUgPSBcIlNpbXBsZVN0cmluZ1ZhbHVlQmxvY2tcIjtcblxuY2xhc3MgTG9jYWxTaW1wbGVTdHJpbmdCbG9jayBleHRlbmRzIEJhc2VTdHJpbmdCbG9jayB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7IC4uLnBhcmFtZXRlcnMgfSA9IHt9KSB7XHJcbiAgICAgICAgc3VwZXIocGFyYW1ldGVycywgTG9jYWxTaW1wbGVTdHJpbmdWYWx1ZUJsb2NrKTtcclxuICAgIH1cclxuICAgIGZyb21CdWZmZXIoaW5wdXRCdWZmZXIpIHtcclxuICAgICAgICB0aGlzLnZhbHVlQmxvY2sudmFsdWUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIHB2dHN1dGlsc19fbmFtZXNwYWNlLkJ1ZmZlclNvdXJjZUNvbnZlcnRlci50b1VpbnQ4QXJyYXkoaW5wdXRCdWZmZXIpKTtcclxuICAgIH1cclxuICAgIGZyb21TdHJpbmcoaW5wdXRTdHJpbmcpIHtcclxuICAgICAgICBjb25zdCBzdHJMZW4gPSBpbnB1dFN0cmluZy5sZW5ndGg7XHJcbiAgICAgICAgY29uc3QgdmlldyA9IHRoaXMudmFsdWVCbG9jay52YWx1ZUhleFZpZXcgPSBuZXcgVWludDhBcnJheShzdHJMZW4pO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyTGVuOyBpKyspXHJcbiAgICAgICAgICAgIHZpZXdbaV0gPSBpbnB1dFN0cmluZy5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgIHRoaXMudmFsdWVCbG9jay52YWx1ZSA9IGlucHV0U3RyaW5nO1xyXG4gICAgfVxyXG59XHJcbkxvY2FsU2ltcGxlU3RyaW5nQmxvY2suTkFNRSA9IFwiU0lNUExFIFNUUklOR1wiO1xuXG5jbGFzcyBMb2NhbFV0ZjhTdHJpbmdWYWx1ZUJsb2NrIGV4dGVuZHMgTG9jYWxTaW1wbGVTdHJpbmdCbG9jayB7XHJcbiAgICBmcm9tQnVmZmVyKGlucHV0QnVmZmVyKSB7XHJcbiAgICAgICAgdGhpcy52YWx1ZUJsb2NrLnZhbHVlSGV4VmlldyA9IHB2dHN1dGlsc19fbmFtZXNwYWNlLkJ1ZmZlclNvdXJjZUNvbnZlcnRlci50b1VpbnQ4QXJyYXkoaW5wdXRCdWZmZXIpO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHRoaXMudmFsdWVCbG9jay52YWx1ZSA9IHB2dHN1dGlsc19fbmFtZXNwYWNlLkNvbnZlcnQuVG9VdGY4U3RyaW5nKGlucHV0QnVmZmVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGV4KSB7XHJcbiAgICAgICAgICAgIHRoaXMud2FybmluZ3MucHVzaChgRXJyb3IgZHVyaW5nIFwiZGVjb2RlVVJJQ29tcG9uZW50XCI6ICR7ZXh9LCB1c2luZyByYXcgc3RyaW5nYCk7XHJcbiAgICAgICAgICAgIHRoaXMudmFsdWVCbG9jay52YWx1ZSA9IHB2dHN1dGlsc19fbmFtZXNwYWNlLkNvbnZlcnQuVG9CaW5hcnkoaW5wdXRCdWZmZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZyb21TdHJpbmcoaW5wdXRTdHJpbmcpIHtcclxuICAgICAgICB0aGlzLnZhbHVlQmxvY2sudmFsdWVIZXhWaWV3ID0gbmV3IFVpbnQ4QXJyYXkocHZ0c3V0aWxzX19uYW1lc3BhY2UuQ29udmVydC5Gcm9tVXRmOFN0cmluZyhpbnB1dFN0cmluZykpO1xyXG4gICAgICAgIHRoaXMudmFsdWVCbG9jay52YWx1ZSA9IGlucHV0U3RyaW5nO1xyXG4gICAgfVxyXG59XHJcbkxvY2FsVXRmOFN0cmluZ1ZhbHVlQmxvY2suTkFNRSA9IFwiVXRmOFN0cmluZ1ZhbHVlQmxvY2tcIjtcblxudmFyIF9hJGk7XHJcbmNsYXNzIFV0ZjhTdHJpbmcgZXh0ZW5kcyBMb2NhbFV0ZjhTdHJpbmdWYWx1ZUJsb2NrIHtcclxuICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMgPSB7fSkge1xyXG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMpO1xyXG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdDbGFzcyA9IDE7XHJcbiAgICAgICAgdGhpcy5pZEJsb2NrLnRhZ051bWJlciA9IDEyO1xyXG4gICAgfVxyXG59XHJcbl9hJGkgPSBVdGY4U3RyaW5nO1xyXG4oKCkgPT4ge1xyXG4gICAgdHlwZVN0b3JlLlV0ZjhTdHJpbmcgPSBfYSRpO1xyXG59KSgpO1xyXG5VdGY4U3RyaW5nLk5BTUUgPSBcIlVURjhTdHJpbmdcIjtcblxuY2xhc3MgTG9jYWxCbXBTdHJpbmdWYWx1ZUJsb2NrIGV4dGVuZHMgTG9jYWxTaW1wbGVTdHJpbmdCbG9jayB7XHJcbiAgICBmcm9tQnVmZmVyKGlucHV0QnVmZmVyKSB7XHJcbiAgICAgICAgdGhpcy52YWx1ZUJsb2NrLnZhbHVlID0gcHZ0c3V0aWxzX19uYW1lc3BhY2UuQ29udmVydC5Ub1V0ZjE2U3RyaW5nKGlucHV0QnVmZmVyKTtcclxuICAgICAgICB0aGlzLnZhbHVlQmxvY2sudmFsdWVIZXhWaWV3ID0gcHZ0c3V0aWxzX19uYW1lc3BhY2UuQnVmZmVyU291cmNlQ29udmVydGVyLnRvVWludDhBcnJheShpbnB1dEJ1ZmZlcik7XHJcbiAgICB9XHJcbiAgICBmcm9tU3RyaW5nKGlucHV0U3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy52YWx1ZUJsb2NrLnZhbHVlID0gaW5wdXRTdHJpbmc7XHJcbiAgICAgICAgdGhpcy52YWx1ZUJsb2NrLnZhbHVlSGV4VmlldyA9IG5ldyBVaW50OEFycmF5KHB2dHN1dGlsc19fbmFtZXNwYWNlLkNvbnZlcnQuRnJvbVV0ZjE2U3RyaW5nKGlucHV0U3RyaW5nKSk7XHJcbiAgICB9XHJcbn1cclxuTG9jYWxCbXBTdHJpbmdWYWx1ZUJsb2NrLk5BTUUgPSBcIkJtcFN0cmluZ1ZhbHVlQmxvY2tcIjtcblxudmFyIF9hJGg7XHJcbmNsYXNzIEJtcFN0cmluZyBleHRlbmRzIExvY2FsQm1wU3RyaW5nVmFsdWVCbG9jayB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7IC4uLnBhcmFtZXRlcnMgfSA9IHt9KSB7XHJcbiAgICAgICAgc3VwZXIocGFyYW1ldGVycyk7XHJcbiAgICAgICAgdGhpcy5pZEJsb2NrLnRhZ0NsYXNzID0gMTtcclxuICAgICAgICB0aGlzLmlkQmxvY2sudGFnTnVtYmVyID0gMzA7XHJcbiAgICB9XHJcbn1cclxuX2EkaCA9IEJtcFN0cmluZztcclxuKCgpID0+IHtcclxuICAgIHR5cGVTdG9yZS5CbXBTdHJpbmcgPSBfYSRoO1xyXG59KSgpO1xyXG5CbXBTdHJpbmcuTkFNRSA9IFwiQk1QU3RyaW5nXCI7XG5cbmNsYXNzIExvY2FsVW5pdmVyc2FsU3RyaW5nVmFsdWVCbG9jayBleHRlbmRzIExvY2FsU2ltcGxlU3RyaW5nQmxvY2sge1xyXG4gICAgZnJvbUJ1ZmZlcihpbnB1dEJ1ZmZlcikge1xyXG4gICAgICAgIGNvbnN0IGNvcHlCdWZmZXIgPSBBcnJheUJ1ZmZlci5pc1ZpZXcoaW5wdXRCdWZmZXIpID8gaW5wdXRCdWZmZXIuc2xpY2UoKS5idWZmZXIgOiBpbnB1dEJ1ZmZlci5zbGljZSgwKTtcclxuICAgICAgICBjb25zdCB2YWx1ZVZpZXcgPSBuZXcgVWludDhBcnJheShjb3B5QnVmZmVyKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlVmlldy5sZW5ndGg7IGkgKz0gNCkge1xyXG4gICAgICAgICAgICB2YWx1ZVZpZXdbaV0gPSB2YWx1ZVZpZXdbaSArIDNdO1xyXG4gICAgICAgICAgICB2YWx1ZVZpZXdbaSArIDFdID0gdmFsdWVWaWV3W2kgKyAyXTtcclxuICAgICAgICAgICAgdmFsdWVWaWV3W2kgKyAyXSA9IDB4MDA7XHJcbiAgICAgICAgICAgIHZhbHVlVmlld1tpICsgM10gPSAweDAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnZhbHVlQmxvY2sudmFsdWUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIG5ldyBVaW50MzJBcnJheShjb3B5QnVmZmVyKSk7XHJcbiAgICB9XHJcbiAgICBmcm9tU3RyaW5nKGlucHV0U3RyaW5nKSB7XHJcbiAgICAgICAgY29uc3Qgc3RyTGVuZ3RoID0gaW5wdXRTdHJpbmcubGVuZ3RoO1xyXG4gICAgICAgIGNvbnN0IHZhbHVlSGV4VmlldyA9IHRoaXMudmFsdWVCbG9jay52YWx1ZUhleFZpZXcgPSBuZXcgVWludDhBcnJheShzdHJMZW5ndGggKiA0KTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ckxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvZGVCdWYgPSBwdnV0aWxzX19uYW1lc3BhY2UudXRpbFRvQmFzZShpbnB1dFN0cmluZy5jaGFyQ29kZUF0KGkpLCA4KTtcclxuICAgICAgICAgICAgY29uc3QgY29kZVZpZXcgPSBuZXcgVWludDhBcnJheShjb2RlQnVmKTtcclxuICAgICAgICAgICAgaWYgKGNvZGVWaWV3Lmxlbmd0aCA+IDQpXHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgY29uc3QgZGlmID0gNCAtIGNvZGVWaWV3Lmxlbmd0aDtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IChjb2RlVmlldy5sZW5ndGggLSAxKTsgaiA+PSAwOyBqLS0pXHJcbiAgICAgICAgICAgICAgICB2YWx1ZUhleFZpZXdbaSAqIDQgKyBqICsgZGlmXSA9IGNvZGVWaWV3W2pdO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnZhbHVlQmxvY2sudmFsdWUgPSBpbnB1dFN0cmluZztcclxuICAgIH1cclxufVxyXG5Mb2NhbFVuaXZlcnNhbFN0cmluZ1ZhbHVlQmxvY2suTkFNRSA9IFwiVW5pdmVyc2FsU3RyaW5nVmFsdWVCbG9ja1wiO1xuXG52YXIgX2EkZztcclxuY2xhc3MgVW5pdmVyc2FsU3RyaW5nIGV4dGVuZHMgTG9jYWxVbml2ZXJzYWxTdHJpbmdWYWx1ZUJsb2NrIHtcclxuICAgIGNvbnN0cnVjdG9yKHsgLi4ucGFyYW1ldGVycyB9ID0ge30pIHtcclxuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcclxuICAgICAgICB0aGlzLmlkQmxvY2sudGFnQ2xhc3MgPSAxO1xyXG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdOdW1iZXIgPSAyODtcclxuICAgIH1cclxufVxyXG5fYSRnID0gVW5pdmVyc2FsU3RyaW5nO1xyXG4oKCkgPT4ge1xyXG4gICAgdHlwZVN0b3JlLlVuaXZlcnNhbFN0cmluZyA9IF9hJGc7XHJcbn0pKCk7XHJcblVuaXZlcnNhbFN0cmluZy5OQU1FID0gXCJVbml2ZXJzYWxTdHJpbmdcIjtcblxudmFyIF9hJGY7XHJcbmNsYXNzIE51bWVyaWNTdHJpbmcgZXh0ZW5kcyBMb2NhbFNpbXBsZVN0cmluZ0Jsb2NrIHtcclxuICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMgPSB7fSkge1xyXG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMpO1xyXG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdDbGFzcyA9IDE7XHJcbiAgICAgICAgdGhpcy5pZEJsb2NrLnRhZ051bWJlciA9IDE4O1xyXG4gICAgfVxyXG59XHJcbl9hJGYgPSBOdW1lcmljU3RyaW5nO1xyXG4oKCkgPT4ge1xyXG4gICAgdHlwZVN0b3JlLk51bWVyaWNTdHJpbmcgPSBfYSRmO1xyXG59KSgpO1xyXG5OdW1lcmljU3RyaW5nLk5BTUUgPSBcIk51bWVyaWNTdHJpbmdcIjtcblxudmFyIF9hJGU7XHJcbmNsYXNzIFByaW50YWJsZVN0cmluZyBleHRlbmRzIExvY2FsU2ltcGxlU3RyaW5nQmxvY2sge1xyXG4gICAgY29uc3RydWN0b3IocGFyYW1ldGVycyA9IHt9KSB7XHJcbiAgICAgICAgc3VwZXIocGFyYW1ldGVycyk7XHJcbiAgICAgICAgdGhpcy5pZEJsb2NrLnRhZ0NsYXNzID0gMTtcclxuICAgICAgICB0aGlzLmlkQmxvY2sudGFnTnVtYmVyID0gMTk7XHJcbiAgICB9XHJcbn1cclxuX2EkZSA9IFByaW50YWJsZVN0cmluZztcclxuKCgpID0+IHtcclxuICAgIHR5cGVTdG9yZS5QcmludGFibGVTdHJpbmcgPSBfYSRlO1xyXG59KSgpO1xyXG5QcmludGFibGVTdHJpbmcuTkFNRSA9IFwiUHJpbnRhYmxlU3RyaW5nXCI7XG5cbnZhciBfYSRkO1xyXG5jbGFzcyBUZWxldGV4U3RyaW5nIGV4dGVuZHMgTG9jYWxTaW1wbGVTdHJpbmdCbG9jayB7XHJcbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzID0ge30pIHtcclxuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcclxuICAgICAgICB0aGlzLmlkQmxvY2sudGFnQ2xhc3MgPSAxO1xyXG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdOdW1iZXIgPSAyMDtcclxuICAgIH1cclxufVxyXG5fYSRkID0gVGVsZXRleFN0cmluZztcclxuKCgpID0+IHtcclxuICAgIHR5cGVTdG9yZS5UZWxldGV4U3RyaW5nID0gX2EkZDtcclxufSkoKTtcclxuVGVsZXRleFN0cmluZy5OQU1FID0gXCJUZWxldGV4U3RyaW5nXCI7XG5cbnZhciBfYSRjO1xyXG5jbGFzcyBWaWRlb3RleFN0cmluZyBleHRlbmRzIExvY2FsU2ltcGxlU3RyaW5nQmxvY2sge1xyXG4gICAgY29uc3RydWN0b3IocGFyYW1ldGVycyA9IHt9KSB7XHJcbiAgICAgICAgc3VwZXIocGFyYW1ldGVycyk7XHJcbiAgICAgICAgdGhpcy5pZEJsb2NrLnRhZ0NsYXNzID0gMTtcclxuICAgICAgICB0aGlzLmlkQmxvY2sudGFnTnVtYmVyID0gMjE7XHJcbiAgICB9XHJcbn1cclxuX2EkYyA9IFZpZGVvdGV4U3RyaW5nO1xyXG4oKCkgPT4ge1xyXG4gICAgdHlwZVN0b3JlLlZpZGVvdGV4U3RyaW5nID0gX2EkYztcclxufSkoKTtcclxuVmlkZW90ZXhTdHJpbmcuTkFNRSA9IFwiVmlkZW90ZXhTdHJpbmdcIjtcblxudmFyIF9hJGI7XHJcbmNsYXNzIElBNVN0cmluZyBleHRlbmRzIExvY2FsU2ltcGxlU3RyaW5nQmxvY2sge1xyXG4gICAgY29uc3RydWN0b3IocGFyYW1ldGVycyA9IHt9KSB7XHJcbiAgICAgICAgc3VwZXIocGFyYW1ldGVycyk7XHJcbiAgICAgICAgdGhpcy5pZEJsb2NrLnRhZ0NsYXNzID0gMTtcclxuICAgICAgICB0aGlzLmlkQmxvY2sudGFnTnVtYmVyID0gMjI7XHJcbiAgICB9XHJcbn1cclxuX2EkYiA9IElBNVN0cmluZztcclxuKCgpID0+IHtcclxuICAgIHR5cGVTdG9yZS5JQTVTdHJpbmcgPSBfYSRiO1xyXG59KSgpO1xyXG5JQTVTdHJpbmcuTkFNRSA9IFwiSUE1U3RyaW5nXCI7XG5cbnZhciBfYSRhO1xyXG5jbGFzcyBHcmFwaGljU3RyaW5nIGV4dGVuZHMgTG9jYWxTaW1wbGVTdHJpbmdCbG9jayB7XHJcbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzID0ge30pIHtcclxuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcclxuICAgICAgICB0aGlzLmlkQmxvY2sudGFnQ2xhc3MgPSAxO1xyXG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdOdW1iZXIgPSAyNTtcclxuICAgIH1cclxufVxyXG5fYSRhID0gR3JhcGhpY1N0cmluZztcclxuKCgpID0+IHtcclxuICAgIHR5cGVTdG9yZS5HcmFwaGljU3RyaW5nID0gX2EkYTtcclxufSkoKTtcclxuR3JhcGhpY1N0cmluZy5OQU1FID0gXCJHcmFwaGljU3RyaW5nXCI7XG5cbnZhciBfYSQ5O1xyXG5jbGFzcyBWaXNpYmxlU3RyaW5nIGV4dGVuZHMgTG9jYWxTaW1wbGVTdHJpbmdCbG9jayB7XHJcbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzID0ge30pIHtcclxuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcclxuICAgICAgICB0aGlzLmlkQmxvY2sudGFnQ2xhc3MgPSAxO1xyXG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdOdW1iZXIgPSAyNjtcclxuICAgIH1cclxufVxyXG5fYSQ5ID0gVmlzaWJsZVN0cmluZztcclxuKCgpID0+IHtcclxuICAgIHR5cGVTdG9yZS5WaXNpYmxlU3RyaW5nID0gX2EkOTtcclxufSkoKTtcclxuVmlzaWJsZVN0cmluZy5OQU1FID0gXCJWaXNpYmxlU3RyaW5nXCI7XG5cbnZhciBfYSQ4O1xyXG5jbGFzcyBHZW5lcmFsU3RyaW5nIGV4dGVuZHMgTG9jYWxTaW1wbGVTdHJpbmdCbG9jayB7XHJcbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzID0ge30pIHtcclxuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcclxuICAgICAgICB0aGlzLmlkQmxvY2sudGFnQ2xhc3MgPSAxO1xyXG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdOdW1iZXIgPSAyNztcclxuICAgIH1cclxufVxyXG5fYSQ4ID0gR2VuZXJhbFN0cmluZztcclxuKCgpID0+IHtcclxuICAgIHR5cGVTdG9yZS5HZW5lcmFsU3RyaW5nID0gX2EkODtcclxufSkoKTtcclxuR2VuZXJhbFN0cmluZy5OQU1FID0gXCJHZW5lcmFsU3RyaW5nXCI7XG5cbnZhciBfYSQ3O1xyXG5jbGFzcyBDaGFyYWN0ZXJTdHJpbmcgZXh0ZW5kcyBMb2NhbFNpbXBsZVN0cmluZ0Jsb2NrIHtcclxuICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMgPSB7fSkge1xyXG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMpO1xyXG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdDbGFzcyA9IDE7XHJcbiAgICAgICAgdGhpcy5pZEJsb2NrLnRhZ051bWJlciA9IDI5O1xyXG4gICAgfVxyXG59XHJcbl9hJDcgPSBDaGFyYWN0ZXJTdHJpbmc7XHJcbigoKSA9PiB7XHJcbiAgICB0eXBlU3RvcmUuQ2hhcmFjdGVyU3RyaW5nID0gX2EkNztcclxufSkoKTtcclxuQ2hhcmFjdGVyU3RyaW5nLk5BTUUgPSBcIkNoYXJhY3RlclN0cmluZ1wiO1xuXG52YXIgX2EkNjtcclxuY2xhc3MgVVRDVGltZSBleHRlbmRzIFZpc2libGVTdHJpbmcge1xyXG4gICAgY29uc3RydWN0b3IoeyB2YWx1ZSwgdmFsdWVEYXRlLCAuLi5wYXJhbWV0ZXJzIH0gPSB7fSkge1xyXG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMpO1xyXG4gICAgICAgIHRoaXMueWVhciA9IDA7XHJcbiAgICAgICAgdGhpcy5tb250aCA9IDA7XHJcbiAgICAgICAgdGhpcy5kYXkgPSAwO1xyXG4gICAgICAgIHRoaXMuaG91ciA9IDA7XHJcbiAgICAgICAgdGhpcy5taW51dGUgPSAwO1xyXG4gICAgICAgIHRoaXMuc2Vjb25kID0gMDtcclxuICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5mcm9tU3RyaW5nKHZhbHVlKTtcclxuICAgICAgICAgICAgdGhpcy52YWx1ZUJsb2NrLnZhbHVlSGV4VmlldyA9IG5ldyBVaW50OEFycmF5KHZhbHVlLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlQmxvY2sudmFsdWVIZXhWaWV3W2ldID0gdmFsdWUuY2hhckNvZGVBdChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHZhbHVlRGF0ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmZyb21EYXRlKHZhbHVlRGF0ZSk7XHJcbiAgICAgICAgICAgIHRoaXMudmFsdWVCbG9jay52YWx1ZUhleFZpZXcgPSBuZXcgVWludDhBcnJheSh0aGlzLnRvQnVmZmVyKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmlkQmxvY2sudGFnQ2xhc3MgPSAxO1xyXG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdOdW1iZXIgPSAyMztcclxuICAgIH1cclxuICAgIGZyb21CdWZmZXIoaW5wdXRCdWZmZXIpIHtcclxuICAgICAgICB0aGlzLmZyb21TdHJpbmcoU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBwdnRzdXRpbHNfX25hbWVzcGFjZS5CdWZmZXJTb3VyY2VDb252ZXJ0ZXIudG9VaW50OEFycmF5KGlucHV0QnVmZmVyKSkpO1xyXG4gICAgfVxyXG4gICAgdG9CdWZmZXIoKSB7XHJcbiAgICAgICAgY29uc3Qgc3RyID0gdGhpcy50b1N0cmluZygpO1xyXG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihzdHIubGVuZ3RoKTtcclxuICAgICAgICBjb25zdCB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgdmlld1tpXSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgIHJldHVybiBidWZmZXI7XHJcbiAgICB9XHJcbiAgICBmcm9tRGF0ZShpbnB1dERhdGUpIHtcclxuICAgICAgICB0aGlzLnllYXIgPSBpbnB1dERhdGUuZ2V0VVRDRnVsbFllYXIoKTtcclxuICAgICAgICB0aGlzLm1vbnRoID0gaW5wdXREYXRlLmdldFVUQ01vbnRoKCkgKyAxO1xyXG4gICAgICAgIHRoaXMuZGF5ID0gaW5wdXREYXRlLmdldFVUQ0RhdGUoKTtcclxuICAgICAgICB0aGlzLmhvdXIgPSBpbnB1dERhdGUuZ2V0VVRDSG91cnMoKTtcclxuICAgICAgICB0aGlzLm1pbnV0ZSA9IGlucHV0RGF0ZS5nZXRVVENNaW51dGVzKCk7XHJcbiAgICAgICAgdGhpcy5zZWNvbmQgPSBpbnB1dERhdGUuZ2V0VVRDU2Vjb25kcygpO1xyXG4gICAgfVxyXG4gICAgdG9EYXRlKCkge1xyXG4gICAgICAgIHJldHVybiAobmV3IERhdGUoRGF0ZS5VVEModGhpcy55ZWFyLCB0aGlzLm1vbnRoIC0gMSwgdGhpcy5kYXksIHRoaXMuaG91ciwgdGhpcy5taW51dGUsIHRoaXMuc2Vjb25kKSkpO1xyXG4gICAgfVxyXG4gICAgZnJvbVN0cmluZyhpbnB1dFN0cmluZykge1xyXG4gICAgICAgIGNvbnN0IHBhcnNlciA9IC8oXFxkezJ9KShcXGR7Mn0pKFxcZHsyfSkoXFxkezJ9KShcXGR7Mn0pKFxcZHsyfSlaL2lnO1xyXG4gICAgICAgIGNvbnN0IHBhcnNlckFycmF5ID0gcGFyc2VyLmV4ZWMoaW5wdXRTdHJpbmcpO1xyXG4gICAgICAgIGlmIChwYXJzZXJBcnJheSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmVycm9yID0gXCJXcm9uZyBpbnB1dCBzdHJpbmcgZm9yIGNvbnZlcnNpb25cIjtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB5ZWFyID0gcGFyc2VJbnQocGFyc2VyQXJyYXlbMV0sIDEwKTtcclxuICAgICAgICBpZiAoeWVhciA+PSA1MClcclxuICAgICAgICAgICAgdGhpcy55ZWFyID0gMTkwMCArIHllYXI7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB0aGlzLnllYXIgPSAyMDAwICsgeWVhcjtcclxuICAgICAgICB0aGlzLm1vbnRoID0gcGFyc2VJbnQocGFyc2VyQXJyYXlbMl0sIDEwKTtcclxuICAgICAgICB0aGlzLmRheSA9IHBhcnNlSW50KHBhcnNlckFycmF5WzNdLCAxMCk7XHJcbiAgICAgICAgdGhpcy5ob3VyID0gcGFyc2VJbnQocGFyc2VyQXJyYXlbNF0sIDEwKTtcclxuICAgICAgICB0aGlzLm1pbnV0ZSA9IHBhcnNlSW50KHBhcnNlckFycmF5WzVdLCAxMCk7XHJcbiAgICAgICAgdGhpcy5zZWNvbmQgPSBwYXJzZUludChwYXJzZXJBcnJheVs2XSwgMTApO1xyXG4gICAgfVxyXG4gICAgdG9TdHJpbmcoZW5jb2RpbmcgPSBcImlzb1wiKSB7XHJcbiAgICAgICAgaWYgKGVuY29kaW5nID09PSBcImlzb1wiKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG91dHB1dEFycmF5ID0gbmV3IEFycmF5KDcpO1xyXG4gICAgICAgICAgICBvdXRwdXRBcnJheVswXSA9IHB2dXRpbHNfX25hbWVzcGFjZS5wYWROdW1iZXIoKCh0aGlzLnllYXIgPCAyMDAwKSA/ICh0aGlzLnllYXIgLSAxOTAwKSA6ICh0aGlzLnllYXIgLSAyMDAwKSksIDIpO1xyXG4gICAgICAgICAgICBvdXRwdXRBcnJheVsxXSA9IHB2dXRpbHNfX25hbWVzcGFjZS5wYWROdW1iZXIodGhpcy5tb250aCwgMik7XHJcbiAgICAgICAgICAgIG91dHB1dEFycmF5WzJdID0gcHZ1dGlsc19fbmFtZXNwYWNlLnBhZE51bWJlcih0aGlzLmRheSwgMik7XHJcbiAgICAgICAgICAgIG91dHB1dEFycmF5WzNdID0gcHZ1dGlsc19fbmFtZXNwYWNlLnBhZE51bWJlcih0aGlzLmhvdXIsIDIpO1xyXG4gICAgICAgICAgICBvdXRwdXRBcnJheVs0XSA9IHB2dXRpbHNfX25hbWVzcGFjZS5wYWROdW1iZXIodGhpcy5taW51dGUsIDIpO1xyXG4gICAgICAgICAgICBvdXRwdXRBcnJheVs1XSA9IHB2dXRpbHNfX25hbWVzcGFjZS5wYWROdW1iZXIodGhpcy5zZWNvbmQsIDIpO1xyXG4gICAgICAgICAgICBvdXRwdXRBcnJheVs2XSA9IFwiWlwiO1xyXG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0QXJyYXkuam9pbihcIlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHN1cGVyLnRvU3RyaW5nKGVuY29kaW5nKTtcclxuICAgIH1cclxuICAgIG9uQXNjaWlFbmNvZGluZygpIHtcclxuICAgICAgICByZXR1cm4gYCR7dGhpcy5jb25zdHJ1Y3Rvci5OQU1FfSA6ICR7dGhpcy50b0RhdGUoKS50b0lTT1N0cmluZygpfWA7XHJcbiAgICB9XHJcbiAgICB0b0pTT04oKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgLi4uc3VwZXIudG9KU09OKCksXHJcbiAgICAgICAgICAgIHllYXI6IHRoaXMueWVhcixcclxuICAgICAgICAgICAgbW9udGg6IHRoaXMubW9udGgsXHJcbiAgICAgICAgICAgIGRheTogdGhpcy5kYXksXHJcbiAgICAgICAgICAgIGhvdXI6IHRoaXMuaG91cixcclxuICAgICAgICAgICAgbWludXRlOiB0aGlzLm1pbnV0ZSxcclxuICAgICAgICAgICAgc2Vjb25kOiB0aGlzLnNlY29uZCxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbl9hJDYgPSBVVENUaW1lO1xyXG4oKCkgPT4ge1xyXG4gICAgdHlwZVN0b3JlLlVUQ1RpbWUgPSBfYSQ2O1xyXG59KSgpO1xyXG5VVENUaW1lLk5BTUUgPSBcIlVUQ1RpbWVcIjtcblxudmFyIF9hJDU7XHJcbmNsYXNzIEdlbmVyYWxpemVkVGltZSBleHRlbmRzIFVUQ1RpbWUge1xyXG4gICAgY29uc3RydWN0b3IocGFyYW1ldGVycyA9IHt9KSB7XHJcbiAgICAgICAgdmFyIF9iO1xyXG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMpO1xyXG4gICAgICAgIChfYiA9IHRoaXMubWlsbGlzZWNvbmQpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICh0aGlzLm1pbGxpc2Vjb25kID0gMCk7XHJcbiAgICAgICAgdGhpcy5pZEJsb2NrLnRhZ0NsYXNzID0gMTtcclxuICAgICAgICB0aGlzLmlkQmxvY2sudGFnTnVtYmVyID0gMjQ7XHJcbiAgICB9XHJcbiAgICBmcm9tRGF0ZShpbnB1dERhdGUpIHtcclxuICAgICAgICBzdXBlci5mcm9tRGF0ZShpbnB1dERhdGUpO1xyXG4gICAgICAgIHRoaXMubWlsbGlzZWNvbmQgPSBpbnB1dERhdGUuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XHJcbiAgICB9XHJcbiAgICB0b0RhdGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIChuZXcgRGF0ZShEYXRlLlVUQyh0aGlzLnllYXIsIHRoaXMubW9udGggLSAxLCB0aGlzLmRheSwgdGhpcy5ob3VyLCB0aGlzLm1pbnV0ZSwgdGhpcy5zZWNvbmQsIHRoaXMubWlsbGlzZWNvbmQpKSk7XHJcbiAgICB9XHJcbiAgICBmcm9tU3RyaW5nKGlucHV0U3RyaW5nKSB7XHJcbiAgICAgICAgbGV0IGlzVVRDID0gZmFsc2U7XHJcbiAgICAgICAgbGV0IHRpbWVTdHJpbmcgPSBcIlwiO1xyXG4gICAgICAgIGxldCBkYXRlVGltZVN0cmluZyA9IFwiXCI7XHJcbiAgICAgICAgbGV0IGZyYWN0aW9uUGFydCA9IDA7XHJcbiAgICAgICAgbGV0IHBhcnNlcjtcclxuICAgICAgICBsZXQgaG91ckRpZmZlcmVuY2UgPSAwO1xyXG4gICAgICAgIGxldCBtaW51dGVEaWZmZXJlbmNlID0gMDtcclxuICAgICAgICBpZiAoaW5wdXRTdHJpbmdbaW5wdXRTdHJpbmcubGVuZ3RoIC0gMV0gPT09IFwiWlwiKSB7XHJcbiAgICAgICAgICAgIHRpbWVTdHJpbmcgPSBpbnB1dFN0cmluZy5zdWJzdHJpbmcoMCwgaW5wdXRTdHJpbmcubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgICAgIGlzVVRDID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG51bWJlciA9IG5ldyBOdW1iZXIoaW5wdXRTdHJpbmdbaW5wdXRTdHJpbmcubGVuZ3RoIC0gMV0pO1xyXG4gICAgICAgICAgICBpZiAoaXNOYU4obnVtYmVyLnZhbHVlT2YoKSkpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJXcm9uZyBpbnB1dCBzdHJpbmcgZm9yIGNvbnZlcnNpb25cIik7XHJcbiAgICAgICAgICAgIHRpbWVTdHJpbmcgPSBpbnB1dFN0cmluZztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlzVVRDKSB7XHJcbiAgICAgICAgICAgIGlmICh0aW1lU3RyaW5nLmluZGV4T2YoXCIrXCIpICE9PSAtMSlcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIldyb25nIGlucHV0IHN0cmluZyBmb3IgY29udmVyc2lvblwiKTtcclxuICAgICAgICAgICAgaWYgKHRpbWVTdHJpbmcuaW5kZXhPZihcIi1cIikgIT09IC0xKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiV3JvbmcgaW5wdXQgc3RyaW5nIGZvciBjb252ZXJzaW9uXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbGV0IG11bHRpcGxpZXIgPSAxO1xyXG4gICAgICAgICAgICBsZXQgZGlmZmVyZW5jZVBvc2l0aW9uID0gdGltZVN0cmluZy5pbmRleE9mKFwiK1wiKTtcclxuICAgICAgICAgICAgbGV0IGRpZmZlcmVuY2VTdHJpbmcgPSBcIlwiO1xyXG4gICAgICAgICAgICBpZiAoZGlmZmVyZW5jZVBvc2l0aW9uID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgZGlmZmVyZW5jZVBvc2l0aW9uID0gdGltZVN0cmluZy5pbmRleE9mKFwiLVwiKTtcclxuICAgICAgICAgICAgICAgIG11bHRpcGxpZXIgPSAtMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZGlmZmVyZW5jZVBvc2l0aW9uICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgZGlmZmVyZW5jZVN0cmluZyA9IHRpbWVTdHJpbmcuc3Vic3RyaW5nKGRpZmZlcmVuY2VQb3NpdGlvbiArIDEpO1xyXG4gICAgICAgICAgICAgICAgdGltZVN0cmluZyA9IHRpbWVTdHJpbmcuc3Vic3RyaW5nKDAsIGRpZmZlcmVuY2VQb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICBpZiAoKGRpZmZlcmVuY2VTdHJpbmcubGVuZ3RoICE9PSAyKSAmJiAoZGlmZmVyZW5jZVN0cmluZy5sZW5ndGggIT09IDQpKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIldyb25nIGlucHV0IHN0cmluZyBmb3IgY29udmVyc2lvblwiKTtcclxuICAgICAgICAgICAgICAgIGxldCBudW1iZXIgPSBwYXJzZUludChkaWZmZXJlbmNlU3RyaW5nLnN1YnN0cmluZygwLCAyKSwgMTApO1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzTmFOKG51bWJlci52YWx1ZU9mKCkpKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIldyb25nIGlucHV0IHN0cmluZyBmb3IgY29udmVyc2lvblwiKTtcclxuICAgICAgICAgICAgICAgIGhvdXJEaWZmZXJlbmNlID0gbXVsdGlwbGllciAqIG51bWJlcjtcclxuICAgICAgICAgICAgICAgIGlmIChkaWZmZXJlbmNlU3RyaW5nLmxlbmd0aCA9PT0gNCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG51bWJlciA9IHBhcnNlSW50KGRpZmZlcmVuY2VTdHJpbmcuc3Vic3RyaW5nKDIsIDQpLCAxMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKG51bWJlci52YWx1ZU9mKCkpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJXcm9uZyBpbnB1dCBzdHJpbmcgZm9yIGNvbnZlcnNpb25cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgbWludXRlRGlmZmVyZW5jZSA9IG11bHRpcGxpZXIgKiBudW1iZXI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGZyYWN0aW9uUG9pbnRQb3NpdGlvbiA9IHRpbWVTdHJpbmcuaW5kZXhPZihcIi5cIik7XHJcbiAgICAgICAgaWYgKGZyYWN0aW9uUG9pbnRQb3NpdGlvbiA9PT0gLTEpXHJcbiAgICAgICAgICAgIGZyYWN0aW9uUG9pbnRQb3NpdGlvbiA9IHRpbWVTdHJpbmcuaW5kZXhPZihcIixcIik7XHJcbiAgICAgICAgaWYgKGZyYWN0aW9uUG9pbnRQb3NpdGlvbiAhPT0gLTEpIHtcclxuICAgICAgICAgICAgY29uc3QgZnJhY3Rpb25QYXJ0Q2hlY2sgPSBuZXcgTnVtYmVyKGAwJHt0aW1lU3RyaW5nLnN1YnN0cmluZyhmcmFjdGlvblBvaW50UG9zaXRpb24pfWApO1xyXG4gICAgICAgICAgICBpZiAoaXNOYU4oZnJhY3Rpb25QYXJ0Q2hlY2sudmFsdWVPZigpKSlcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIldyb25nIGlucHV0IHN0cmluZyBmb3IgY29udmVyc2lvblwiKTtcclxuICAgICAgICAgICAgZnJhY3Rpb25QYXJ0ID0gZnJhY3Rpb25QYXJ0Q2hlY2sudmFsdWVPZigpO1xyXG4gICAgICAgICAgICBkYXRlVGltZVN0cmluZyA9IHRpbWVTdHJpbmcuc3Vic3RyaW5nKDAsIGZyYWN0aW9uUG9pbnRQb3NpdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgZGF0ZVRpbWVTdHJpbmcgPSB0aW1lU3RyaW5nO1xyXG4gICAgICAgIHN3aXRjaCAodHJ1ZSkge1xyXG4gICAgICAgICAgICBjYXNlIChkYXRlVGltZVN0cmluZy5sZW5ndGggPT09IDgpOlxyXG4gICAgICAgICAgICAgICAgcGFyc2VyID0gLyhcXGR7NH0pKFxcZHsyfSkoXFxkezJ9KS9pZztcclxuICAgICAgICAgICAgICAgIGlmIChmcmFjdGlvblBvaW50UG9zaXRpb24gIT09IC0xKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIldyb25nIGlucHV0IHN0cmluZyBmb3IgY29udmVyc2lvblwiKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIChkYXRlVGltZVN0cmluZy5sZW5ndGggPT09IDEwKTpcclxuICAgICAgICAgICAgICAgIHBhcnNlciA9IC8oXFxkezR9KShcXGR7Mn0pKFxcZHsyfSkoXFxkezJ9KS9pZztcclxuICAgICAgICAgICAgICAgIGlmIChmcmFjdGlvblBvaW50UG9zaXRpb24gIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZyYWN0aW9uUmVzdWx0ID0gNjAgKiBmcmFjdGlvblBhcnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5taW51dGUgPSBNYXRoLmZsb29yKGZyYWN0aW9uUmVzdWx0KTtcclxuICAgICAgICAgICAgICAgICAgICBmcmFjdGlvblJlc3VsdCA9IDYwICogKGZyYWN0aW9uUmVzdWx0IC0gdGhpcy5taW51dGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2Vjb25kID0gTWF0aC5mbG9vcihmcmFjdGlvblJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZnJhY3Rpb25SZXN1bHQgPSAxMDAwICogKGZyYWN0aW9uUmVzdWx0IC0gdGhpcy5zZWNvbmQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWlsbGlzZWNvbmQgPSBNYXRoLmZsb29yKGZyYWN0aW9uUmVzdWx0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIChkYXRlVGltZVN0cmluZy5sZW5ndGggPT09IDEyKTpcclxuICAgICAgICAgICAgICAgIHBhcnNlciA9IC8oXFxkezR9KShcXGR7Mn0pKFxcZHsyfSkoXFxkezJ9KShcXGR7Mn0pL2lnO1xyXG4gICAgICAgICAgICAgICAgaWYgKGZyYWN0aW9uUG9pbnRQb3NpdGlvbiAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZnJhY3Rpb25SZXN1bHQgPSA2MCAqIGZyYWN0aW9uUGFydDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlY29uZCA9IE1hdGguZmxvb3IoZnJhY3Rpb25SZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZyYWN0aW9uUmVzdWx0ID0gMTAwMCAqIChmcmFjdGlvblJlc3VsdCAtIHRoaXMuc2Vjb25kKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1pbGxpc2Vjb25kID0gTWF0aC5mbG9vcihmcmFjdGlvblJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAoZGF0ZVRpbWVTdHJpbmcubGVuZ3RoID09PSAxNCk6XHJcbiAgICAgICAgICAgICAgICBwYXJzZXIgPSAvKFxcZHs0fSkoXFxkezJ9KShcXGR7Mn0pKFxcZHsyfSkoXFxkezJ9KShcXGR7Mn0pL2lnO1xyXG4gICAgICAgICAgICAgICAgaWYgKGZyYWN0aW9uUG9pbnRQb3NpdGlvbiAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmcmFjdGlvblJlc3VsdCA9IDEwMDAgKiBmcmFjdGlvblBhcnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5taWxsaXNlY29uZCA9IE1hdGguZmxvb3IoZnJhY3Rpb25SZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJXcm9uZyBpbnB1dCBzdHJpbmcgZm9yIGNvbnZlcnNpb25cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHBhcnNlckFycmF5ID0gcGFyc2VyLmV4ZWMoZGF0ZVRpbWVTdHJpbmcpO1xyXG4gICAgICAgIGlmIChwYXJzZXJBcnJheSA9PT0gbnVsbClcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiV3JvbmcgaW5wdXQgc3RyaW5nIGZvciBjb252ZXJzaW9uXCIpO1xyXG4gICAgICAgIGZvciAobGV0IGogPSAxOyBqIDwgcGFyc2VyQXJyYXkubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgc3dpdGNoIChqKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55ZWFyID0gcGFyc2VJbnQocGFyc2VyQXJyYXlbal0sIDEwKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vbnRoID0gcGFyc2VJbnQocGFyc2VyQXJyYXlbal0sIDEwKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRheSA9IHBhcnNlSW50KHBhcnNlckFycmF5W2pdLCAxMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ob3VyID0gcGFyc2VJbnQocGFyc2VyQXJyYXlbal0sIDEwKSArIGhvdXJEaWZmZXJlbmNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWludXRlID0gcGFyc2VJbnQocGFyc2VyQXJyYXlbal0sIDEwKSArIG1pbnV0ZURpZmZlcmVuY2U7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDY6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWNvbmQgPSBwYXJzZUludChwYXJzZXJBcnJheVtqXSwgMTApO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJXcm9uZyBpbnB1dCBzdHJpbmcgZm9yIGNvbnZlcnNpb25cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlzVVRDID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBjb25zdCB0ZW1wRGF0ZSA9IG5ldyBEYXRlKHRoaXMueWVhciwgdGhpcy5tb250aCwgdGhpcy5kYXksIHRoaXMuaG91ciwgdGhpcy5taW51dGUsIHRoaXMuc2Vjb25kLCB0aGlzLm1pbGxpc2Vjb25kKTtcclxuICAgICAgICAgICAgdGhpcy55ZWFyID0gdGVtcERhdGUuZ2V0VVRDRnVsbFllYXIoKTtcclxuICAgICAgICAgICAgdGhpcy5tb250aCA9IHRlbXBEYXRlLmdldFVUQ01vbnRoKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZGF5ID0gdGVtcERhdGUuZ2V0VVRDRGF5KCk7XHJcbiAgICAgICAgICAgIHRoaXMuaG91ciA9IHRlbXBEYXRlLmdldFVUQ0hvdXJzKCk7XHJcbiAgICAgICAgICAgIHRoaXMubWludXRlID0gdGVtcERhdGUuZ2V0VVRDTWludXRlcygpO1xyXG4gICAgICAgICAgICB0aGlzLnNlY29uZCA9IHRlbXBEYXRlLmdldFVUQ1NlY29uZHMoKTtcclxuICAgICAgICAgICAgdGhpcy5taWxsaXNlY29uZCA9IHRlbXBEYXRlLmdldFVUQ01pbGxpc2Vjb25kcygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHRvU3RyaW5nKGVuY29kaW5nID0gXCJpc29cIikge1xyXG4gICAgICAgIGlmIChlbmNvZGluZyA9PT0gXCJpc29cIikge1xyXG4gICAgICAgICAgICBjb25zdCBvdXRwdXRBcnJheSA9IFtdO1xyXG4gICAgICAgICAgICBvdXRwdXRBcnJheS5wdXNoKHB2dXRpbHNfX25hbWVzcGFjZS5wYWROdW1iZXIodGhpcy55ZWFyLCA0KSk7XHJcbiAgICAgICAgICAgIG91dHB1dEFycmF5LnB1c2gocHZ1dGlsc19fbmFtZXNwYWNlLnBhZE51bWJlcih0aGlzLm1vbnRoLCAyKSk7XHJcbiAgICAgICAgICAgIG91dHB1dEFycmF5LnB1c2gocHZ1dGlsc19fbmFtZXNwYWNlLnBhZE51bWJlcih0aGlzLmRheSwgMikpO1xyXG4gICAgICAgICAgICBvdXRwdXRBcnJheS5wdXNoKHB2dXRpbHNfX25hbWVzcGFjZS5wYWROdW1iZXIodGhpcy5ob3VyLCAyKSk7XHJcbiAgICAgICAgICAgIG91dHB1dEFycmF5LnB1c2gocHZ1dGlsc19fbmFtZXNwYWNlLnBhZE51bWJlcih0aGlzLm1pbnV0ZSwgMikpO1xyXG4gICAgICAgICAgICBvdXRwdXRBcnJheS5wdXNoKHB2dXRpbHNfX25hbWVzcGFjZS5wYWROdW1iZXIodGhpcy5zZWNvbmQsIDIpKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMubWlsbGlzZWNvbmQgIT09IDApIHtcclxuICAgICAgICAgICAgICAgIG91dHB1dEFycmF5LnB1c2goXCIuXCIpO1xyXG4gICAgICAgICAgICAgICAgb3V0cHV0QXJyYXkucHVzaChwdnV0aWxzX19uYW1lc3BhY2UucGFkTnVtYmVyKHRoaXMubWlsbGlzZWNvbmQsIDMpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvdXRwdXRBcnJheS5wdXNoKFwiWlwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dEFycmF5LmpvaW4oXCJcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzdXBlci50b1N0cmluZyhlbmNvZGluZyk7XHJcbiAgICB9XHJcbiAgICB0b0pTT04oKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgLi4uc3VwZXIudG9KU09OKCksXHJcbiAgICAgICAgICAgIG1pbGxpc2Vjb25kOiB0aGlzLm1pbGxpc2Vjb25kLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuX2EkNSA9IEdlbmVyYWxpemVkVGltZTtcclxuKCgpID0+IHtcclxuICAgIHR5cGVTdG9yZS5HZW5lcmFsaXplZFRpbWUgPSBfYSQ1O1xyXG59KSgpO1xyXG5HZW5lcmFsaXplZFRpbWUuTkFNRSA9IFwiR2VuZXJhbGl6ZWRUaW1lXCI7XG5cbnZhciBfYSQ0O1xyXG5jbGFzcyBEQVRFIGV4dGVuZHMgVXRmOFN0cmluZyB7XHJcbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzID0ge30pIHtcclxuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcclxuICAgICAgICB0aGlzLmlkQmxvY2sudGFnQ2xhc3MgPSAxO1xyXG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdOdW1iZXIgPSAzMTtcclxuICAgIH1cclxufVxyXG5fYSQ0ID0gREFURTtcclxuKCgpID0+IHtcclxuICAgIHR5cGVTdG9yZS5EQVRFID0gX2EkNDtcclxufSkoKTtcclxuREFURS5OQU1FID0gXCJEQVRFXCI7XG5cbnZhciBfYSQzO1xyXG5jbGFzcyBUaW1lT2ZEYXkgZXh0ZW5kcyBVdGY4U3RyaW5nIHtcclxuICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMgPSB7fSkge1xyXG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMpO1xyXG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdDbGFzcyA9IDE7XHJcbiAgICAgICAgdGhpcy5pZEJsb2NrLnRhZ051bWJlciA9IDMyO1xyXG4gICAgfVxyXG59XHJcbl9hJDMgPSBUaW1lT2ZEYXk7XHJcbigoKSA9PiB7XHJcbiAgICB0eXBlU3RvcmUuVGltZU9mRGF5ID0gX2EkMztcclxufSkoKTtcclxuVGltZU9mRGF5Lk5BTUUgPSBcIlRpbWVPZkRheVwiO1xuXG52YXIgX2EkMjtcclxuY2xhc3MgRGF0ZVRpbWUgZXh0ZW5kcyBVdGY4U3RyaW5nIHtcclxuICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMgPSB7fSkge1xyXG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMpO1xyXG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdDbGFzcyA9IDE7XHJcbiAgICAgICAgdGhpcy5pZEJsb2NrLnRhZ051bWJlciA9IDMzO1xyXG4gICAgfVxyXG59XHJcbl9hJDIgPSBEYXRlVGltZTtcclxuKCgpID0+IHtcclxuICAgIHR5cGVTdG9yZS5EYXRlVGltZSA9IF9hJDI7XHJcbn0pKCk7XHJcbkRhdGVUaW1lLk5BTUUgPSBcIkRhdGVUaW1lXCI7XG5cbnZhciBfYSQxO1xyXG5jbGFzcyBEdXJhdGlvbiBleHRlbmRzIFV0ZjhTdHJpbmcge1xyXG4gICAgY29uc3RydWN0b3IocGFyYW1ldGVycyA9IHt9KSB7XHJcbiAgICAgICAgc3VwZXIocGFyYW1ldGVycyk7XHJcbiAgICAgICAgdGhpcy5pZEJsb2NrLnRhZ0NsYXNzID0gMTtcclxuICAgICAgICB0aGlzLmlkQmxvY2sudGFnTnVtYmVyID0gMzQ7XHJcbiAgICB9XHJcbn1cclxuX2EkMSA9IER1cmF0aW9uO1xyXG4oKCkgPT4ge1xyXG4gICAgdHlwZVN0b3JlLkR1cmF0aW9uID0gX2EkMTtcclxufSkoKTtcclxuRHVyYXRpb24uTkFNRSA9IFwiRHVyYXRpb25cIjtcblxudmFyIF9hO1xyXG5jbGFzcyBUSU1FIGV4dGVuZHMgVXRmOFN0cmluZyB7XHJcbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzID0ge30pIHtcclxuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcclxuICAgICAgICB0aGlzLmlkQmxvY2sudGFnQ2xhc3MgPSAxO1xyXG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdOdW1iZXIgPSAxNDtcclxuICAgIH1cclxufVxyXG5fYSA9IFRJTUU7XHJcbigoKSA9PiB7XHJcbiAgICB0eXBlU3RvcmUuVElNRSA9IF9hO1xyXG59KSgpO1xyXG5USU1FLk5BTUUgPSBcIlRJTUVcIjtcblxuY2xhc3MgQW55IHtcclxuICAgIGNvbnN0cnVjdG9yKHsgbmFtZSA9IEVNUFRZX1NUUklORywgb3B0aW9uYWwgPSBmYWxzZSwgfSA9IHt9KSB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLm9wdGlvbmFsID0gb3B0aW9uYWw7XHJcbiAgICB9XHJcbn1cblxuY2xhc3MgQ2hvaWNlIGV4dGVuZHMgQW55IHtcclxuICAgIGNvbnN0cnVjdG9yKHsgdmFsdWUgPSBbXSwgLi4ucGFyYW1ldGVycyB9ID0ge30pIHtcclxuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcclxuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgICB9XHJcbn1cblxuY2xhc3MgUmVwZWF0ZWQgZXh0ZW5kcyBBbnkge1xyXG4gICAgY29uc3RydWN0b3IoeyB2YWx1ZSA9IG5ldyBBbnkoKSwgbG9jYWwgPSBmYWxzZSwgLi4ucGFyYW1ldGVycyB9ID0ge30pIHtcclxuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcclxuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5sb2NhbCA9IGxvY2FsO1xyXG4gICAgfVxyXG59XG5cbmNsYXNzIFJhd0RhdGEge1xyXG4gICAgY29uc3RydWN0b3IoeyBkYXRhID0gRU1QVFlfVklFVyB9ID0ge30pIHtcclxuICAgICAgICB0aGlzLmRhdGFWaWV3ID0gcHZ0c3V0aWxzX19uYW1lc3BhY2UuQnVmZmVyU291cmNlQ29udmVydGVyLnRvVWludDhBcnJheShkYXRhKTtcclxuICAgIH1cclxuICAgIGdldCBkYXRhKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFWaWV3LnNsaWNlKCkuYnVmZmVyO1xyXG4gICAgfVxyXG4gICAgc2V0IGRhdGEodmFsdWUpIHtcclxuICAgICAgICB0aGlzLmRhdGFWaWV3ID0gcHZ0c3V0aWxzX19uYW1lc3BhY2UuQnVmZmVyU291cmNlQ29udmVydGVyLnRvVWludDhBcnJheSh2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBmcm9tQkVSKGlucHV0QnVmZmVyLCBpbnB1dE9mZnNldCwgaW5wdXRMZW5ndGgpIHtcclxuICAgICAgICBjb25zdCBlbmRMZW5ndGggPSBpbnB1dE9mZnNldCArIGlucHV0TGVuZ3RoO1xyXG4gICAgICAgIHRoaXMuZGF0YVZpZXcgPSBwdnRzdXRpbHNfX25hbWVzcGFjZS5CdWZmZXJTb3VyY2VDb252ZXJ0ZXIudG9VaW50OEFycmF5KGlucHV0QnVmZmVyKS5zdWJhcnJheShpbnB1dE9mZnNldCwgZW5kTGVuZ3RoKTtcclxuICAgICAgICByZXR1cm4gZW5kTGVuZ3RoO1xyXG4gICAgfVxyXG4gICAgdG9CRVIoc2l6ZU9ubHkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhVmlldy5zbGljZSgpLmJ1ZmZlcjtcclxuICAgIH1cclxufVxuXG5mdW5jdGlvbiBjb21wYXJlU2NoZW1hKHJvb3QsIGlucHV0RGF0YSwgaW5wdXRTY2hlbWEpIHtcclxuICAgIGlmIChpbnB1dFNjaGVtYSBpbnN0YW5jZW9mIENob2ljZSkge1xyXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgaW5wdXRTY2hlbWEudmFsdWUubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gY29tcGFyZVNjaGVtYShyb290LCBpbnB1dERhdGEsIGlucHV0U2NoZW1hLnZhbHVlW2pdKTtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdC52ZXJpZmllZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICB2ZXJpZmllZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IHJvb3RcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCBfcmVzdWx0ID0ge1xyXG4gICAgICAgICAgICAgICAgdmVyaWZpZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgcmVzdWx0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IFwiV3JvbmcgdmFsdWVzIGZvciBDaG9pY2UgdHlwZVwiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBpZiAoaW5wdXRTY2hlbWEuaGFzT3duUHJvcGVydHkoTkFNRSkpXHJcbiAgICAgICAgICAgICAgICBfcmVzdWx0Lm5hbWUgPSBpbnB1dFNjaGVtYS5uYW1lO1xyXG4gICAgICAgICAgICByZXR1cm4gX3Jlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoaW5wdXRTY2hlbWEgaW5zdGFuY2VvZiBBbnkpIHtcclxuICAgICAgICBpZiAoaW5wdXRTY2hlbWEuaGFzT3duUHJvcGVydHkoTkFNRSkpXHJcbiAgICAgICAgICAgIHJvb3RbaW5wdXRTY2hlbWEubmFtZV0gPSBpbnB1dERhdGE7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdmVyaWZpZWQ6IHRydWUsXHJcbiAgICAgICAgICAgIHJlc3VsdDogcm9vdFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBpZiAoKHJvb3QgaW5zdGFuY2VvZiBPYmplY3QpID09PSBmYWxzZSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHZlcmlmaWVkOiBmYWxzZSxcclxuICAgICAgICAgICAgcmVzdWx0OiB7IGVycm9yOiBcIldyb25nIHJvb3Qgb2JqZWN0XCIgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBpZiAoKGlucHV0RGF0YSBpbnN0YW5jZW9mIE9iamVjdCkgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdmVyaWZpZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICByZXN1bHQ6IHsgZXJyb3I6IFwiV3JvbmcgQVNOLjEgZGF0YVwiIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgaWYgKChpbnB1dFNjaGVtYSBpbnN0YW5jZW9mIE9iamVjdCkgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdmVyaWZpZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICByZXN1bHQ6IHsgZXJyb3I6IFwiV3JvbmcgQVNOLjEgc2NoZW1hXCIgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBpZiAoKElEX0JMT0NLIGluIGlucHV0U2NoZW1hKSA9PT0gZmFsc2UpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB2ZXJpZmllZDogZmFsc2UsXHJcbiAgICAgICAgICAgIHJlc3VsdDogeyBlcnJvcjogXCJXcm9uZyBBU04uMSBzY2hlbWFcIiB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGlmICgoRlJPTV9CRVIgaW4gaW5wdXRTY2hlbWEuaWRCbG9jaykgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdmVyaWZpZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICByZXN1bHQ6IHsgZXJyb3I6IFwiV3JvbmcgQVNOLjEgc2NoZW1hXCIgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBpZiAoKFRPX0JFUiBpbiBpbnB1dFNjaGVtYS5pZEJsb2NrKSA9PT0gZmFsc2UpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB2ZXJpZmllZDogZmFsc2UsXHJcbiAgICAgICAgICAgIHJlc3VsdDogeyBlcnJvcjogXCJXcm9uZyBBU04uMSBzY2hlbWFcIiB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGNvbnN0IGVuY29kZWRJZCA9IGlucHV0U2NoZW1hLmlkQmxvY2sudG9CRVIoZmFsc2UpO1xyXG4gICAgaWYgKGVuY29kZWRJZC5ieXRlTGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdmVyaWZpZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICByZXN1bHQ6IHsgZXJyb3I6IFwiRXJyb3IgZW5jb2RpbmcgaWRCbG9jayBmb3IgQVNOLjEgc2NoZW1hXCIgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBjb25zdCBkZWNvZGVkT2Zmc2V0ID0gaW5wdXRTY2hlbWEuaWRCbG9jay5mcm9tQkVSKGVuY29kZWRJZCwgMCwgZW5jb2RlZElkLmJ5dGVMZW5ndGgpO1xyXG4gICAgaWYgKGRlY29kZWRPZmZzZXQgPT09IC0xKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdmVyaWZpZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICByZXN1bHQ6IHsgZXJyb3I6IFwiRXJyb3IgZGVjb2RpbmcgaWRCbG9jayBmb3IgQVNOLjEgc2NoZW1hXCIgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBpZiAoaW5wdXRTY2hlbWEuaWRCbG9jay5oYXNPd25Qcm9wZXJ0eShUQUdfQ0xBU1MpID09PSBmYWxzZSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHZlcmlmaWVkOiBmYWxzZSxcclxuICAgICAgICAgICAgcmVzdWx0OiB7IGVycm9yOiBcIldyb25nIEFTTi4xIHNjaGVtYVwiIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgaWYgKGlucHV0U2NoZW1hLmlkQmxvY2sudGFnQ2xhc3MgIT09IGlucHV0RGF0YS5pZEJsb2NrLnRhZ0NsYXNzKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdmVyaWZpZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICByZXN1bHQ6IHJvb3RcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgaWYgKGlucHV0U2NoZW1hLmlkQmxvY2suaGFzT3duUHJvcGVydHkoVEFHX05VTUJFUikgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdmVyaWZpZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICByZXN1bHQ6IHsgZXJyb3I6IFwiV3JvbmcgQVNOLjEgc2NoZW1hXCIgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBpZiAoaW5wdXRTY2hlbWEuaWRCbG9jay50YWdOdW1iZXIgIT09IGlucHV0RGF0YS5pZEJsb2NrLnRhZ051bWJlcikge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHZlcmlmaWVkOiBmYWxzZSxcclxuICAgICAgICAgICAgcmVzdWx0OiByb290XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGlmIChpbnB1dFNjaGVtYS5pZEJsb2NrLmhhc093blByb3BlcnR5KElTX0NPTlNUUlVDVEVEKSA9PT0gZmFsc2UpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB2ZXJpZmllZDogZmFsc2UsXHJcbiAgICAgICAgICAgIHJlc3VsdDogeyBlcnJvcjogXCJXcm9uZyBBU04uMSBzY2hlbWFcIiB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGlmIChpbnB1dFNjaGVtYS5pZEJsb2NrLmlzQ29uc3RydWN0ZWQgIT09IGlucHV0RGF0YS5pZEJsb2NrLmlzQ29uc3RydWN0ZWQpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB2ZXJpZmllZDogZmFsc2UsXHJcbiAgICAgICAgICAgIHJlc3VsdDogcm9vdFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBpZiAoIShJU19IRVhfT05MWSBpbiBpbnB1dFNjaGVtYS5pZEJsb2NrKSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHZlcmlmaWVkOiBmYWxzZSxcclxuICAgICAgICAgICAgcmVzdWx0OiB7IGVycm9yOiBcIldyb25nIEFTTi4xIHNjaGVtYVwiIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgaWYgKGlucHV0U2NoZW1hLmlkQmxvY2suaXNIZXhPbmx5ICE9PSBpbnB1dERhdGEuaWRCbG9jay5pc0hleE9ubHkpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB2ZXJpZmllZDogZmFsc2UsXHJcbiAgICAgICAgICAgIHJlc3VsdDogcm9vdFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBpZiAoaW5wdXRTY2hlbWEuaWRCbG9jay5pc0hleE9ubHkpIHtcclxuICAgICAgICBpZiAoKFZBTFVFX0hFWF9WSUVXIGluIGlucHV0U2NoZW1hLmlkQmxvY2spID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdmVyaWZpZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgcmVzdWx0OiB7IGVycm9yOiBcIldyb25nIEFTTi4xIHNjaGVtYVwiIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgc2NoZW1hVmlldyA9IGlucHV0U2NoZW1hLmlkQmxvY2sudmFsdWVIZXhWaWV3O1xyXG4gICAgICAgIGNvbnN0IGFzbjFWaWV3ID0gaW5wdXREYXRhLmlkQmxvY2sudmFsdWVIZXhWaWV3O1xyXG4gICAgICAgIGlmIChzY2hlbWFWaWV3Lmxlbmd0aCAhPT0gYXNuMVZpZXcubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICB2ZXJpZmllZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICByZXN1bHQ6IHJvb3RcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzY2hlbWFWaWV3Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChzY2hlbWFWaWV3W2ldICE9PSBhc24xVmlld1sxXSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICB2ZXJpZmllZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiByb290XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGlucHV0U2NoZW1hLm5hbWUpIHtcclxuICAgICAgICBpbnB1dFNjaGVtYS5uYW1lID0gaW5wdXRTY2hlbWEubmFtZS5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCBFTVBUWV9TVFJJTkcpO1xyXG4gICAgICAgIGlmIChpbnB1dFNjaGVtYS5uYW1lKVxyXG4gICAgICAgICAgICByb290W2lucHV0U2NoZW1hLm5hbWVdID0gaW5wdXREYXRhO1xyXG4gICAgfVxyXG4gICAgaWYgKGlucHV0U2NoZW1hIGluc3RhbmNlb2YgdHlwZVN0b3JlLkNvbnN0cnVjdGVkKSB7XHJcbiAgICAgICAgbGV0IGFkbWlzc2lvbiA9IDA7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IHtcclxuICAgICAgICAgICAgdmVyaWZpZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICByZXN1bHQ6IHtcclxuICAgICAgICAgICAgICAgIGVycm9yOiBcIlVua25vd24gZXJyb3JcIixcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgbGV0IG1heExlbmd0aCA9IGlucHV0U2NoZW1hLnZhbHVlQmxvY2sudmFsdWUubGVuZ3RoO1xyXG4gICAgICAgIGlmIChtYXhMZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGlmIChpbnB1dFNjaGVtYS52YWx1ZUJsb2NrLnZhbHVlWzBdIGluc3RhbmNlb2YgUmVwZWF0ZWQpIHtcclxuICAgICAgICAgICAgICAgIG1heExlbmd0aCA9IGlucHV0RGF0YS52YWx1ZUJsb2NrLnZhbHVlLmxlbmd0aDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobWF4TGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICB2ZXJpZmllZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHJlc3VsdDogcm9vdFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKGlucHV0RGF0YS52YWx1ZUJsb2NrLnZhbHVlLmxlbmd0aCA9PT0gMCkgJiZcclxuICAgICAgICAgICAgKGlucHV0U2NoZW1hLnZhbHVlQmxvY2sudmFsdWUubGVuZ3RoICE9PSAwKSkge1xyXG4gICAgICAgICAgICBsZXQgX29wdGlvbmFsID0gdHJ1ZTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dFNjaGVtYS52YWx1ZUJsb2NrLnZhbHVlLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICAgICAgX29wdGlvbmFsID0gX29wdGlvbmFsICYmIChpbnB1dFNjaGVtYS52YWx1ZUJsb2NrLnZhbHVlW2ldLm9wdGlvbmFsIHx8IGZhbHNlKTtcclxuICAgICAgICAgICAgaWYgKF9vcHRpb25hbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICB2ZXJpZmllZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IHJvb3RcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGlucHV0U2NoZW1hLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGlucHV0U2NoZW1hLm5hbWUgPSBpbnB1dFNjaGVtYS5uYW1lLnJlcGxhY2UoL15cXHMrfFxccyskL2csIEVNUFRZX1NUUklORyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXRTY2hlbWEubmFtZSlcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcm9vdFtpbnB1dFNjaGVtYS5uYW1lXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByb290LmVycm9yID0gXCJJbmNvbnNpc3RlbnQgb2JqZWN0IGxlbmd0aFwiO1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdmVyaWZpZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgcmVzdWx0OiByb290XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWF4TGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKChpIC0gYWRtaXNzaW9uKSA+PSBpbnB1dERhdGEudmFsdWVCbG9jay52YWx1ZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpbnB1dFNjaGVtYS52YWx1ZUJsb2NrLnZhbHVlW2ldLm9wdGlvbmFsID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IF9yZXN1bHQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcmlmaWVkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiByb290XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICByb290LmVycm9yID0gXCJJbmNvbnNpc3RlbnQgbGVuZ3RoIGJldHdlZW4gQVNOLjEgZGF0YSBhbmQgc2NoZW1hXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0U2NoZW1hLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRTY2hlbWEubmFtZSA9IGlucHV0U2NoZW1hLm5hbWUucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgRU1QVFlfU1RSSU5HKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0U2NoZW1hLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSByb290W2lucHV0U2NoZW1hLm5hbWVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3Jlc3VsdC5uYW1lID0gaW5wdXRTY2hlbWEubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3Jlc3VsdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChpbnB1dFNjaGVtYS52YWx1ZUJsb2NrLnZhbHVlWzBdIGluc3RhbmNlb2YgUmVwZWF0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBjb21wYXJlU2NoZW1hKHJvb3QsIGlucHV0RGF0YS52YWx1ZUJsb2NrLnZhbHVlW2ldLCBpbnB1dFNjaGVtYS52YWx1ZUJsb2NrLnZhbHVlWzBdLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnZlcmlmaWVkID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXRTY2hlbWEudmFsdWVCbG9jay52YWx1ZVswXS5vcHRpb25hbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkbWlzc2lvbisrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dFNjaGVtYS5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRTY2hlbWEubmFtZSA9IGlucHV0U2NoZW1hLm5hbWUucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgRU1QVFlfU1RSSU5HKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXRTY2hlbWEubmFtZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHJvb3RbaW5wdXRTY2hlbWEubmFtZV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgoTkFNRSBpbiBpbnB1dFNjaGVtYS52YWx1ZUJsb2NrLnZhbHVlWzBdKSAmJiAoaW5wdXRTY2hlbWEudmFsdWVCbG9jay52YWx1ZVswXS5uYW1lLmxlbmd0aCA+IDApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhcnJheVJvb3QgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChMT0NBTCBpbiBpbnB1dFNjaGVtYS52YWx1ZUJsb2NrLnZhbHVlWzBdKSAmJiAoaW5wdXRTY2hlbWEudmFsdWVCbG9jay52YWx1ZVswXS5sb2NhbCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheVJvb3QgPSBpbnB1dERhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5Um9vdCA9IHJvb3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJyYXlSb290W2lucHV0U2NoZW1hLnZhbHVlQmxvY2sudmFsdWVbMF0ubmFtZV0gPT09IFwidW5kZWZpbmVkXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheVJvb3RbaW5wdXRTY2hlbWEudmFsdWVCbG9jay52YWx1ZVswXS5uYW1lXSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJheVJvb3RbaW5wdXRTY2hlbWEudmFsdWVCbG9jay52YWx1ZVswXS5uYW1lXS5wdXNoKGlucHV0RGF0YS52YWx1ZUJsb2NrLnZhbHVlW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBjb21wYXJlU2NoZW1hKHJvb3QsIGlucHV0RGF0YS52YWx1ZUJsb2NrLnZhbHVlW2kgLSBhZG1pc3Npb25dLCBpbnB1dFNjaGVtYS52YWx1ZUJsb2NrLnZhbHVlW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnZlcmlmaWVkID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXRTY2hlbWEudmFsdWVCbG9jay52YWx1ZVtpXS5vcHRpb25hbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkbWlzc2lvbisrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dFNjaGVtYS5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRTY2hlbWEubmFtZSA9IGlucHV0U2NoZW1hLm5hbWUucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgRU1QVFlfU1RSSU5HKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXRTY2hlbWEubmFtZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHJvb3RbaW5wdXRTY2hlbWEubmFtZV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyZXN1bHQudmVyaWZpZWQgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IF9yZXN1bHQgPSB7XHJcbiAgICAgICAgICAgICAgICB2ZXJpZmllZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICByZXN1bHQ6IHJvb3RcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaWYgKGlucHV0U2NoZW1hLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGlucHV0U2NoZW1hLm5hbWUgPSBpbnB1dFNjaGVtYS5uYW1lLnJlcGxhY2UoL15cXHMrfFxccyskL2csIEVNUFRZX1NUUklORyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXRTY2hlbWEubmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSByb290W2lucHV0U2NoZW1hLm5hbWVdO1xyXG4gICAgICAgICAgICAgICAgICAgIF9yZXN1bHQubmFtZSA9IGlucHV0U2NoZW1hLm5hbWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIF9yZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHZlcmlmaWVkOiB0cnVlLFxyXG4gICAgICAgICAgICByZXN1bHQ6IHJvb3RcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgaWYgKGlucHV0U2NoZW1hLnByaW1pdGl2ZVNjaGVtYSAmJlxyXG4gICAgICAgIChWQUxVRV9IRVhfVklFVyBpbiBpbnB1dERhdGEudmFsdWVCbG9jaykpIHtcclxuICAgICAgICBjb25zdCBhc24xID0gbG9jYWxGcm9tQkVSKGlucHV0RGF0YS52YWx1ZUJsb2NrLnZhbHVlSGV4Vmlldyk7XHJcbiAgICAgICAgaWYgKGFzbjEub2Zmc2V0ID09PSAtMSkge1xyXG4gICAgICAgICAgICBjb25zdCBfcmVzdWx0ID0ge1xyXG4gICAgICAgICAgICAgICAgdmVyaWZpZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgcmVzdWx0OiBhc24xLnJlc3VsdFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBpZiAoaW5wdXRTY2hlbWEubmFtZSkge1xyXG4gICAgICAgICAgICAgICAgaW5wdXRTY2hlbWEubmFtZSA9IGlucHV0U2NoZW1hLm5hbWUucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgRU1QVFlfU1RSSU5HKTtcclxuICAgICAgICAgICAgICAgIGlmIChpbnB1dFNjaGVtYS5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHJvb3RbaW5wdXRTY2hlbWEubmFtZV07XHJcbiAgICAgICAgICAgICAgICAgICAgX3Jlc3VsdC5uYW1lID0gaW5wdXRTY2hlbWEubmFtZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gX3Jlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNvbXBhcmVTY2hlbWEocm9vdCwgYXNuMS5yZXN1bHQsIGlucHV0U2NoZW1hLnByaW1pdGl2ZVNjaGVtYSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHZlcmlmaWVkOiB0cnVlLFxyXG4gICAgICAgIHJlc3VsdDogcm9vdFxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiB2ZXJpZnlTY2hlbWEoaW5wdXRCdWZmZXIsIGlucHV0U2NoZW1hKSB7XHJcbiAgICBpZiAoKGlucHV0U2NoZW1hIGluc3RhbmNlb2YgT2JqZWN0KSA9PT0gZmFsc2UpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB2ZXJpZmllZDogZmFsc2UsXHJcbiAgICAgICAgICAgIHJlc3VsdDogeyBlcnJvcjogXCJXcm9uZyBBU04uMSBzY2hlbWEgdHlwZVwiIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgY29uc3QgYXNuMSA9IGxvY2FsRnJvbUJFUihwdnRzdXRpbHNfX25hbWVzcGFjZS5CdWZmZXJTb3VyY2VDb252ZXJ0ZXIudG9VaW50OEFycmF5KGlucHV0QnVmZmVyKSk7XHJcbiAgICBpZiAoYXNuMS5vZmZzZXQgPT09IC0xKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdmVyaWZpZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICByZXN1bHQ6IGFzbjEucmVzdWx0XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIHJldHVybiBjb21wYXJlU2NoZW1hKGFzbjEucmVzdWx0LCBhc24xLnJlc3VsdCwgaW5wdXRTY2hlbWEpO1xyXG59XG5cbmV4cG9ydHMuQW55ID0gQW55O1xuZXhwb3J0cy5CYXNlQmxvY2sgPSBCYXNlQmxvY2s7XG5leHBvcnRzLkJhc2VTdHJpbmdCbG9jayA9IEJhc2VTdHJpbmdCbG9jaztcbmV4cG9ydHMuQml0U3RyaW5nID0gQml0U3RyaW5nO1xuZXhwb3J0cy5CbXBTdHJpbmcgPSBCbXBTdHJpbmc7XG5leHBvcnRzLkJvb2xlYW4gPSBCb29sZWFuO1xuZXhwb3J0cy5DaGFyYWN0ZXJTdHJpbmcgPSBDaGFyYWN0ZXJTdHJpbmc7XG5leHBvcnRzLkNob2ljZSA9IENob2ljZTtcbmV4cG9ydHMuQ29uc3RydWN0ZWQgPSBDb25zdHJ1Y3RlZDtcbmV4cG9ydHMuREFURSA9IERBVEU7XG5leHBvcnRzLkRhdGVUaW1lID0gRGF0ZVRpbWU7XG5leHBvcnRzLkR1cmF0aW9uID0gRHVyYXRpb247XG5leHBvcnRzLkVuZE9mQ29udGVudCA9IEVuZE9mQ29udGVudDtcbmV4cG9ydHMuRW51bWVyYXRlZCA9IEVudW1lcmF0ZWQ7XG5leHBvcnRzLkdlbmVyYWxTdHJpbmcgPSBHZW5lcmFsU3RyaW5nO1xuZXhwb3J0cy5HZW5lcmFsaXplZFRpbWUgPSBHZW5lcmFsaXplZFRpbWU7XG5leHBvcnRzLkdyYXBoaWNTdHJpbmcgPSBHcmFwaGljU3RyaW5nO1xuZXhwb3J0cy5IZXhCbG9jayA9IEhleEJsb2NrO1xuZXhwb3J0cy5JQTVTdHJpbmcgPSBJQTVTdHJpbmc7XG5leHBvcnRzLkludGVnZXIgPSBJbnRlZ2VyO1xuZXhwb3J0cy5OdWxsID0gTnVsbDtcbmV4cG9ydHMuTnVtZXJpY1N0cmluZyA9IE51bWVyaWNTdHJpbmc7XG5leHBvcnRzLk9iamVjdElkZW50aWZpZXIgPSBPYmplY3RJZGVudGlmaWVyO1xuZXhwb3J0cy5PY3RldFN0cmluZyA9IE9jdGV0U3RyaW5nO1xuZXhwb3J0cy5QcmltaXRpdmUgPSBQcmltaXRpdmU7XG5leHBvcnRzLlByaW50YWJsZVN0cmluZyA9IFByaW50YWJsZVN0cmluZztcbmV4cG9ydHMuUmF3RGF0YSA9IFJhd0RhdGE7XG5leHBvcnRzLlJlbGF0aXZlT2JqZWN0SWRlbnRpZmllciA9IFJlbGF0aXZlT2JqZWN0SWRlbnRpZmllcjtcbmV4cG9ydHMuUmVwZWF0ZWQgPSBSZXBlYXRlZDtcbmV4cG9ydHMuU2VxdWVuY2UgPSBTZXF1ZW5jZTtcbmV4cG9ydHMuU2V0ID0gU2V0O1xuZXhwb3J0cy5USU1FID0gVElNRTtcbmV4cG9ydHMuVGVsZXRleFN0cmluZyA9IFRlbGV0ZXhTdHJpbmc7XG5leHBvcnRzLlRpbWVPZkRheSA9IFRpbWVPZkRheTtcbmV4cG9ydHMuVVRDVGltZSA9IFVUQ1RpbWU7XG5leHBvcnRzLlVuaXZlcnNhbFN0cmluZyA9IFVuaXZlcnNhbFN0cmluZztcbmV4cG9ydHMuVXRmOFN0cmluZyA9IFV0ZjhTdHJpbmc7XG5leHBvcnRzLlZhbHVlQmxvY2sgPSBWYWx1ZUJsb2NrO1xuZXhwb3J0cy5WaWRlb3RleFN0cmluZyA9IFZpZGVvdGV4U3RyaW5nO1xuZXhwb3J0cy5WaWV3V3JpdGVyID0gVmlld1dyaXRlcjtcbmV4cG9ydHMuVmlzaWJsZVN0cmluZyA9IFZpc2libGVTdHJpbmc7XG5leHBvcnRzLmNvbXBhcmVTY2hlbWEgPSBjb21wYXJlU2NoZW1hO1xuZXhwb3J0cy5mcm9tQkVSID0gZnJvbUJFUjtcbmV4cG9ydHMudmVyaWZ5U2NoZW1hID0gdmVyaWZ5U2NoZW1hO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicHZ0c3V0aWxzIiwicmVxdWlyZSIsInB2dXRpbHMiLCJfaW50ZXJvcE5hbWVzcGFjZSIsImUiLCJfX2VzTW9kdWxlIiwibiIsImNyZWF0ZSIsImtleXMiLCJmb3JFYWNoIiwiayIsImQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXQiLCJlbnVtZXJhYmxlIiwiZnJlZXplIiwicHZ0c3V0aWxzX19uYW1lc3BhY2UiLCJwdnV0aWxzX19uYW1lc3BhY2UiLCJhc3NlcnRCaWdJbnQiLCJCaWdJbnQiLCJFcnJvciIsImNvbmNhdCIsImJ1ZmZlcnMiLCJvdXRwdXRMZW5ndGgiLCJwcmV2TGVuZ3RoIiwiaSIsImxlbmd0aCIsImJ1ZmZlciIsImJ5dGVMZW5ndGgiLCJyZXRWaWV3IiwiVWludDhBcnJheSIsInNldCIsImNoZWNrQnVmZmVyUGFyYW1zIiwiYmFzZUJsb2NrIiwiaW5wdXRCdWZmZXIiLCJpbnB1dE9mZnNldCIsImlucHV0TGVuZ3RoIiwiZXJyb3IiLCJWaWV3V3JpdGVyIiwiY29uc3RydWN0b3IiLCJpdGVtcyIsIndyaXRlIiwiYnVmIiwicHVzaCIsImZpbmFsIiwicG93ZXJzMiIsImRpZ2l0c1N0cmluZyIsIk5BTUUiLCJWQUxVRV9IRVhfVklFVyIsIklTX0hFWF9PTkxZIiwiSURfQkxPQ0siLCJUQUdfQ0xBU1MiLCJUQUdfTlVNQkVSIiwiSVNfQ09OU1RSVUNURUQiLCJGUk9NX0JFUiIsIlRPX0JFUiIsIkxPQ0FMIiwiRU1QVFlfU1RSSU5HIiwiRU1QVFlfQlVGRkVSIiwiQXJyYXlCdWZmZXIiLCJFTVBUWV9WSUVXIiwiRU5EX09GX0NPTlRFTlRfTkFNRSIsIk9DVEVUX1NUUklOR19OQU1FIiwiQklUX1NUUklOR19OQU1FIiwiSGV4QmxvY2siLCJCYXNlQ2xhc3MiLCJfYSIsIlNvbWUiLCJhcmdzIiwicGFyYW1zIiwiaXNIZXhPbmx5IiwidmFsdWVIZXhWaWV3IiwidmFsdWVIZXgiLCJCdWZmZXJTb3VyY2VDb252ZXJ0ZXIiLCJ0b1VpbnQ4QXJyYXkiLCJzbGljZSIsImZyb21CRVIiLCJ2aWV3IiwiZW5kTGVuZ3RoIiwic3ViYXJyYXkiLCJ3YXJuaW5ncyIsImJsb2NrTGVuZ3RoIiwidG9CRVIiLCJzaXplT25seSIsInRvSlNPTiIsIkNvbnZlcnQiLCJUb0hleCIsIkxvY2FsQmFzZUJsb2NrIiwidmFsdWVCZWZvcmVEZWNvZGUiLCJ2YWx1ZUJlZm9yZURlY29kZVZpZXciLCJibG9ja05hbWUiLCJWYWx1ZUJsb2NrIiwiVHlwZUVycm9yIiwid3JpdGVyIiwiTG9jYWxJZGVudGlmaWNhdGlvbkJsb2NrIiwiaWRCbG9jayIsIl9iIiwiX2MiLCJfZCIsInRhZ0NsYXNzIiwidGFnTnVtYmVyIiwiaXNDb25zdHJ1Y3RlZCIsImZpcnN0T2N0ZXQiLCJudW1iZXIiLCJlbmNvZGVkQnVmIiwidXRpbFRvQmFzZSIsImVuY29kZWRWaWV3Iiwic2l6ZSIsImN1clZpZXciLCJpbnB1dFZpZXciLCJpbnRCdWZmZXIiLCJ0YWdDbGFzc01hc2siLCJ0YWdOdW1iZXJNYXNrIiwiY291bnQiLCJpbnRUYWdOdW1iZXJCdWZmZXIiLCJ0YWdOdW1iZXJCdWZmZXJNYXhMZW5ndGgiLCJ0ZW1wQnVmZmVyVmlldyIsInV0aWxGcm9tQmFzZSIsIkxvY2FsTGVuZ3RoQmxvY2siLCJsZW5CbG9jayIsImlzSW5kZWZpbml0ZUZvcm0iLCJsb25nRm9ybVVzZWQiLCJsZW5PZmZzZXQiLCJsZW5ndGhCdWZmZXJWaWV3IiwicmV0QnVmIiwidHlwZVN0b3JlIiwiQmFzZUJsb2NrIiwibmFtZSIsIm9wdGlvbmFsIiwicHJpbWl0aXZlU2NoZW1hIiwicGFyYW1ldGVycyIsInZhbHVlQmxvY2tUeXBlIiwidmFsdWVCbG9jayIsInJlc3VsdE9mZnNldCIsIl93cml0ZXIiLCJwcmVwYXJlSW5kZWZpbml0ZUZvcm0iLCJpZEJsb2NrQnVmIiwidmFsdWVCbG9ja0J1ZiIsImxlbkJsb2NrQnVmIiwib2JqZWN0IiwidG9TdHJpbmciLCJlbmNvZGluZyIsIm9uQXNjaWlFbmNvZGluZyIsImlzRXF1YWwiLCJvdGhlciIsInRoaXNSYXciLCJvdGhlclJhdyIsImlzRXF1YWxCdWZmZXIiLCJDb25zdHJ1Y3RlZCIsIkJhc2VTdHJpbmdCbG9jayIsInN0cmluZ1ZhbHVlQmxvY2tUeXBlIiwiZnJvbVN0cmluZyIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJmcm9tQnVmZmVyIiwiTG9jYWxQcmltaXRpdmVWYWx1ZUJsb2NrIiwiX2EkdyIsIlByaW1pdGl2ZSIsImxvY2FsQ2hhbmdlVHlwZSIsImlucHV0T2JqZWN0IiwibmV3VHlwZSIsIm5ld09iamVjdCIsImxvY2FsRnJvbUJFUiIsImluY29taW5nT2Zmc2V0IiwicmV0dXJuT2JqZWN0Iiwib2Zmc2V0IiwicmVzdWx0IiwibmV3QVNOMVR5cGUiLCJFbmRPZkNvbnRlbnQiLCJCb29sZWFuIiwiSW50ZWdlciIsIkJpdFN0cmluZyIsIk9jdGV0U3RyaW5nIiwiTnVsbCIsIk9iamVjdElkZW50aWZpZXIiLCJFbnVtZXJhdGVkIiwiVXRmOFN0cmluZyIsIlJlbGF0aXZlT2JqZWN0SWRlbnRpZmllciIsIlRJTUUiLCJTZXF1ZW5jZSIsIlNldCIsIk51bWVyaWNTdHJpbmciLCJQcmludGFibGVTdHJpbmciLCJUZWxldGV4U3RyaW5nIiwiVmlkZW90ZXhTdHJpbmciLCJJQTVTdHJpbmciLCJVVENUaW1lIiwiR2VuZXJhbGl6ZWRUaW1lIiwiR3JhcGhpY1N0cmluZyIsIlZpc2libGVTdHJpbmciLCJHZW5lcmFsU3RyaW5nIiwiVW5pdmVyc2FsU3RyaW5nIiwiQ2hhcmFjdGVyU3RyaW5nIiwiQm1wU3RyaW5nIiwiREFURSIsIlRpbWVPZkRheSIsIkRhdGVUaW1lIiwiRHVyYXRpb24iLCJjaGVja0xlbiIsImluZGVmaW5pdGVMZW5ndGgiLCJMb2NhbENvbnN0cnVjdGVkVmFsdWVCbG9jayIsImN1cnJlbnRPZmZzZXQiLCJwb3AiLCJfYSR2IiwidmFsdWVzIiwic3BsaXQiLCJtYXAiLCJvIiwiam9pbiIsIkxvY2FsRW5kT2ZDb250ZW50VmFsdWVCbG9jayIsIm92ZXJyaWRlIiwiX2EkdSIsIl9hJHQiLCJMb2NhbEJvb2xlYW5WYWx1ZUJsb2NrIiwib2N0ZXQiLCJ1dGlsRGVjb2RlVEMiLCJjYWxsIiwiX2EkcyIsIkxvY2FsT2N0ZXRTdHJpbmdWYWx1ZUJsb2NrIiwicHJvdG90eXBlIiwiY3VycmVudEJsb2NrTmFtZSIsIl9hJHIiLCJhc24iLCJhcnJheSIsImNvbnRlbnQiLCJMb2NhbEJpdFN0cmluZ1ZhbHVlQmxvY2siLCJ1bnVzZWRCaXRzIiwiX2EkcSIsImJpdHMiLCJieXRlIiwicGFkU3RhcnQiLCJiaXRzU3RyIiwic3Vic3RyaW5nIiwiX2EkcCIsInZpZXdBZGQiLCJmaXJzdCIsInNlY29uZCIsImMiLCJmaXJzdFZpZXciLCJzZWNvbmRWaWV3IiwiZmlyc3RWaWV3Q29weSIsImZpcnN0Vmlld0NvcHlMZW5ndGgiLCJzZWNvbmRWaWV3Q29weSIsInNlY29uZFZpZXdDb3B5TGVuZ3RoIiwibWF4IiwiY291bnRlciIsInV0aWxDb25jYXRWaWV3IiwicG93ZXIyIiwicCIsImRpZ2l0cyIsIm5ld1ZhbHVlIiwidmlld1N1YiIsImIiLCJMb2NhbEludGVnZXJWYWx1ZUJsb2NrIiwiX3ZhbHVlRGVjIiwic2V0VmFsdWVIZXgiLCJ1bmRlZmluZWQiLCJ2YWx1ZURlYyIsInYiLCJ1dGlsRW5jb2RlVEMiLCJmcm9tREVSIiwiZXhwZWN0ZWRMZW5ndGgiLCJ0b0RFUiIsInVwZGF0ZWRWaWV3IiwiZmlyc3RCaXQiLCJiaXROdW1iZXIiLCJjdXJyZW50Qnl0ZSIsImFzbjFWaWV3IiwiZmxhZyIsImJ5dGVOdW1iZXIiLCJjaGFyQXQiLCJfYSRvIiwidG9CaWdJbnQiLCJmcm9tQmlnSW50IiwiYmlnSW50VmFsdWUiLCJoZXgiLCJyZXBsYWNlIiwiRnJvbUhleCIsImZpcnN0SW50Iiwic2Vjb25kSW50IiwicmVzIiwiY29udmVydFRvREVSIiwiaW50ZWdlciIsImNvbnZlcnRGcm9tREVSIiwiX2EkbiIsIkxvY2FsU2lkVmFsdWVCbG9jayIsImlzRmlyc3RTaWQiLCJ0ZW1wVmlldyIsInZhbHVlQmlnSW50IiwiYnl0ZXMiLCJwYXJzZUludCIsImxlbiIsInNpZFZhbHVlIiwiTG9jYWxPYmplY3RJZGVudGlmaWVyVmFsdWVCbG9jayIsInNpZEJsb2NrIiwicmV0QnVmZmVycyIsInZhbHVlQnVmIiwic3RyaW5nIiwicG9zMSIsInBvczIiLCJzaWQiLCJpbmRleE9mIiwicGx1cyIsInBhcnNlZFNJRCIsImlzTmFOIiwiTnVtYmVyIiwiTUFYX1NBRkVfSU5URUdFUiIsInNpZFN0ciIsInNpZEFycmF5IiwiX2EkbSIsIkxvY2FsUmVsYXRpdmVTaWRWYWx1ZUJsb2NrIiwiTG9jYWxSZWxhdGl2ZU9iamVjdElkZW50aWZpZXJWYWx1ZUJsb2NrIiwiX2EkbCIsIl9hJGsiLCJfYSRqIiwiTG9jYWxTdHJpbmdWYWx1ZUJsb2NrIiwiTG9jYWxTaW1wbGVTdHJpbmdWYWx1ZUJsb2NrIiwiTG9jYWxTaW1wbGVTdHJpbmdCbG9jayIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImFwcGx5IiwiaW5wdXRTdHJpbmciLCJzdHJMZW4iLCJjaGFyQ29kZUF0IiwiTG9jYWxVdGY4U3RyaW5nVmFsdWVCbG9jayIsIlRvVXRmOFN0cmluZyIsImV4IiwiVG9CaW5hcnkiLCJGcm9tVXRmOFN0cmluZyIsIl9hJGkiLCJMb2NhbEJtcFN0cmluZ1ZhbHVlQmxvY2siLCJUb1V0ZjE2U3RyaW5nIiwiRnJvbVV0ZjE2U3RyaW5nIiwiX2EkaCIsIkxvY2FsVW5pdmVyc2FsU3RyaW5nVmFsdWVCbG9jayIsImNvcHlCdWZmZXIiLCJpc1ZpZXciLCJ2YWx1ZVZpZXciLCJVaW50MzJBcnJheSIsInN0ckxlbmd0aCIsImNvZGVCdWYiLCJjb2RlVmlldyIsImRpZiIsImoiLCJfYSRnIiwiX2EkZiIsIl9hJGUiLCJfYSRkIiwiX2EkYyIsIl9hJGIiLCJfYSRhIiwiX2EkOSIsIl9hJDgiLCJfYSQ3IiwiX2EkNiIsInZhbHVlRGF0ZSIsInllYXIiLCJtb250aCIsImRheSIsImhvdXIiLCJtaW51dGUiLCJmcm9tRGF0ZSIsInRvQnVmZmVyIiwic3RyIiwiaW5wdXREYXRlIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwidG9EYXRlIiwiRGF0ZSIsIlVUQyIsInBhcnNlciIsInBhcnNlckFycmF5IiwiZXhlYyIsIm91dHB1dEFycmF5IiwiQXJyYXkiLCJwYWROdW1iZXIiLCJ0b0lTT1N0cmluZyIsIl9hJDUiLCJtaWxsaXNlY29uZCIsImdldFVUQ01pbGxpc2Vjb25kcyIsImlzVVRDIiwidGltZVN0cmluZyIsImRhdGVUaW1lU3RyaW5nIiwiZnJhY3Rpb25QYXJ0IiwiaG91ckRpZmZlcmVuY2UiLCJtaW51dGVEaWZmZXJlbmNlIiwidmFsdWVPZiIsIm11bHRpcGxpZXIiLCJkaWZmZXJlbmNlUG9zaXRpb24iLCJkaWZmZXJlbmNlU3RyaW5nIiwiZnJhY3Rpb25Qb2ludFBvc2l0aW9uIiwiZnJhY3Rpb25QYXJ0Q2hlY2siLCJmcmFjdGlvblJlc3VsdCIsIk1hdGgiLCJmbG9vciIsInRlbXBEYXRlIiwiZ2V0VVRDRGF5IiwiX2EkNCIsIl9hJDMiLCJfYSQyIiwiX2EkMSIsIkFueSIsIkNob2ljZSIsIlJlcGVhdGVkIiwibG9jYWwiLCJSYXdEYXRhIiwiZGF0YSIsImRhdGFWaWV3IiwiY29tcGFyZVNjaGVtYSIsInJvb3QiLCJpbnB1dERhdGEiLCJpbnB1dFNjaGVtYSIsInZlcmlmaWVkIiwiX3Jlc3VsdCIsImhhc093blByb3BlcnR5IiwiZW5jb2RlZElkIiwiZGVjb2RlZE9mZnNldCIsInNjaGVtYVZpZXciLCJhZG1pc3Npb24iLCJtYXhMZW5ndGgiLCJfb3B0aW9uYWwiLCJhcnJheVJvb3QiLCJhc24xIiwidmVyaWZ5U2NoZW1hIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/asn1js/build/index.js\n");

/***/ })

};
;